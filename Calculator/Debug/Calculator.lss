
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  000041ca  0000423e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000024a8  00000000  00000000  00004370  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bb0  00000000  00000000  00006818  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  000073c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  00007588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  0000779c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  00009dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  0000b27c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000c588  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000c768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000ca6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d489  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <main>
      7a:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e7       	ldi	r26, 0x78	; 120
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e7       	ldi	r24, 0x78	; 120
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b4 20 	jmp	0x4168	; 0x4168 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	68 e7       	ldi	r22, 0x78	; 120
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 b5 20 	jmp	0x416a	; 0x416a <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 d1 20 	jmp	0x41a2	; 0x41a2 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 bc 20 	jmp	0x4178	; 0x4178 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 d8 20 	jmp	0x41b0	; 0x41b0 <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 b4 20 	jmp	0x4168	; 0x4168 <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	e0 58       	subi	r30, 0x80	; 128
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <CLCD_voidSendCommand>:




void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	2f 97       	sbiw	r28, 0x0f	; 15
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	8f 87       	std	Y+15, r24	; 0x0f
	//Set RS->0 , Set RW ->0  for send command
	DIO_voidSetPinVal(CLCD_CTRL_PORT,RS,PIN_VAL_LOW);
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(CLCD_CTRL_PORT,RW,PIN_VAL_LOW);
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	40 e0       	ldi	r20, 0x00	; 0
     f00:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_voidSetPinVal>
     DIO_voidSetPortVal(CLCD_DATA_PORT,Copy_u8Command);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	6f 85       	ldd	r22, Y+15	; 0x0f
     f08:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <DIO_voidSetPortVal>

  // SET ENable PULSE
     DIO_voidSetPinVal(CLCD_CTRL_PORT,EN,PIN_VAL_HIGH);
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	62 e0       	ldi	r22, 0x02	; 2
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_voidSetPinVal>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a0 e8       	ldi	r26, 0x80	; 128
     f1c:	bf e3       	ldi	r27, 0x3F	; 63
     f1e:	8b 87       	std	Y+11, r24	; 0x0b
     f20:	9c 87       	std	Y+12, r25	; 0x0c
     f22:	ad 87       	std	Y+13, r26	; 0x0d
     f24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f26:	6b 85       	ldd	r22, Y+11	; 0x0b
     f28:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	4a ef       	ldi	r20, 0xFA	; 250
     f34:	54 e4       	ldi	r21, 0x44	; 68
     f36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	8f 83       	std	Y+7, r24	; 0x07
     f40:	98 87       	std	Y+8, r25	; 0x08
     f42:	a9 87       	std	Y+9, r26	; 0x09
     f44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f46:	6f 81       	ldd	r22, Y+7	; 0x07
     f48:	78 85       	ldd	r23, Y+8	; 0x08
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e8       	ldi	r20, 0x80	; 128
     f54:	5f e3       	ldi	r21, 0x3F	; 63
     f56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f5a:	88 23       	and	r24, r24
     f5c:	2c f4       	brge	.+10     	; 0xf68 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9e 83       	std	Y+6, r25	; 0x06
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	3f c0       	rjmp	.+126    	; 0xfe6 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     f68:	6f 81       	ldd	r22, Y+7	; 0x07
     f6a:	78 85       	ldd	r23, Y+8	; 0x08
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	3f ef       	ldi	r19, 0xFF	; 255
     f74:	4f e7       	ldi	r20, 0x7F	; 127
     f76:	57 e4       	ldi	r21, 0x47	; 71
     f78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f7c:	18 16       	cp	r1, r24
     f7e:	4c f5       	brge	.+82     	; 0xfd2 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f80:	6b 85       	ldd	r22, Y+11	; 0x0b
     f82:	7c 85       	ldd	r23, Y+12	; 0x0c
     f84:	8d 85       	ldd	r24, Y+13	; 0x0d
     f86:	9e 85       	ldd	r25, Y+14	; 0x0e
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e2       	ldi	r20, 0x20	; 32
     f8e:	51 e4       	ldi	r21, 0x41	; 65
     f90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <CLCD_voidSendCommand+0xee>
     faa:	88 ec       	ldi	r24, 0xC8	; 200
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	9c 83       	std	Y+4, r25	; 0x04
     fb0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <CLCD_voidSendCommand+0xdc>
     fba:	9c 83       	std	Y+4, r25	; 0x04
     fbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbe:	8d 81       	ldd	r24, Y+5	; 0x05
     fc0:	9e 81       	ldd	r25, Y+6	; 0x06
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	9e 83       	std	Y+6, r25	; 0x06
     fc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	69 f7       	brne	.-38     	; 0xfaa <CLCD_voidSendCommand+0xd0>
     fd0:	14 c0       	rjmp	.+40     	; 0xffa <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd2:	6f 81       	ldd	r22, Y+7	; 0x07
     fd4:	78 85       	ldd	r23, Y+8	; 0x08
     fd6:	89 85       	ldd	r24, Y+9	; 0x09
     fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9e 83       	std	Y+6, r25	; 0x06
     fe4:	8d 83       	std	Y+5, r24	; 0x05
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	9e 81       	ldd	r25, Y+6	; 0x06
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <CLCD_voidSendCommand+0x118>
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
  DIO_voidSetPinVal(CLCD_CTRL_PORT,EN,PIN_VAL_LOW);
     ffa:	82 e0       	ldi	r24, 0x02	; 2
     ffc:	62 e0       	ldi	r22, 0x02	; 2
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_voidSetPinVal>

}
    1004:	2f 96       	adiw	r28, 0x0f	; 15
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <CLCD_voidSendData>:



void CLCD_voidSendData(u8 Copy_u8Data)
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	2f 97       	sbiw	r28, 0x0f	; 15
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	8f 87       	std	Y+15, r24	; 0x0f
  //Set RS->1 , Set RW ->0  for send command
  DIO_voidSetPinVal(CLCD_CTRL_PORT,RS,PIN_VAL_HIGH);
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_voidSetPinVal>
  DIO_voidSetPinVal(CLCD_CTRL_PORT,RW,PIN_VAL_LOW);
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	61 e0       	ldi	r22, 0x01	; 1
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_voidSetPinVal>
  DIO_voidSetPortVal(CLCD_DATA_PORT,Copy_u8Data);
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	6f 85       	ldd	r22, Y+15	; 0x0f
    1044:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <DIO_voidSetPortVal>

  // SET ENable PULSE
  DIO_voidSetPinVal(CLCD_CTRL_PORT,EN,PIN_VAL_HIGH);
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	62 e0       	ldi	r22, 0x02	; 2
    104c:	41 e0       	ldi	r20, 0x01	; 1
    104e:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_voidSetPinVal>
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	a0 e8       	ldi	r26, 0x80	; 128
    1058:	bf e3       	ldi	r27, 0x3F	; 63
    105a:	8b 87       	std	Y+11, r24	; 0x0b
    105c:	9c 87       	std	Y+12, r25	; 0x0c
    105e:	ad 87       	std	Y+13, r26	; 0x0d
    1060:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1062:	6b 85       	ldd	r22, Y+11	; 0x0b
    1064:	7c 85       	ldd	r23, Y+12	; 0x0c
    1066:	8d 85       	ldd	r24, Y+13	; 0x0d
    1068:	9e 85       	ldd	r25, Y+14	; 0x0e
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	4a ef       	ldi	r20, 0xFA	; 250
    1070:	54 e4       	ldi	r21, 0x44	; 68
    1072:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	8f 83       	std	Y+7, r24	; 0x07
    107c:	98 87       	std	Y+8, r25	; 0x08
    107e:	a9 87       	std	Y+9, r26	; 0x09
    1080:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1082:	6f 81       	ldd	r22, Y+7	; 0x07
    1084:	78 85       	ldd	r23, Y+8	; 0x08
    1086:	89 85       	ldd	r24, Y+9	; 0x09
    1088:	9a 85       	ldd	r25, Y+10	; 0x0a
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e8       	ldi	r20, 0x80	; 128
    1090:	5f e3       	ldi	r21, 0x3F	; 63
    1092:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1096:	88 23       	and	r24, r24
    1098:	2c f4       	brge	.+10     	; 0x10a4 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	9e 83       	std	Y+6, r25	; 0x06
    10a0:	8d 83       	std	Y+5, r24	; 0x05
    10a2:	3f c0       	rjmp	.+126    	; 0x1122 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    10a4:	6f 81       	ldd	r22, Y+7	; 0x07
    10a6:	78 85       	ldd	r23, Y+8	; 0x08
    10a8:	89 85       	ldd	r24, Y+9	; 0x09
    10aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	3f ef       	ldi	r19, 0xFF	; 255
    10b0:	4f e7       	ldi	r20, 0x7F	; 127
    10b2:	57 e4       	ldi	r21, 0x47	; 71
    10b4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10b8:	18 16       	cp	r1, r24
    10ba:	4c f5       	brge	.+82     	; 0x110e <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    10be:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e2       	ldi	r20, 0x20	; 32
    10ca:	51 e4       	ldi	r21, 0x41	; 65
    10cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	bc 01       	movw	r22, r24
    10d6:	cd 01       	movw	r24, r26
    10d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	9e 83       	std	Y+6, r25	; 0x06
    10e2:	8d 83       	std	Y+5, r24	; 0x05
    10e4:	0f c0       	rjmp	.+30     	; 0x1104 <CLCD_voidSendData+0xee>
    10e6:	88 ec       	ldi	r24, 0xC8	; 200
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	9c 83       	std	Y+4, r25	; 0x04
    10ec:	8b 83       	std	Y+3, r24	; 0x03
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <CLCD_voidSendData+0xdc>
    10f6:	9c 83       	std	Y+4, r25	; 0x04
    10f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fa:	8d 81       	ldd	r24, Y+5	; 0x05
    10fc:	9e 81       	ldd	r25, Y+6	; 0x06
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	69 f7       	brne	.-38     	; 0x10e6 <CLCD_voidSendData+0xd0>
    110c:	14 c0       	rjmp	.+40     	; 0x1136 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110e:	6f 81       	ldd	r22, Y+7	; 0x07
    1110:	78 85       	ldd	r23, Y+8	; 0x08
    1112:	89 85       	ldd	r24, Y+9	; 0x09
    1114:	9a 85       	ldd	r25, Y+10	; 0x0a
    1116:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	9e 83       	std	Y+6, r25	; 0x06
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <CLCD_voidSendData+0x118>
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
  DIO_voidSetPinVal(CLCD_CTRL_PORT,EN,PIN_VAL_LOW);
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	62 e0       	ldi	r22, 0x02	; 2
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_voidSetPinVal>

}
    1140:	2f 96       	adiw	r28, 0x0f	; 15
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <CLCD_voidInit>:


void CLCD_voidInit(void)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	e8 97       	sbiw	r28, 0x38	; 56
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	a0 e2       	ldi	r26, 0x20	; 32
    116c:	b2 e4       	ldi	r27, 0x42	; 66
    116e:	8d ab       	std	Y+53, r24	; 0x35
    1170:	9e ab       	std	Y+54, r25	; 0x36
    1172:	af ab       	std	Y+55, r26	; 0x37
    1174:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1176:	6d a9       	ldd	r22, Y+53	; 0x35
    1178:	7e a9       	ldd	r23, Y+54	; 0x36
    117a:	8f a9       	ldd	r24, Y+55	; 0x37
    117c:	98 ad       	ldd	r25, Y+56	; 0x38
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	4a ef       	ldi	r20, 0xFA	; 250
    1184:	54 e4       	ldi	r21, 0x44	; 68
    1186:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	89 ab       	std	Y+49, r24	; 0x31
    1190:	9a ab       	std	Y+50, r25	; 0x32
    1192:	ab ab       	std	Y+51, r26	; 0x33
    1194:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1196:	69 a9       	ldd	r22, Y+49	; 0x31
    1198:	7a a9       	ldd	r23, Y+50	; 0x32
    119a:	8b a9       	ldd	r24, Y+51	; 0x33
    119c:	9c a9       	ldd	r25, Y+52	; 0x34
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e8       	ldi	r20, 0x80	; 128
    11a4:	5f e3       	ldi	r21, 0x3F	; 63
    11a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11aa:	88 23       	and	r24, r24
    11ac:	2c f4       	brge	.+10     	; 0x11b8 <CLCD_voidInit+0x66>
		__ticks = 1;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	98 ab       	std	Y+48, r25	; 0x30
    11b4:	8f a7       	std	Y+47, r24	; 0x2f
    11b6:	3f c0       	rjmp	.+126    	; 0x1236 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    11b8:	69 a9       	ldd	r22, Y+49	; 0x31
    11ba:	7a a9       	ldd	r23, Y+50	; 0x32
    11bc:	8b a9       	ldd	r24, Y+51	; 0x33
    11be:	9c a9       	ldd	r25, Y+52	; 0x34
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	3f ef       	ldi	r19, 0xFF	; 255
    11c4:	4f e7       	ldi	r20, 0x7F	; 127
    11c6:	57 e4       	ldi	r21, 0x47	; 71
    11c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11cc:	18 16       	cp	r1, r24
    11ce:	4c f5       	brge	.+82     	; 0x1222 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d0:	6d a9       	ldd	r22, Y+53	; 0x35
    11d2:	7e a9       	ldd	r23, Y+54	; 0x36
    11d4:	8f a9       	ldd	r24, Y+55	; 0x37
    11d6:	98 ad       	ldd	r25, Y+56	; 0x38
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e2       	ldi	r20, 0x20	; 32
    11de:	51 e4       	ldi	r21, 0x41	; 65
    11e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	bc 01       	movw	r22, r24
    11ea:	cd 01       	movw	r24, r26
    11ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	98 ab       	std	Y+48, r25	; 0x30
    11f6:	8f a7       	std	Y+47, r24	; 0x2f
    11f8:	0f c0       	rjmp	.+30     	; 0x1218 <CLCD_voidInit+0xc6>
    11fa:	88 ec       	ldi	r24, 0xC8	; 200
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9e a7       	std	Y+46, r25	; 0x2e
    1200:	8d a7       	std	Y+45, r24	; 0x2d
    1202:	8d a5       	ldd	r24, Y+45	; 0x2d
    1204:	9e a5       	ldd	r25, Y+46	; 0x2e
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	f1 f7       	brne	.-4      	; 0x1206 <CLCD_voidInit+0xb4>
    120a:	9e a7       	std	Y+46, r25	; 0x2e
    120c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1210:	98 a9       	ldd	r25, Y+48	; 0x30
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	98 ab       	std	Y+48, r25	; 0x30
    1216:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1218:	8f a5       	ldd	r24, Y+47	; 0x2f
    121a:	98 a9       	ldd	r25, Y+48	; 0x30
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	69 f7       	brne	.-38     	; 0x11fa <CLCD_voidInit+0xa8>
    1220:	14 c0       	rjmp	.+40     	; 0x124a <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1222:	69 a9       	ldd	r22, Y+49	; 0x31
    1224:	7a a9       	ldd	r23, Y+50	; 0x32
    1226:	8b a9       	ldd	r24, Y+51	; 0x33
    1228:	9c a9       	ldd	r25, Y+52	; 0x34
    122a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	98 ab       	std	Y+48, r25	; 0x30
    1234:	8f a7       	std	Y+47, r24	; 0x2f
    1236:	8f a5       	ldd	r24, Y+47	; 0x2f
    1238:	98 a9       	ldd	r25, Y+48	; 0x30
    123a:	9c a7       	std	Y+44, r25	; 0x2c
    123c:	8b a7       	std	Y+43, r24	; 0x2b
    123e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1240:	9c a5       	ldd	r25, Y+44	; 0x2c
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	f1 f7       	brne	.-4      	; 0x1242 <CLCD_voidInit+0xf0>
    1246:	9c a7       	std	Y+44, r25	; 0x2c
    1248:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(40);
CLCD_voidSendCommand(0b00111000);
    124a:	88 e3       	ldi	r24, 0x38	; 56
    124c:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendCommand>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	a0 e8       	ldi	r26, 0x80	; 128
    1256:	bf e3       	ldi	r27, 0x3F	; 63
    1258:	8f a3       	std	Y+39, r24	; 0x27
    125a:	98 a7       	std	Y+40, r25	; 0x28
    125c:	a9 a7       	std	Y+41, r26	; 0x29
    125e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1260:	6f a1       	ldd	r22, Y+39	; 0x27
    1262:	78 a5       	ldd	r23, Y+40	; 0x28
    1264:	89 a5       	ldd	r24, Y+41	; 0x29
    1266:	9a a5       	ldd	r25, Y+42	; 0x2a
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	4a ef       	ldi	r20, 0xFA	; 250
    126e:	54 e4       	ldi	r21, 0x44	; 68
    1270:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	8b a3       	std	Y+35, r24	; 0x23
    127a:	9c a3       	std	Y+36, r25	; 0x24
    127c:	ad a3       	std	Y+37, r26	; 0x25
    127e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1280:	6b a1       	ldd	r22, Y+35	; 0x23
    1282:	7c a1       	ldd	r23, Y+36	; 0x24
    1284:	8d a1       	ldd	r24, Y+37	; 0x25
    1286:	9e a1       	ldd	r25, Y+38	; 0x26
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e8       	ldi	r20, 0x80	; 128
    128e:	5f e3       	ldi	r21, 0x3F	; 63
    1290:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1294:	88 23       	and	r24, r24
    1296:	2c f4       	brge	.+10     	; 0x12a2 <CLCD_voidInit+0x150>
		__ticks = 1;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9a a3       	std	Y+34, r25	; 0x22
    129e:	89 a3       	std	Y+33, r24	; 0x21
    12a0:	3f c0       	rjmp	.+126    	; 0x1320 <CLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    12a2:	6b a1       	ldd	r22, Y+35	; 0x23
    12a4:	7c a1       	ldd	r23, Y+36	; 0x24
    12a6:	8d a1       	ldd	r24, Y+37	; 0x25
    12a8:	9e a1       	ldd	r25, Y+38	; 0x26
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	3f ef       	ldi	r19, 0xFF	; 255
    12ae:	4f e7       	ldi	r20, 0x7F	; 127
    12b0:	57 e4       	ldi	r21, 0x47	; 71
    12b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12b6:	18 16       	cp	r1, r24
    12b8:	4c f5       	brge	.+82     	; 0x130c <CLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ba:	6f a1       	ldd	r22, Y+39	; 0x27
    12bc:	78 a5       	ldd	r23, Y+40	; 0x28
    12be:	89 a5       	ldd	r24, Y+41	; 0x29
    12c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e2       	ldi	r20, 0x20	; 32
    12c8:	51 e4       	ldi	r21, 0x41	; 65
    12ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	bc 01       	movw	r22, r24
    12d4:	cd 01       	movw	r24, r26
    12d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	9a a3       	std	Y+34, r25	; 0x22
    12e0:	89 a3       	std	Y+33, r24	; 0x21
    12e2:	0f c0       	rjmp	.+30     	; 0x1302 <CLCD_voidInit+0x1b0>
    12e4:	88 ec       	ldi	r24, 0xC8	; 200
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	98 a3       	std	Y+32, r25	; 0x20
    12ea:	8f 8f       	std	Y+31, r24	; 0x1f
    12ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12ee:	98 a1       	ldd	r25, Y+32	; 0x20
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <CLCD_voidInit+0x19e>
    12f4:	98 a3       	std	Y+32, r25	; 0x20
    12f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f8:	89 a1       	ldd	r24, Y+33	; 0x21
    12fa:	9a a1       	ldd	r25, Y+34	; 0x22
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	9a a3       	std	Y+34, r25	; 0x22
    1300:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1302:	89 a1       	ldd	r24, Y+33	; 0x21
    1304:	9a a1       	ldd	r25, Y+34	; 0x22
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	69 f7       	brne	.-38     	; 0x12e4 <CLCD_voidInit+0x192>
    130a:	14 c0       	rjmp	.+40     	; 0x1334 <CLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130c:	6b a1       	ldd	r22, Y+35	; 0x23
    130e:	7c a1       	ldd	r23, Y+36	; 0x24
    1310:	8d a1       	ldd	r24, Y+37	; 0x25
    1312:	9e a1       	ldd	r25, Y+38	; 0x26
    1314:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	9a a3       	std	Y+34, r25	; 0x22
    131e:	89 a3       	std	Y+33, r24	; 0x21
    1320:	89 a1       	ldd	r24, Y+33	; 0x21
    1322:	9a a1       	ldd	r25, Y+34	; 0x22
    1324:	9e 8f       	std	Y+30, r25	; 0x1e
    1326:	8d 8f       	std	Y+29, r24	; 0x1d
    1328:	8d 8d       	ldd	r24, Y+29	; 0x1d
    132a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <CLCD_voidInit+0x1da>
    1330:	9e 8f       	std	Y+30, r25	; 0x1e
    1332:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(1);
CLCD_voidSendCommand(0b00001100);
    1334:	8c e0       	ldi	r24, 0x0C	; 12
    1336:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendCommand>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	a0 e8       	ldi	r26, 0x80	; 128
    1340:	bf e3       	ldi	r27, 0x3F	; 63
    1342:	89 8f       	std	Y+25, r24	; 0x19
    1344:	9a 8f       	std	Y+26, r25	; 0x1a
    1346:	ab 8f       	std	Y+27, r26	; 0x1b
    1348:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134a:	69 8d       	ldd	r22, Y+25	; 0x19
    134c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    134e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1350:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	4a ef       	ldi	r20, 0xFA	; 250
    1358:	54 e4       	ldi	r21, 0x44	; 68
    135a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	8d 8b       	std	Y+21, r24	; 0x15
    1364:	9e 8b       	std	Y+22, r25	; 0x16
    1366:	af 8b       	std	Y+23, r26	; 0x17
    1368:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    136a:	6d 89       	ldd	r22, Y+21	; 0x15
    136c:	7e 89       	ldd	r23, Y+22	; 0x16
    136e:	8f 89       	ldd	r24, Y+23	; 0x17
    1370:	98 8d       	ldd	r25, Y+24	; 0x18
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e8       	ldi	r20, 0x80	; 128
    1378:	5f e3       	ldi	r21, 0x3F	; 63
    137a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    137e:	88 23       	and	r24, r24
    1380:	2c f4       	brge	.+10     	; 0x138c <CLCD_voidInit+0x23a>
		__ticks = 1;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9c 8b       	std	Y+20, r25	; 0x14
    1388:	8b 8b       	std	Y+19, r24	; 0x13
    138a:	3f c0       	rjmp	.+126    	; 0x140a <CLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    138c:	6d 89       	ldd	r22, Y+21	; 0x15
    138e:	7e 89       	ldd	r23, Y+22	; 0x16
    1390:	8f 89       	ldd	r24, Y+23	; 0x17
    1392:	98 8d       	ldd	r25, Y+24	; 0x18
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	3f ef       	ldi	r19, 0xFF	; 255
    1398:	4f e7       	ldi	r20, 0x7F	; 127
    139a:	57 e4       	ldi	r21, 0x47	; 71
    139c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13a0:	18 16       	cp	r1, r24
    13a2:	4c f5       	brge	.+82     	; 0x13f6 <CLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a4:	69 8d       	ldd	r22, Y+25	; 0x19
    13a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e2       	ldi	r20, 0x20	; 32
    13b2:	51 e4       	ldi	r21, 0x41	; 65
    13b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	bc 01       	movw	r22, r24
    13be:	cd 01       	movw	r24, r26
    13c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	9c 8b       	std	Y+20, r25	; 0x14
    13ca:	8b 8b       	std	Y+19, r24	; 0x13
    13cc:	0f c0       	rjmp	.+30     	; 0x13ec <CLCD_voidInit+0x29a>
    13ce:	88 ec       	ldi	r24, 0xC8	; 200
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	9a 8b       	std	Y+18, r25	; 0x12
    13d4:	89 8b       	std	Y+17, r24	; 0x11
    13d6:	89 89       	ldd	r24, Y+17	; 0x11
    13d8:	9a 89       	ldd	r25, Y+18	; 0x12
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	f1 f7       	brne	.-4      	; 0x13da <CLCD_voidInit+0x288>
    13de:	9a 8b       	std	Y+18, r25	; 0x12
    13e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e2:	8b 89       	ldd	r24, Y+19	; 0x13
    13e4:	9c 89       	ldd	r25, Y+20	; 0x14
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	9c 8b       	std	Y+20, r25	; 0x14
    13ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ec:	8b 89       	ldd	r24, Y+19	; 0x13
    13ee:	9c 89       	ldd	r25, Y+20	; 0x14
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	69 f7       	brne	.-38     	; 0x13ce <CLCD_voidInit+0x27c>
    13f4:	14 c0       	rjmp	.+40     	; 0x141e <CLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f6:	6d 89       	ldd	r22, Y+21	; 0x15
    13f8:	7e 89       	ldd	r23, Y+22	; 0x16
    13fa:	8f 89       	ldd	r24, Y+23	; 0x17
    13fc:	98 8d       	ldd	r25, Y+24	; 0x18
    13fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	9c 8b       	std	Y+20, r25	; 0x14
    1408:	8b 8b       	std	Y+19, r24	; 0x13
    140a:	8b 89       	ldd	r24, Y+19	; 0x13
    140c:	9c 89       	ldd	r25, Y+20	; 0x14
    140e:	98 8b       	std	Y+16, r25	; 0x10
    1410:	8f 87       	std	Y+15, r24	; 0x0f
    1412:	8f 85       	ldd	r24, Y+15	; 0x0f
    1414:	98 89       	ldd	r25, Y+16	; 0x10
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <CLCD_voidInit+0x2c4>
    141a:	98 8b       	std	Y+16, r25	; 0x10
    141c:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(1);
CLCD_voidSendCommand(0b00000001);
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendCommand>
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 e0       	ldi	r26, 0x00	; 0
    142a:	b0 e4       	ldi	r27, 0x40	; 64
    142c:	8b 87       	std	Y+11, r24	; 0x0b
    142e:	9c 87       	std	Y+12, r25	; 0x0c
    1430:	ad 87       	std	Y+13, r26	; 0x0d
    1432:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1434:	6b 85       	ldd	r22, Y+11	; 0x0b
    1436:	7c 85       	ldd	r23, Y+12	; 0x0c
    1438:	8d 85       	ldd	r24, Y+13	; 0x0d
    143a:	9e 85       	ldd	r25, Y+14	; 0x0e
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	4a ef       	ldi	r20, 0xFA	; 250
    1442:	54 e4       	ldi	r21, 0x44	; 68
    1444:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	8f 83       	std	Y+7, r24	; 0x07
    144e:	98 87       	std	Y+8, r25	; 0x08
    1450:	a9 87       	std	Y+9, r26	; 0x09
    1452:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1454:	6f 81       	ldd	r22, Y+7	; 0x07
    1456:	78 85       	ldd	r23, Y+8	; 0x08
    1458:	89 85       	ldd	r24, Y+9	; 0x09
    145a:	9a 85       	ldd	r25, Y+10	; 0x0a
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1468:	88 23       	and	r24, r24
    146a:	2c f4       	brge	.+10     	; 0x1476 <CLCD_voidInit+0x324>
		__ticks = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
    1474:	3f c0       	rjmp	.+126    	; 0x14f4 <CLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    1476:	6f 81       	ldd	r22, Y+7	; 0x07
    1478:	78 85       	ldd	r23, Y+8	; 0x08
    147a:	89 85       	ldd	r24, Y+9	; 0x09
    147c:	9a 85       	ldd	r25, Y+10	; 0x0a
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	3f ef       	ldi	r19, 0xFF	; 255
    1482:	4f e7       	ldi	r20, 0x7F	; 127
    1484:	57 e4       	ldi	r21, 0x47	; 71
    1486:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    148a:	18 16       	cp	r1, r24
    148c:	4c f5       	brge	.+82     	; 0x14e0 <CLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1490:	7c 85       	ldd	r23, Y+12	; 0x0c
    1492:	8d 85       	ldd	r24, Y+13	; 0x0d
    1494:	9e 85       	ldd	r25, Y+14	; 0x0e
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <CLCD_voidInit+0x384>
    14b8:	88 ec       	ldi	r24, 0xC8	; 200
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9c 83       	std	Y+4, r25	; 0x04
    14be:	8b 83       	std	Y+3, r24	; 0x03
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <CLCD_voidInit+0x372>
    14c8:	9c 83       	std	Y+4, r25	; 0x04
    14ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	9e 81       	ldd	r25, Y+6	; 0x06
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <CLCD_voidInit+0x366>
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <CLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e0:	6f 81       	ldd	r22, Y+7	; 0x07
    14e2:	78 85       	ldd	r23, Y+8	; 0x08
    14e4:	89 85       	ldd	r24, Y+9	; 0x09
    14e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <CLCD_voidInit+0x3ae>
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);


}
    1508:	e8 96       	adiw	r28, 0x38	; 56
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <CLCD_voidSendString>:

void CLCD_voidSendString(char *Copy_pcString){
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	00 d0       	rcall	.+0      	; 0x1520 <CLCD_voidSendString+0x6>
    1520:	0f 92       	push	r0
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	9b 83       	std	Y+3, r25	; 0x03
    1528:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i=0;Copy_pcString[i]!='\0';i++)
    152a:	19 82       	std	Y+1, r1	; 0x01
    152c:	0e c0       	rjmp	.+28     	; 0x154a <CLCD_voidSendString+0x30>
	{
		CLCD_voidSendData(Copy_pcString[i]);
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	9b 81       	ldd	r25, Y+3	; 0x03
    1538:	fc 01       	movw	r30, r24
    153a:	e2 0f       	add	r30, r18
    153c:	f3 1f       	adc	r31, r19
    153e:	80 81       	ld	r24, Z
    1540:	0e 94 0b 08 	call	0x1016	; 0x1016 <CLCD_voidSendData>


}

void CLCD_voidSendString(char *Copy_pcString){
	for (u8 i=0;Copy_pcString[i]!='\0';i++)
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	8f 5f       	subi	r24, 0xFF	; 255
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	9b 81       	ldd	r25, Y+3	; 0x03
    1554:	fc 01       	movw	r30, r24
    1556:	e2 0f       	add	r30, r18
    1558:	f3 1f       	adc	r31, r19
    155a:	80 81       	ld	r24, Z
    155c:	88 23       	and	r24, r24
    155e:	39 f7       	brne	.-50     	; 0x152e <CLCD_voidSendString+0x14>
	 * while (Copy_pcString[Local_u8Iterator]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Iterator]);
		Local_u8Iterator++;
	}*/
}
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <CLCD_voidSendNum>:



void CLCD_voidSendNum(u32 num)
{
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	60 97       	sbiw	r28, 0x10	; 16
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	6d 87       	std	Y+13, r22	; 0x0d
    1586:	7e 87       	std	Y+14, r23	; 0x0e
    1588:	8f 87       	std	Y+15, r24	; 0x0f
    158a:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8arr[10];
	u8 i=0;
    158c:	1a 82       	std	Y+2, r1	; 0x02
	u8 j=0;
    158e:	19 82       	std	Y+1, r1	; 0x01
	if (num==0)
    1590:	8d 85       	ldd	r24, Y+13	; 0x0d
    1592:	9e 85       	ldd	r25, Y+14	; 0x0e
    1594:	af 85       	ldd	r26, Y+15	; 0x0f
    1596:	b8 89       	ldd	r27, Y+16	; 0x10
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	a1 05       	cpc	r26, r1
    159c:	b1 05       	cpc	r27, r1
    159e:	91 f5       	brne	.+100    	; 0x1604 <CLCD_voidSendNum+0x98>
	{
		CLCD_voidSendData('0');    //send the asci of zero
    15a0:	80 e3       	ldi	r24, 0x30	; 48
    15a2:	0e 94 0b 08 	call	0x1016	; 0x1016 <CLCD_voidSendData>
    15a6:	4d c0       	rjmp	.+154    	; 0x1642 <CLCD_voidSendNum+0xd6>
	}
	else
	{
		while (num)
		{
			Local_u8arr[i]= num%10 +'0';
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	08 2f       	mov	r16, r24
    15ac:	10 e0       	ldi	r17, 0x00	; 0
    15ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b2:	af 85       	ldd	r26, Y+15	; 0x0f
    15b4:	b8 89       	ldd	r27, Y+16	; 0x10
    15b6:	2a e0       	ldi	r18, 0x0A	; 10
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	bc 01       	movw	r22, r24
    15c0:	cd 01       	movw	r24, r26
    15c2:	0e 94 8a 20 	call	0x4114	; 0x4114 <__udivmodsi4>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	28 2f       	mov	r18, r24
    15cc:	20 5d       	subi	r18, 0xD0	; 208
    15ce:	ce 01       	movw	r24, r28
    15d0:	03 96       	adiw	r24, 0x03	; 3
    15d2:	fc 01       	movw	r30, r24
    15d4:	e0 0f       	add	r30, r16
    15d6:	f1 1f       	adc	r31, r17
    15d8:	20 83       	st	Z, r18
			num/=10;
    15da:	8d 85       	ldd	r24, Y+13	; 0x0d
    15dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15de:	af 85       	ldd	r26, Y+15	; 0x0f
    15e0:	b8 89       	ldd	r27, Y+16	; 0x10
    15e2:	2a e0       	ldi	r18, 0x0A	; 10
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	bc 01       	movw	r22, r24
    15ec:	cd 01       	movw	r24, r26
    15ee:	0e 94 8a 20 	call	0x4114	; 0x4114 <__udivmodsi4>
    15f2:	da 01       	movw	r26, r20
    15f4:	c9 01       	movw	r24, r18
    15f6:	8d 87       	std	Y+13, r24	; 0x0d
    15f8:	9e 87       	std	Y+14, r25	; 0x0e
    15fa:	af 87       	std	Y+15, r26	; 0x0f
    15fc:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	8f 5f       	subi	r24, 0xFF	; 255
    1602:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('0');    //send the asci of zero
	}
	else
	{
		while (num)
    1604:	8d 85       	ldd	r24, Y+13	; 0x0d
    1606:	9e 85       	ldd	r25, Y+14	; 0x0e
    1608:	af 85       	ldd	r26, Y+15	; 0x0f
    160a:	b8 89       	ldd	r27, Y+16	; 0x10
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	a1 05       	cpc	r26, r1
    1610:	b1 05       	cpc	r27, r1
    1612:	51 f6       	brne	.-108    	; 0x15a8 <CLCD_voidSendNum+0x3c>
		{
			Local_u8arr[i]= num%10 +'0';
			num/=10;
			i++;
		}
		for (j=i;j>0;j--)
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	11 c0       	rjmp	.+34     	; 0x163c <CLCD_voidSendNum+0xd0>
		{
			CLCD_voidSendData(Local_u8arr[j-1]);
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9c 01       	movw	r18, r24
    1622:	21 50       	subi	r18, 0x01	; 1
    1624:	30 40       	sbci	r19, 0x00	; 0
    1626:	ce 01       	movw	r24, r28
    1628:	03 96       	adiw	r24, 0x03	; 3
    162a:	fc 01       	movw	r30, r24
    162c:	e2 0f       	add	r30, r18
    162e:	f3 1f       	adc	r31, r19
    1630:	80 81       	ld	r24, Z
    1632:	0e 94 0b 08 	call	0x1016	; 0x1016 <CLCD_voidSendData>
		{
			Local_u8arr[i]= num%10 +'0';
			num/=10;
			i++;
		}
		for (j=i;j>0;j--)
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	81 50       	subi	r24, 0x01	; 1
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	88 23       	and	r24, r24
    1640:	61 f7       	brne	.-40     	; 0x161a <CLCD_voidSendNum+0xae>
		{
			CLCD_voidSendData(Local_u8arr[j-1]);

		}
	}
}
    1642:	60 96       	adiw	r28, 0x10	; 16
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	08 95       	ret

00001658 <CLCD_voidSetPosition>:


void CLCD_voidSetPosition(u8 Copy_u8X,u8 Copy_u8Y){
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	00 d0       	rcall	.+0      	; 0x165e <CLCD_voidSetPosition+0x6>
    165e:	0f 92       	push	r0
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	8a 83       	std	Y+2, r24	; 0x02
    1666:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_position=0;
    1668:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8X==0){
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	88 23       	and	r24, r24
    166e:	19 f4       	brne	.+6      	; 0x1676 <CLCD_voidSetPosition+0x1e>
		Local_u8_position= Copy_u8Y;
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	06 c0       	rjmp	.+12     	; 0x1682 <CLCD_voidSetPosition+0x2a>

	}
	else if (Copy_u8X==1){
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	19 f4       	brne	.+6      	; 0x1682 <CLCD_voidSetPosition+0x2a>
		Local_u8_position= Copy_u8Y+0x40;
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	80 5c       	subi	r24, 0xC0	; 192
    1680:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(Local_u8_position+128);
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	80 58       	subi	r24, 0x80	; 128
    1686:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendCommand>
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <CLCD_voidDrawSpecialChar>:

void CLCD_voidDrawSpecialChar(u8 *Copy_Pu8Pattern, u8 Copy_u8Loc,u8 Copy_u8x,u8 Copy_u8y)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	27 97       	sbiw	r28, 0x07	; 7
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	9c 83       	std	Y+4, r25	; 0x04
    16ac:	8b 83       	std	Y+3, r24	; 0x03
    16ae:	6d 83       	std	Y+5, r22	; 0x05
    16b0:	4e 83       	std	Y+6, r20	; 0x06
    16b2:	2f 83       	std	Y+7, r18	; 0x07
	//the special character will be array of 8 components, 5 bits each ( in other words, 8 bits each but the grid can afford only 5 )
	u8 Local_u8Iterator=0;
    16b4:	1a 82       	std	Y+2, r1	; 0x02
	//in which grid we will display your special character
	u8 Local_u8Cgram_Add= Copy_u8Loc * 8;
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	88 2f       	mov	r24, r24
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8Cgram_Add+64);  //from data sheet, the sixth bit must be 1, so we add 64 -> (100000)
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	80 5c       	subi	r24, 0xC0	; 192
    16ce:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendCommand>
    16d2:	0e c0       	rjmp	.+28     	; 0x16f0 <CLCD_voidDrawSpecialChar+0x5a>

	for (;Local_u8Iterator<8;Local_u8Iterator++)
	{
		CLCD_voidSendData(Copy_Pu8Pattern[Local_u8Iterator]);
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	fc 01       	movw	r30, r24
    16e0:	e2 0f       	add	r30, r18
    16e2:	f3 1f       	adc	r31, r19
    16e4:	80 81       	ld	r24, Z
    16e6:	0e 94 0b 08 	call	0x1016	; 0x1016 <CLCD_voidSendData>
	u8 Local_u8Iterator=0;
	//in which grid we will display your special character
	u8 Local_u8Cgram_Add= Copy_u8Loc * 8;
	CLCD_voidSendCommand(Local_u8Cgram_Add+64);  //from data sheet, the sixth bit must be 1, so we add 64 -> (100000)

	for (;Local_u8Iterator<8;Local_u8Iterator++)
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	8f 5f       	subi	r24, 0xFF	; 255
    16ee:	8a 83       	std	Y+2, r24	; 0x02
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	88 30       	cpi	r24, 0x08	; 8
    16f4:	78 f3       	brcs	.-34     	; 0x16d4 <CLCD_voidDrawSpecialChar+0x3e>
	{
		CLCD_voidSendData(Copy_Pu8Pattern[Local_u8Iterator]);
	}
	CLCD_voidSetPosition(Copy_u8x,Copy_u8y);
    16f6:	8e 81       	ldd	r24, Y+6	; 0x06
    16f8:	6f 81       	ldd	r22, Y+7	; 0x07
    16fa:	0e 94 2c 0b 	call	0x1658	; 0x1658 <CLCD_voidSetPosition>

}
    16fe:	27 96       	adiw	r28, 0x07	; 7
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <DIO_voidSetPortDir>:
#include "DIO_config.h"
#include "DIO_interface.h"



void DIO_voidSetPortDir(u8 Copy_u8Port,u8 Copy_u8Dir){
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	00 d0       	rcall	.+0      	; 0x1716 <DIO_voidSetPortDir+0x6>
    1716:	00 d0       	rcall	.+0      	; 0x1718 <DIO_voidSetPortDir+0x8>
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	3c 83       	std	Y+4, r19	; 0x04
    1728:	2b 83       	std	Y+3, r18	; 0x03
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	82 30       	cpi	r24, 0x02	; 2
    1730:	91 05       	cpc	r25, r1
    1732:	d9 f0       	breq	.+54     	; 0x176a <DIO_voidSetPortDir+0x5a>
    1734:	2b 81       	ldd	r18, Y+3	; 0x03
    1736:	3c 81       	ldd	r19, Y+4	; 0x04
    1738:	23 30       	cpi	r18, 0x03	; 3
    173a:	31 05       	cpc	r19, r1
    173c:	34 f4       	brge	.+12     	; 0x174a <DIO_voidSetPortDir+0x3a>
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	81 30       	cpi	r24, 0x01	; 1
    1744:	91 05       	cpc	r25, r1
    1746:	61 f0       	breq	.+24     	; 0x1760 <DIO_voidSetPortDir+0x50>
    1748:	1e c0       	rjmp	.+60     	; 0x1786 <DIO_voidSetPortDir+0x76>
    174a:	2b 81       	ldd	r18, Y+3	; 0x03
    174c:	3c 81       	ldd	r19, Y+4	; 0x04
    174e:	23 30       	cpi	r18, 0x03	; 3
    1750:	31 05       	cpc	r19, r1
    1752:	81 f0       	breq	.+32     	; 0x1774 <DIO_voidSetPortDir+0x64>
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	84 30       	cpi	r24, 0x04	; 4
    175a:	91 05       	cpc	r25, r1
    175c:	81 f0       	breq	.+32     	; 0x177e <DIO_voidSetPortDir+0x6e>
    175e:	13 c0       	rjmp	.+38     	; 0x1786 <DIO_voidSetPortDir+0x76>
	case PORTA_REG :DDRA = Copy_u8Dir;break;
    1760:	ea e3       	ldi	r30, 0x3A	; 58
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	80 83       	st	Z, r24
    1768:	0e c0       	rjmp	.+28     	; 0x1786 <DIO_voidSetPortDir+0x76>
	case PORTB_REG :DDRB = Copy_u8Dir;break;
    176a:	e7 e3       	ldi	r30, 0x37	; 55
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	80 83       	st	Z, r24
    1772:	09 c0       	rjmp	.+18     	; 0x1786 <DIO_voidSetPortDir+0x76>
	case PORTC_REG :DDRC = Copy_u8Dir;break;
    1774:	e4 e3       	ldi	r30, 0x34	; 52
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	80 83       	st	Z, r24
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <DIO_voidSetPortDir+0x76>
	case PORTD_REG :DDRD = Copy_u8Dir;break;
    177e:	e1 e3       	ldi	r30, 0x31	; 49
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	80 83       	st	Z, r24
	}
}
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <DIO_voidSetPinDir>:

void DIO_voidSetPinDir(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Dir){
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	27 97       	sbiw	r28, 0x07	; 7
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	6a 83       	std	Y+2, r22	; 0x02
    17ac:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin<=7){
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	88 30       	cpi	r24, 0x08	; 8
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <DIO_voidSetPinDir+0x22>
    17b4:	ec c0       	rjmp	.+472    	; 0x198e <DIO_voidSetPinDir+0x1fa>
		if(Copy_u8Dir==PIN_DIR_OUT){
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	09 f0       	breq	.+2      	; 0x17be <DIO_voidSetPinDir+0x2a>
    17bc:	70 c0       	rjmp	.+224    	; 0x189e <DIO_voidSetPinDir+0x10a>
			switch(Copy_u8Port){
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	3f 83       	std	Y+7, r19	; 0x07
    17c6:	2e 83       	std	Y+6, r18	; 0x06
    17c8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ca:	9f 81       	ldd	r25, Y+7	; 0x07
    17cc:	82 30       	cpi	r24, 0x02	; 2
    17ce:	91 05       	cpc	r25, r1
    17d0:	51 f1       	breq	.+84     	; 0x1826 <DIO_voidSetPinDir+0x92>
    17d2:	2e 81       	ldd	r18, Y+6	; 0x06
    17d4:	3f 81       	ldd	r19, Y+7	; 0x07
    17d6:	23 30       	cpi	r18, 0x03	; 3
    17d8:	31 05       	cpc	r19, r1
    17da:	34 f4       	brge	.+12     	; 0x17e8 <DIO_voidSetPinDir+0x54>
    17dc:	8e 81       	ldd	r24, Y+6	; 0x06
    17de:	9f 81       	ldd	r25, Y+7	; 0x07
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	91 05       	cpc	r25, r1
    17e4:	61 f0       	breq	.+24     	; 0x17fe <DIO_voidSetPinDir+0x6a>
    17e6:	d3 c0       	rjmp	.+422    	; 0x198e <DIO_voidSetPinDir+0x1fa>
    17e8:	2e 81       	ldd	r18, Y+6	; 0x06
    17ea:	3f 81       	ldd	r19, Y+7	; 0x07
    17ec:	23 30       	cpi	r18, 0x03	; 3
    17ee:	31 05       	cpc	r19, r1
    17f0:	71 f1       	breq	.+92     	; 0x184e <DIO_voidSetPinDir+0xba>
    17f2:	8e 81       	ldd	r24, Y+6	; 0x06
    17f4:	9f 81       	ldd	r25, Y+7	; 0x07
    17f6:	84 30       	cpi	r24, 0x04	; 4
    17f8:	91 05       	cpc	r25, r1
    17fa:	e9 f1       	breq	.+122    	; 0x1876 <DIO_voidSetPinDir+0xe2>
    17fc:	c8 c0       	rjmp	.+400    	; 0x198e <DIO_voidSetPinDir+0x1fa>
			case PORTA_REG :SET_BIT(DDRA,Copy_u8Pin);break;
    17fe:	aa e3       	ldi	r26, 0x3A	; 58
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	ea e3       	ldi	r30, 0x3A	; 58
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_voidSetPinDir+0x88>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_voidSetPinDir+0x84>
    1820:	84 2b       	or	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	b4 c0       	rjmp	.+360    	; 0x198e <DIO_voidSetPinDir+0x1fa>
			case PORTB_REG :SET_BIT(DDRB,Copy_u8Pin);break;
    1826:	a7 e3       	ldi	r26, 0x37	; 55
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e7 e3       	ldi	r30, 0x37	; 55
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	48 2f       	mov	r20, r24
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	02 2e       	mov	r0, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <DIO_voidSetPinDir+0xb0>
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	0a 94       	dec	r0
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <DIO_voidSetPinDir+0xac>
    1848:	84 2b       	or	r24, r20
    184a:	8c 93       	st	X, r24
    184c:	a0 c0       	rjmp	.+320    	; 0x198e <DIO_voidSetPinDir+0x1fa>
			case PORTC_REG :SET_BIT(DDRC,Copy_u8Pin);break;
    184e:	a4 e3       	ldi	r26, 0x34	; 52
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e4 e3       	ldi	r30, 0x34	; 52
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	48 2f       	mov	r20, r24
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 2e       	mov	r0, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <DIO_voidSetPinDir+0xd8>
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	0a 94       	dec	r0
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <DIO_voidSetPinDir+0xd4>
    1870:	84 2b       	or	r24, r20
    1872:	8c 93       	st	X, r24
    1874:	8c c0       	rjmp	.+280    	; 0x198e <DIO_voidSetPinDir+0x1fa>
			case PORTD_REG :SET_BIT(DDRD,Copy_u8Pin);break;
    1876:	a1 e3       	ldi	r26, 0x31	; 49
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e1 e3       	ldi	r30, 0x31	; 49
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	48 2f       	mov	r20, r24
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	02 2e       	mov	r0, r18
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <DIO_voidSetPinDir+0x100>
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	0a 94       	dec	r0
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <DIO_voidSetPinDir+0xfc>
    1898:	84 2b       	or	r24, r20
    189a:	8c 93       	st	X, r24
    189c:	78 c0       	rjmp	.+240    	; 0x198e <DIO_voidSetPinDir+0x1fa>
			}
		}
		else if(Copy_u8Dir==PIN_DIR_IN){
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	88 23       	and	r24, r24
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <DIO_voidSetPinDir+0x112>
    18a4:	74 c0       	rjmp	.+232    	; 0x198e <DIO_voidSetPinDir+0x1fa>
			switch(Copy_u8Port){
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	3d 83       	std	Y+5, r19	; 0x05
    18ae:	2c 83       	std	Y+4, r18	; 0x04
    18b0:	8c 81       	ldd	r24, Y+4	; 0x04
    18b2:	9d 81       	ldd	r25, Y+5	; 0x05
    18b4:	82 30       	cpi	r24, 0x02	; 2
    18b6:	91 05       	cpc	r25, r1
    18b8:	61 f1       	breq	.+88     	; 0x1912 <DIO_voidSetPinDir+0x17e>
    18ba:	2c 81       	ldd	r18, Y+4	; 0x04
    18bc:	3d 81       	ldd	r19, Y+5	; 0x05
    18be:	23 30       	cpi	r18, 0x03	; 3
    18c0:	31 05       	cpc	r19, r1
    18c2:	34 f4       	brge	.+12     	; 0x18d0 <DIO_voidSetPinDir+0x13c>
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	9d 81       	ldd	r25, Y+5	; 0x05
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	91 05       	cpc	r25, r1
    18cc:	69 f0       	breq	.+26     	; 0x18e8 <DIO_voidSetPinDir+0x154>
    18ce:	5f c0       	rjmp	.+190    	; 0x198e <DIO_voidSetPinDir+0x1fa>
    18d0:	2c 81       	ldd	r18, Y+4	; 0x04
    18d2:	3d 81       	ldd	r19, Y+5	; 0x05
    18d4:	23 30       	cpi	r18, 0x03	; 3
    18d6:	31 05       	cpc	r19, r1
    18d8:	89 f1       	breq	.+98     	; 0x193c <DIO_voidSetPinDir+0x1a8>
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	9d 81       	ldd	r25, Y+5	; 0x05
    18de:	84 30       	cpi	r24, 0x04	; 4
    18e0:	91 05       	cpc	r25, r1
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <DIO_voidSetPinDir+0x152>
    18e4:	40 c0       	rjmp	.+128    	; 0x1966 <DIO_voidSetPinDir+0x1d2>
    18e6:	53 c0       	rjmp	.+166    	; 0x198e <DIO_voidSetPinDir+0x1fa>
			case PORTA_REG :CLR_BIT(DDRA,Copy_u8Pin);break;
    18e8:	aa e3       	ldi	r26, 0x3A	; 58
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	ea e3       	ldi	r30, 0x3A	; 58
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <DIO_voidSetPinDir+0x172>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <DIO_voidSetPinDir+0x16e>
    190a:	80 95       	com	r24
    190c:	84 23       	and	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	3e c0       	rjmp	.+124    	; 0x198e <DIO_voidSetPinDir+0x1fa>
			case PORTB_REG :CLR_BIT(DDRB,Copy_u8Pin);break;
    1912:	a7 e3       	ldi	r26, 0x37	; 55
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e7 e3       	ldi	r30, 0x37	; 55
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_voidSetPinDir+0x19c>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_voidSetPinDir+0x198>
    1934:	80 95       	com	r24
    1936:	84 23       	and	r24, r20
    1938:	8c 93       	st	X, r24
    193a:	29 c0       	rjmp	.+82     	; 0x198e <DIO_voidSetPinDir+0x1fa>
			case PORTC_REG :CLR_BIT(DDRC,Copy_u8Pin);break;
    193c:	a4 e3       	ldi	r26, 0x34	; 52
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e4 e3       	ldi	r30, 0x34	; 52
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	48 2f       	mov	r20, r24
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	02 2e       	mov	r0, r18
    1954:	02 c0       	rjmp	.+4      	; 0x195a <DIO_voidSetPinDir+0x1c6>
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	0a 94       	dec	r0
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <DIO_voidSetPinDir+0x1c2>
    195e:	80 95       	com	r24
    1960:	84 23       	and	r24, r20
    1962:	8c 93       	st	X, r24
    1964:	14 c0       	rjmp	.+40     	; 0x198e <DIO_voidSetPinDir+0x1fa>
			case PORTD_REG :CLR_BIT(DDRD,Copy_u8Pin);break;
    1966:	a1 e3       	ldi	r26, 0x31	; 49
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e1 e3       	ldi	r30, 0x31	; 49
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_voidSetPinDir+0x1f0>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_voidSetPinDir+0x1ec>
    1988:	80 95       	com	r24
    198a:	84 23       	and	r24, r20
    198c:	8c 93       	st	X, r24
			}
		}
	}
}
    198e:	27 96       	adiw	r28, 0x07	; 7
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <DIO_voidSetPortVal>:

void DIO_voidSetPortVal(u8 Copy_u8Port,u8 Copy_u8Val){
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <DIO_voidSetPortVal+0x6>
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <DIO_voidSetPortVal+0x8>
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	3c 83       	std	Y+4, r19	; 0x04
    19b8:	2b 83       	std	Y+3, r18	; 0x03
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	9c 81       	ldd	r25, Y+4	; 0x04
    19be:	82 30       	cpi	r24, 0x02	; 2
    19c0:	91 05       	cpc	r25, r1
    19c2:	d9 f0       	breq	.+54     	; 0x19fa <DIO_voidSetPortVal+0x5a>
    19c4:	2b 81       	ldd	r18, Y+3	; 0x03
    19c6:	3c 81       	ldd	r19, Y+4	; 0x04
    19c8:	23 30       	cpi	r18, 0x03	; 3
    19ca:	31 05       	cpc	r19, r1
    19cc:	34 f4       	brge	.+12     	; 0x19da <DIO_voidSetPortVal+0x3a>
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	9c 81       	ldd	r25, Y+4	; 0x04
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	91 05       	cpc	r25, r1
    19d6:	61 f0       	breq	.+24     	; 0x19f0 <DIO_voidSetPortVal+0x50>
    19d8:	1e c0       	rjmp	.+60     	; 0x1a16 <DIO_voidSetPortVal+0x76>
    19da:	2b 81       	ldd	r18, Y+3	; 0x03
    19dc:	3c 81       	ldd	r19, Y+4	; 0x04
    19de:	23 30       	cpi	r18, 0x03	; 3
    19e0:	31 05       	cpc	r19, r1
    19e2:	81 f0       	breq	.+32     	; 0x1a04 <DIO_voidSetPortVal+0x64>
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	84 30       	cpi	r24, 0x04	; 4
    19ea:	91 05       	cpc	r25, r1
    19ec:	81 f0       	breq	.+32     	; 0x1a0e <DIO_voidSetPortVal+0x6e>
    19ee:	13 c0       	rjmp	.+38     	; 0x1a16 <DIO_voidSetPortVal+0x76>
	case PORTA_REG :PORTA = Copy_u8Val;break;
    19f0:	eb e3       	ldi	r30, 0x3B	; 59
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	80 83       	st	Z, r24
    19f8:	0e c0       	rjmp	.+28     	; 0x1a16 <DIO_voidSetPortVal+0x76>
	case PORTB_REG :PORTB = Copy_u8Val;break;
    19fa:	e8 e3       	ldi	r30, 0x38	; 56
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	80 83       	st	Z, r24
    1a02:	09 c0       	rjmp	.+18     	; 0x1a16 <DIO_voidSetPortVal+0x76>
	case PORTC_REG :PORTC = Copy_u8Val;break;
    1a04:	e5 e3       	ldi	r30, 0x35	; 53
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	80 83       	st	Z, r24
    1a0c:	04 c0       	rjmp	.+8      	; 0x1a16 <DIO_voidSetPortVal+0x76>
	case PORTD_REG :PORTD = Copy_u8Val;break;
    1a0e:	e2 e3       	ldi	r30, 0x32	; 50
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	80 83       	st	Z, r24
	}
}
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <DIO_voidSetPinVal>:

void DIO_voidSetPinVal(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Val){
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	27 97       	sbiw	r28, 0x07	; 7
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	f8 94       	cli
    1a32:	de bf       	out	0x3e, r29	; 62
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	cd bf       	out	0x3d, r28	; 61
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	6a 83       	std	Y+2, r22	; 0x02
    1a3c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin<=7){
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	88 30       	cpi	r24, 0x08	; 8
    1a42:	08 f0       	brcs	.+2      	; 0x1a46 <DIO_voidSetPinVal+0x22>
    1a44:	ec c0       	rjmp	.+472    	; 0x1c1e <DIO_voidSetPinVal+0x1fa>
		if(Copy_u8Val==PIN_VAL_HIGH){
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <DIO_voidSetPinVal+0x2a>
    1a4c:	70 c0       	rjmp	.+224    	; 0x1b2e <DIO_voidSetPinVal+0x10a>
			switch(Copy_u8Port){
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3f 83       	std	Y+7, r19	; 0x07
    1a56:	2e 83       	std	Y+6, r18	; 0x06
    1a58:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a5c:	82 30       	cpi	r24, 0x02	; 2
    1a5e:	91 05       	cpc	r25, r1
    1a60:	51 f1       	breq	.+84     	; 0x1ab6 <DIO_voidSetPinVal+0x92>
    1a62:	2e 81       	ldd	r18, Y+6	; 0x06
    1a64:	3f 81       	ldd	r19, Y+7	; 0x07
    1a66:	23 30       	cpi	r18, 0x03	; 3
    1a68:	31 05       	cpc	r19, r1
    1a6a:	34 f4       	brge	.+12     	; 0x1a78 <DIO_voidSetPinVal+0x54>
    1a6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	91 05       	cpc	r25, r1
    1a74:	61 f0       	breq	.+24     	; 0x1a8e <DIO_voidSetPinVal+0x6a>
    1a76:	d3 c0       	rjmp	.+422    	; 0x1c1e <DIO_voidSetPinVal+0x1fa>
    1a78:	2e 81       	ldd	r18, Y+6	; 0x06
    1a7a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a7c:	23 30       	cpi	r18, 0x03	; 3
    1a7e:	31 05       	cpc	r19, r1
    1a80:	71 f1       	breq	.+92     	; 0x1ade <DIO_voidSetPinVal+0xba>
    1a82:	8e 81       	ldd	r24, Y+6	; 0x06
    1a84:	9f 81       	ldd	r25, Y+7	; 0x07
    1a86:	84 30       	cpi	r24, 0x04	; 4
    1a88:	91 05       	cpc	r25, r1
    1a8a:	e9 f1       	breq	.+122    	; 0x1b06 <DIO_voidSetPinVal+0xe2>
    1a8c:	c8 c0       	rjmp	.+400    	; 0x1c1e <DIO_voidSetPinVal+0x1fa>
			case PORTA_REG :SET_BIT(PORTA,Copy_u8Pin);break;
    1a8e:	ab e3       	ldi	r26, 0x3B	; 59
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	eb e3       	ldi	r30, 0x3B	; 59
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	48 2f       	mov	r20, r24
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	02 2e       	mov	r0, r18
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <DIO_voidSetPinVal+0x88>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	0a 94       	dec	r0
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <DIO_voidSetPinVal+0x84>
    1ab0:	84 2b       	or	r24, r20
    1ab2:	8c 93       	st	X, r24
    1ab4:	b4 c0       	rjmp	.+360    	; 0x1c1e <DIO_voidSetPinVal+0x1fa>
			case PORTB_REG :SET_BIT(PORTB,Copy_u8Pin);break;
    1ab6:	a8 e3       	ldi	r26, 0x38	; 56
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e8 e3       	ldi	r30, 0x38	; 56
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	48 2f       	mov	r20, r24
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 2e       	mov	r0, r18
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <DIO_voidSetPinVal+0xb0>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	0a 94       	dec	r0
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <DIO_voidSetPinVal+0xac>
    1ad8:	84 2b       	or	r24, r20
    1ada:	8c 93       	st	X, r24
    1adc:	a0 c0       	rjmp	.+320    	; 0x1c1e <DIO_voidSetPinVal+0x1fa>
			case PORTC_REG :SET_BIT(PORTC,Copy_u8Pin);break;
    1ade:	a5 e3       	ldi	r26, 0x35	; 53
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e5 e3       	ldi	r30, 0x35	; 53
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 2e       	mov	r0, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <DIO_voidSetPinVal+0xd8>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <DIO_voidSetPinVal+0xd4>
    1b00:	84 2b       	or	r24, r20
    1b02:	8c 93       	st	X, r24
    1b04:	8c c0       	rjmp	.+280    	; 0x1c1e <DIO_voidSetPinVal+0x1fa>
			case PORTD_REG :SET_BIT(PORTD,Copy_u8Pin);break;
    1b06:	a2 e3       	ldi	r26, 0x32	; 50
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e2 e3       	ldi	r30, 0x32	; 50
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_voidSetPinVal+0x100>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <DIO_voidSetPinVal+0xfc>
    1b28:	84 2b       	or	r24, r20
    1b2a:	8c 93       	st	X, r24
    1b2c:	78 c0       	rjmp	.+240    	; 0x1c1e <DIO_voidSetPinVal+0x1fa>
			}
		}
		else if(Copy_u8Val==PIN_VAL_LOW){
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	88 23       	and	r24, r24
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <DIO_voidSetPinVal+0x112>
    1b34:	74 c0       	rjmp	.+232    	; 0x1c1e <DIO_voidSetPinVal+0x1fa>
			switch(Copy_u8Port){
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	3d 83       	std	Y+5, r19	; 0x05
    1b3e:	2c 83       	std	Y+4, r18	; 0x04
    1b40:	8c 81       	ldd	r24, Y+4	; 0x04
    1b42:	9d 81       	ldd	r25, Y+5	; 0x05
    1b44:	82 30       	cpi	r24, 0x02	; 2
    1b46:	91 05       	cpc	r25, r1
    1b48:	61 f1       	breq	.+88     	; 0x1ba2 <DIO_voidSetPinVal+0x17e>
    1b4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4e:	23 30       	cpi	r18, 0x03	; 3
    1b50:	31 05       	cpc	r19, r1
    1b52:	34 f4       	brge	.+12     	; 0x1b60 <DIO_voidSetPinVal+0x13c>
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	9d 81       	ldd	r25, Y+5	; 0x05
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	69 f0       	breq	.+26     	; 0x1b78 <DIO_voidSetPinVal+0x154>
    1b5e:	5f c0       	rjmp	.+190    	; 0x1c1e <DIO_voidSetPinVal+0x1fa>
    1b60:	2c 81       	ldd	r18, Y+4	; 0x04
    1b62:	3d 81       	ldd	r19, Y+5	; 0x05
    1b64:	23 30       	cpi	r18, 0x03	; 3
    1b66:	31 05       	cpc	r19, r1
    1b68:	89 f1       	breq	.+98     	; 0x1bcc <DIO_voidSetPinVal+0x1a8>
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6e:	84 30       	cpi	r24, 0x04	; 4
    1b70:	91 05       	cpc	r25, r1
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <DIO_voidSetPinVal+0x152>
    1b74:	40 c0       	rjmp	.+128    	; 0x1bf6 <DIO_voidSetPinVal+0x1d2>
    1b76:	53 c0       	rjmp	.+166    	; 0x1c1e <DIO_voidSetPinVal+0x1fa>
			case PORTA_REG :CLR_BIT(PORTA,Copy_u8Pin);break;
    1b78:	ab e3       	ldi	r26, 0x3B	; 59
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	eb e3       	ldi	r30, 0x3B	; 59
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <DIO_voidSetPinVal+0x172>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <DIO_voidSetPinVal+0x16e>
    1b9a:	80 95       	com	r24
    1b9c:	84 23       	and	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	3e c0       	rjmp	.+124    	; 0x1c1e <DIO_voidSetPinVal+0x1fa>
			case PORTB_REG :CLR_BIT(PORTB,Copy_u8Pin);break;
    1ba2:	a8 e3       	ldi	r26, 0x38	; 56
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e8 e3       	ldi	r30, 0x38	; 56
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <DIO_voidSetPinVal+0x19c>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <DIO_voidSetPinVal+0x198>
    1bc4:	80 95       	com	r24
    1bc6:	84 23       	and	r24, r20
    1bc8:	8c 93       	st	X, r24
    1bca:	29 c0       	rjmp	.+82     	; 0x1c1e <DIO_voidSetPinVal+0x1fa>
			case PORTC_REG :CLR_BIT(PORTC,Copy_u8Pin);break;
    1bcc:	a5 e3       	ldi	r26, 0x35	; 53
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e5 e3       	ldi	r30, 0x35	; 53
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	48 2f       	mov	r20, r24
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 2e       	mov	r0, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <DIO_voidSetPinVal+0x1c6>
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	0a 94       	dec	r0
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <DIO_voidSetPinVal+0x1c2>
    1bee:	80 95       	com	r24
    1bf0:	84 23       	and	r24, r20
    1bf2:	8c 93       	st	X, r24
    1bf4:	14 c0       	rjmp	.+40     	; 0x1c1e <DIO_voidSetPinVal+0x1fa>
			case PORTD_REG :CLR_BIT(PORTD,Copy_u8Pin);break;
    1bf6:	a2 e3       	ldi	r26, 0x32	; 50
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e2 e3       	ldi	r30, 0x32	; 50
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	48 2f       	mov	r20, r24
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	02 2e       	mov	r0, r18
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <DIO_voidSetPinVal+0x1f0>
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	0a 94       	dec	r0
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <DIO_voidSetPinVal+0x1ec>
    1c18:	80 95       	com	r24
    1c1a:	84 23       	and	r24, r20
    1c1c:	8c 93       	st	X, r24
			}
		}
	}
}
    1c1e:	27 96       	adiw	r28, 0x07	; 7
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	f8 94       	cli
    1c24:	de bf       	out	0x3e, r29	; 62
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	cd bf       	out	0x3d, r28	; 61
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal(u8 Copy_u8Port,u8 Copy_u8Pin){
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <DIO_u8GetPinVal+0x6>
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <DIO_u8GetPinVal+0x8>
    1c38:	0f 92       	push	r0
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	8a 83       	std	Y+2, r24	; 0x02
    1c40:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Reading=0;
    1c42:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <=7){
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	88 30       	cpi	r24, 0x08	; 8
    1c48:	08 f0       	brcs	.+2      	; 0x1c4c <DIO_u8GetPinVal+0x1c>
    1c4a:	67 c0       	rjmp	.+206    	; 0x1d1a <DIO_u8GetPinVal+0xea>
		switch(Copy_u8Port){
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	3d 83       	std	Y+5, r19	; 0x05
    1c54:	2c 83       	std	Y+4, r18	; 0x04
    1c56:	4c 81       	ldd	r20, Y+4	; 0x04
    1c58:	5d 81       	ldd	r21, Y+5	; 0x05
    1c5a:	42 30       	cpi	r20, 0x02	; 2
    1c5c:	51 05       	cpc	r21, r1
    1c5e:	41 f1       	breq	.+80     	; 0x1cb0 <DIO_u8GetPinVal+0x80>
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	9d 81       	ldd	r25, Y+5	; 0x05
    1c64:	83 30       	cpi	r24, 0x03	; 3
    1c66:	91 05       	cpc	r25, r1
    1c68:	34 f4       	brge	.+12     	; 0x1c76 <DIO_u8GetPinVal+0x46>
    1c6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c6e:	21 30       	cpi	r18, 0x01	; 1
    1c70:	31 05       	cpc	r19, r1
    1c72:	61 f0       	breq	.+24     	; 0x1c8c <DIO_u8GetPinVal+0x5c>
    1c74:	52 c0       	rjmp	.+164    	; 0x1d1a <DIO_u8GetPinVal+0xea>
    1c76:	4c 81       	ldd	r20, Y+4	; 0x04
    1c78:	5d 81       	ldd	r21, Y+5	; 0x05
    1c7a:	43 30       	cpi	r20, 0x03	; 3
    1c7c:	51 05       	cpc	r21, r1
    1c7e:	51 f1       	breq	.+84     	; 0x1cd4 <DIO_u8GetPinVal+0xa4>
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	9d 81       	ldd	r25, Y+5	; 0x05
    1c84:	84 30       	cpi	r24, 0x04	; 4
    1c86:	91 05       	cpc	r25, r1
    1c88:	b9 f1       	breq	.+110    	; 0x1cf8 <DIO_u8GetPinVal+0xc8>
    1c8a:	47 c0       	rjmp	.+142    	; 0x1d1a <DIO_u8GetPinVal+0xea>
		case PORTA_REG :Local_u8Reading = GET_BIT(PINA,Copy_u8Pin);break;
    1c8c:	e9 e3       	ldi	r30, 0x39	; 57
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	a9 01       	movw	r20, r18
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <DIO_u8GetPinVal+0x74>
    1ca0:	55 95       	asr	r21
    1ca2:	47 95       	ror	r20
    1ca4:	8a 95       	dec	r24
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <DIO_u8GetPinVal+0x70>
    1ca8:	ca 01       	movw	r24, r20
    1caa:	81 70       	andi	r24, 0x01	; 1
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	35 c0       	rjmp	.+106    	; 0x1d1a <DIO_u8GetPinVal+0xea>
		case PORTB_REG :Local_u8Reading = GET_BIT(PINB,Copy_u8Pin);break;
    1cb0:	e6 e3       	ldi	r30, 0x36	; 54
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a9 01       	movw	r20, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <DIO_u8GetPinVal+0x98>
    1cc4:	55 95       	asr	r21
    1cc6:	47 95       	ror	r20
    1cc8:	8a 95       	dec	r24
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <DIO_u8GetPinVal+0x94>
    1ccc:	ca 01       	movw	r24, r20
    1cce:	81 70       	andi	r24, 0x01	; 1
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	23 c0       	rjmp	.+70     	; 0x1d1a <DIO_u8GetPinVal+0xea>
		case PORTC_REG :Local_u8Reading = GET_BIT(PINC,Copy_u8Pin);break;
    1cd4:	e3 e3       	ldi	r30, 0x33	; 51
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	88 2f       	mov	r24, r24
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a9 01       	movw	r20, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <DIO_u8GetPinVal+0xbc>
    1ce8:	55 95       	asr	r21
    1cea:	47 95       	ror	r20
    1cec:	8a 95       	dec	r24
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <DIO_u8GetPinVal+0xb8>
    1cf0:	ca 01       	movw	r24, r20
    1cf2:	81 70       	andi	r24, 0x01	; 1
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	11 c0       	rjmp	.+34     	; 0x1d1a <DIO_u8GetPinVal+0xea>
		case PORTD_REG :Local_u8Reading = GET_BIT(PIND,Copy_u8Pin);break;
    1cf8:	e0 e3       	ldi	r30, 0x30	; 48
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	88 2f       	mov	r24, r24
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a9 01       	movw	r20, r18
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <DIO_u8GetPinVal+0xe0>
    1d0c:	55 95       	asr	r21
    1d0e:	47 95       	ror	r20
    1d10:	8a 95       	dec	r24
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <DIO_u8GetPinVal+0xdc>
    1d14:	ca 01       	movw	r24, r20
    1d16:	81 70       	andi	r24, 0x01	; 1
    1d18:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8Reading;
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <KPD_u8GetPressedKey>:
#include "KEYBAD_private.h"
#include "KEYBAD_config.h"
#include "KEYBAD_interface.h"


 u8 KPD_u8GetPressedKey(void){
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	a7 97       	sbiw	r28, 0x27	; 39
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
	 u8 Local_u8Col, Local_u8Row, Local_u8Reading, Local_u8Key;

	 u8 KPD_u8Values[MAX_ROW][MAX_COL]=KPD_VALUES;
    1d40:	ce 01       	movw	r24, r28
    1d42:	43 96       	adiw	r24, 0x13	; 19
    1d44:	9c a3       	std	Y+36, r25	; 0x24
    1d46:	8b a3       	std	Y+35, r24	; 0x23
    1d48:	e0 e8       	ldi	r30, 0x80	; 128
    1d4a:	f1 e0       	ldi	r31, 0x01	; 1
    1d4c:	fe a3       	std	Y+38, r31	; 0x26
    1d4e:	ed a3       	std	Y+37, r30	; 0x25
    1d50:	f0 e1       	ldi	r31, 0x10	; 16
    1d52:	ff a3       	std	Y+39, r31	; 0x27
    1d54:	ed a1       	ldd	r30, Y+37	; 0x25
    1d56:	fe a1       	ldd	r31, Y+38	; 0x26
    1d58:	00 80       	ld	r0, Z
    1d5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d5e:	01 96       	adiw	r24, 0x01	; 1
    1d60:	9e a3       	std	Y+38, r25	; 0x26
    1d62:	8d a3       	std	Y+37, r24	; 0x25
    1d64:	eb a1       	ldd	r30, Y+35	; 0x23
    1d66:	fc a1       	ldd	r31, Y+36	; 0x24
    1d68:	00 82       	st	Z, r0
    1d6a:	8b a1       	ldd	r24, Y+35	; 0x23
    1d6c:	9c a1       	ldd	r25, Y+36	; 0x24
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	9c a3       	std	Y+36, r25	; 0x24
    1d72:	8b a3       	std	Y+35, r24	; 0x23
    1d74:	9f a1       	ldd	r25, Y+39	; 0x27
    1d76:	91 50       	subi	r25, 0x01	; 1
    1d78:	9f a3       	std	Y+39, r25	; 0x27
    1d7a:	ef a1       	ldd	r30, Y+39	; 0x27
    1d7c:	ee 23       	and	r30, r30
    1d7e:	51 f7       	brne	.-44     	; 0x1d54 <KPD_u8GetPressedKey+0x28>
	 for(Local_u8Col=COL_INIT;Local_u8Col<COL_FIN;Local_u8Col++)
    1d80:	1a 8a       	std	Y+18, r1	; 0x12
    1d82:	b1 c0       	rjmp	.+354    	; 0x1ee6 <KPD_u8GetPressedKey+0x1ba>
	 {
		 DIO_voidSetPinVal(KPD_PORT,Local_u8Col,PIN_VAL_LOW);
    1d84:	83 e0       	ldi	r24, 0x03	; 3
    1d86:	6a 89       	ldd	r22, Y+18	; 0x12
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_voidSetPinVal>

		 for(Local_u8Row=ROW_INIT;Local_u8Row<ROW_FIN;Local_u8Row++)
    1d8e:	19 8a       	std	Y+17, r1	; 0x11
    1d90:	9e c0       	rjmp	.+316    	; 0x1ece <KPD_u8GetPressedKey+0x1a2>
		 {
			 Local_u8Reading = DIO_u8GetPinVal(KPD_PORT,Local_u8Row+4);
    1d92:	89 89       	ldd	r24, Y+17	; 0x11
    1d94:	98 2f       	mov	r25, r24
    1d96:	9c 5f       	subi	r25, 0xFC	; 252
    1d98:	83 e0       	ldi	r24, 0x03	; 3
    1d9a:	69 2f       	mov	r22, r25
    1d9c:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <DIO_u8GetPinVal>
    1da0:	88 8b       	std	Y+16, r24	; 0x10

			 if(Local_u8Reading==PIN_VAL_LOW)
    1da2:	88 89       	ldd	r24, Y+16	; 0x10
    1da4:	88 23       	and	r24, r24
    1da6:	09 f0       	breq	.+2      	; 0x1daa <KPD_u8GetPressedKey+0x7e>
    1da8:	8f c0       	rjmp	.+286    	; 0x1ec8 <KPD_u8GetPressedKey+0x19c>
			 {
				 Local_u8Key = KPD_u8Values[Local_u8Row][Local_u8Col];
    1daa:	89 89       	ldd	r24, Y+17	; 0x11
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	8a 89       	ldd	r24, Y+18	; 0x12
    1db2:	48 2f       	mov	r20, r24
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	22 0f       	add	r18, r18
    1db8:	33 1f       	adc	r19, r19
    1dba:	22 0f       	add	r18, r18
    1dbc:	33 1f       	adc	r19, r19
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	01 96       	adiw	r24, 0x01	; 1
    1dc2:	82 0f       	add	r24, r18
    1dc4:	93 1f       	adc	r25, r19
    1dc6:	84 0f       	add	r24, r20
    1dc8:	95 1f       	adc	r25, r21
    1dca:	fc 01       	movw	r30, r24
    1dcc:	72 96       	adiw	r30, 0x12	; 18
    1dce:	80 81       	ld	r24, Z
    1dd0:	8f 87       	std	Y+15, r24	; 0x0f
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e2       	ldi	r26, 0x20	; 32
    1dd8:	b1 e4       	ldi	r27, 0x41	; 65
    1dda:	8b 87       	std	Y+11, r24	; 0x0b
    1ddc:	9c 87       	std	Y+12, r25	; 0x0c
    1dde:	ad 87       	std	Y+13, r26	; 0x0d
    1de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4a ef       	ldi	r20, 0xFA	; 250
    1df0:	54 e4       	ldi	r21, 0x44	; 68
    1df2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	8f 83       	std	Y+7, r24	; 0x07
    1dfc:	98 87       	std	Y+8, r25	; 0x08
    1dfe:	a9 87       	std	Y+9, r26	; 0x09
    1e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	2c f4       	brge	.+10     	; 0x1e24 <KPD_u8GetPressedKey+0xf8>
		__ticks = 1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	3f c0       	rjmp	.+126    	; 0x1ea2 <KPD_u8GetPressedKey+0x176>
	else if (__tmp > 65535)
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	57 e4       	ldi	r21, 0x47	; 71
    1e34:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	4c f5       	brge	.+82     	; 0x1e8e <KPD_u8GetPressedKey+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e2       	ldi	r20, 0x20	; 32
    1e4a:	51 e4       	ldi	r21, 0x41	; 65
    1e4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <KPD_u8GetPressedKey+0x158>
    1e66:	88 ec       	ldi	r24, 0xC8	; 200
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9c 83       	std	Y+4, r25	; 0x04
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <KPD_u8GetPressedKey+0x146>
    1e76:	9c 83       	std	Y+4, r25	; 0x04
    1e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	69 f7       	brne	.-38     	; 0x1e66 <KPD_u8GetPressedKey+0x13a>
    1e8c:	14 c0       	rjmp	.+40     	; 0x1eb6 <KPD_u8GetPressedKey+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <KPD_u8GetPressedKey+0x182>
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	89 83       	std	Y+1, r24	; 0x01
				 _delay_ms(10);
				 while(DIO_u8GetPinVal(KPD_PORT,Local_u8Row+4)==PIN_VAL_LOW){}
    1eb6:	89 89       	ldd	r24, Y+17	; 0x11
    1eb8:	98 2f       	mov	r25, r24
    1eba:	9c 5f       	subi	r25, 0xFC	; 252
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	69 2f       	mov	r22, r25
    1ec0:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <DIO_u8GetPinVal>
    1ec4:	88 23       	and	r24, r24
    1ec6:	b9 f3       	breq	.-18     	; 0x1eb6 <KPD_u8GetPressedKey+0x18a>
	 u8 KPD_u8Values[MAX_ROW][MAX_COL]=KPD_VALUES;
	 for(Local_u8Col=COL_INIT;Local_u8Col<COL_FIN;Local_u8Col++)
	 {
		 DIO_voidSetPinVal(KPD_PORT,Local_u8Col,PIN_VAL_LOW);

		 for(Local_u8Row=ROW_INIT;Local_u8Row<ROW_FIN;Local_u8Row++)
    1ec8:	89 89       	ldd	r24, Y+17	; 0x11
    1eca:	8f 5f       	subi	r24, 0xFF	; 255
    1ecc:	89 8b       	std	Y+17, r24	; 0x11
    1ece:	89 89       	ldd	r24, Y+17	; 0x11
    1ed0:	84 30       	cpi	r24, 0x04	; 4
    1ed2:	08 f4       	brcc	.+2      	; 0x1ed6 <KPD_u8GetPressedKey+0x1aa>
    1ed4:	5e cf       	rjmp	.-324    	; 0x1d92 <KPD_u8GetPressedKey+0x66>
				 _delay_ms(10);
				 while(DIO_u8GetPinVal(KPD_PORT,Local_u8Row+4)==PIN_VAL_LOW){}
			 }

		 }
		 DIO_voidSetPinVal(KPD_PORT,Local_u8Col,PIN_VAL_HIGH);
    1ed6:	83 e0       	ldi	r24, 0x03	; 3
    1ed8:	6a 89       	ldd	r22, Y+18	; 0x12
    1eda:	41 e0       	ldi	r20, 0x01	; 1
    1edc:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_voidSetPinVal>

 u8 KPD_u8GetPressedKey(void){
	 u8 Local_u8Col, Local_u8Row, Local_u8Reading, Local_u8Key;

	 u8 KPD_u8Values[MAX_ROW][MAX_COL]=KPD_VALUES;
	 for(Local_u8Col=COL_INIT;Local_u8Col<COL_FIN;Local_u8Col++)
    1ee0:	8a 89       	ldd	r24, Y+18	; 0x12
    1ee2:	8f 5f       	subi	r24, 0xFF	; 255
    1ee4:	8a 8b       	std	Y+18, r24	; 0x12
    1ee6:	8a 89       	ldd	r24, Y+18	; 0x12
    1ee8:	84 30       	cpi	r24, 0x04	; 4
    1eea:	08 f4       	brcc	.+2      	; 0x1eee <KPD_u8GetPressedKey+0x1c2>
    1eec:	4b cf       	rjmp	.-362    	; 0x1d84 <KPD_u8GetPressedKey+0x58>
			 }

		 }
		 DIO_voidSetPinVal(KPD_PORT,Local_u8Col,PIN_VAL_HIGH);
	 }
	 return Local_u8Key;
    1eee:	8f 85       	ldd	r24, Y+15	; 0x0f
 }
    1ef0:	a7 96       	adiw	r28, 0x27	; 39
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <main>:
#include "KEYBAD_interface.h"
#include "util/delay.h"


int main(void)
{
    1f02:	cf 92       	push	r12
    1f04:	df 92       	push	r13
    1f06:	ef 92       	push	r14
    1f08:	ff 92       	push	r15
    1f0a:	0f 93       	push	r16
    1f0c:	1f 93       	push	r17
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	c8 52       	subi	r28, 0x28	; 40
    1f18:	d1 40       	sbci	r29, 0x01	; 1
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
	//Direction for port A and B for lcd connection
	DIO_voidSetPortDir(PORTA_REG,PORT_DIR_OUT);
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	6f ef       	ldi	r22, 0xFF	; 255
    1f28:	0e 94 88 0b 	call	0x1710	; 0x1710 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(PORTB_REG,PORT_DIR_OUT);
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	6f ef       	ldi	r22, 0xFF	; 255
    1f30:	0e 94 88 0b 	call	0x1710	; 0x1710 <DIO_voidSetPortDir>
	//Direction for port C for key pad connection rows are inputs
	// columns are outputs
	DIO_voidSetPortDir(PORTC_REG,0b00001111);
    1f34:	83 e0       	ldi	r24, 0x03	; 3
    1f36:	6f e0       	ldi	r22, 0x0F	; 15
    1f38:	0e 94 88 0b 	call	0x1710	; 0x1710 <DIO_voidSetPortDir>
	// initial port C is high
	DIO_voidSetPortVal(PORTC_REG,PORT_VAL_HIGH);
    1f3c:	83 e0       	ldi	r24, 0x03	; 3
    1f3e:	6f ef       	ldi	r22, 0xFF	; 255
    1f40:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <DIO_voidSetPortVal>


	// Initial the LCD
	CLCD_voidInit();
    1f44:	0e 94 a9 08 	call	0x1152	; 0x1152 <CLCD_voidInit>

	// Initialize needed variables
	u8 operator;
	u8 arr[10];
	u8 num1=0,num2=0;
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e9 5e       	subi	r30, 0xE9	; 233
    1f4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f4e:	10 82       	st	Z, r1
    1f50:	fe 01       	movw	r30, r28
    1f52:	ea 5e       	subi	r30, 0xEA	; 234
    1f54:	fe 4f       	sbci	r31, 0xFE	; 254
    1f56:	10 82       	st	Z, r1
	u8 i=0,j=0;
    1f58:	fe 01       	movw	r30, r28
    1f5a:	eb 5e       	subi	r30, 0xEB	; 235
    1f5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f5e:	10 82       	st	Z, r1
    1f60:	fe 01       	movw	r30, r28
    1f62:	ec 5e       	subi	r30, 0xEC	; 236
    1f64:	fe 4f       	sbci	r31, 0xFE	; 254
    1f66:	10 82       	st	Z, r1
	f32 result;
	f32 div;
	while(1)
	{
		// get the value of pressed key
		u8 pressed_key=KPD_u8GetPressedKey();
    1f68:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <KPD_u8GetPressedKey>
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e5 5f       	subi	r30, 0xF5	; 245
    1f70:	fe 4f       	sbci	r31, 0xFE	; 254
    1f72:	80 83       	st	Z, r24

		//below if condition is for operations ( / , * , - , + )
		// 4 is divide, 8 is multiply, 12 is subtract, 16 is addition
		if(pressed_key==4 || pressed_key==8 || pressed_key==12 ||pressed_key==16)
    1f74:	fe 01       	movw	r30, r28
    1f76:	e5 5f       	subi	r30, 0xF5	; 245
    1f78:	fe 4f       	sbci	r31, 0xFE	; 254
    1f7a:	80 81       	ld	r24, Z
    1f7c:	84 30       	cpi	r24, 0x04	; 4
    1f7e:	99 f0       	breq	.+38     	; 0x1fa6 <main+0xa4>
    1f80:	fe 01       	movw	r30, r28
    1f82:	e5 5f       	subi	r30, 0xF5	; 245
    1f84:	fe 4f       	sbci	r31, 0xFE	; 254
    1f86:	80 81       	ld	r24, Z
    1f88:	88 30       	cpi	r24, 0x08	; 8
    1f8a:	69 f0       	breq	.+26     	; 0x1fa6 <main+0xa4>
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e5 5f       	subi	r30, 0xF5	; 245
    1f90:	fe 4f       	sbci	r31, 0xFE	; 254
    1f92:	80 81       	ld	r24, Z
    1f94:	8c 30       	cpi	r24, 0x0C	; 12
    1f96:	39 f0       	breq	.+14     	; 0x1fa6 <main+0xa4>
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e5 5f       	subi	r30, 0xF5	; 245
    1f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9e:	80 81       	ld	r24, Z
    1fa0:	80 31       	cpi	r24, 0x10	; 16
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <main+0xa4>
    1fa4:	5c c3       	rjmp	.+1720   	; 0x265e <main+0x75c>
		{
			// getting the value for first number
			for(j=0;j<i;j++)
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	ec 5e       	subi	r30, 0xEC	; 236
    1faa:	fe 4f       	sbci	r31, 0xFE	; 254
    1fac:	10 82       	st	Z, r1
    1fae:	1f c0       	rjmp	.+62     	; 0x1fee <main+0xec>
			{
				num1 += arr[j];
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	ec 5e       	subi	r30, 0xEC	; 236
    1fb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb6:	80 81       	ld	r24, Z
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	87 5e       	subi	r24, 0xE7	; 231
    1fc0:	9e 4f       	sbci	r25, 0xFE	; 254
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	e2 0f       	add	r30, r18
    1fc6:	f3 1f       	adc	r31, r19
    1fc8:	90 81       	ld	r25, Z
    1fca:	de 01       	movw	r26, r28
    1fcc:	a9 5e       	subi	r26, 0xE9	; 233
    1fce:	be 4f       	sbci	r27, 0xFE	; 254
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e9 5e       	subi	r30, 0xE9	; 233
    1fd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fd6:	80 81       	ld	r24, Z
    1fd8:	89 0f       	add	r24, r25
    1fda:	8c 93       	st	X, r24
		//below if condition is for operations ( / , * , - , + )
		// 4 is divide, 8 is multiply, 12 is subtract, 16 is addition
		if(pressed_key==4 || pressed_key==8 || pressed_key==12 ||pressed_key==16)
		{
			// getting the value for first number
			for(j=0;j<i;j++)
    1fdc:	de 01       	movw	r26, r28
    1fde:	ac 5e       	subi	r26, 0xEC	; 236
    1fe0:	be 4f       	sbci	r27, 0xFE	; 254
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ec 5e       	subi	r30, 0xEC	; 236
    1fe6:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe8:	80 81       	ld	r24, Z
    1fea:	8f 5f       	subi	r24, 0xFF	; 255
    1fec:	8c 93       	st	X, r24
    1fee:	fe 01       	movw	r30, r28
    1ff0:	ec 5e       	subi	r30, 0xEC	; 236
    1ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff4:	de 01       	movw	r26, r28
    1ff6:	ab 5e       	subi	r26, 0xEB	; 235
    1ff8:	be 4f       	sbci	r27, 0xFE	; 254
    1ffa:	90 81       	ld	r25, Z
    1ffc:	8c 91       	ld	r24, X
    1ffe:	98 17       	cp	r25, r24
    2000:	b8 f2       	brcs	.-82     	; 0x1fb0 <main+0xae>
			{
				num1 += arr[j];
			}
			// zeroing our itirator
			i=0;
    2002:	fe 01       	movw	r30, r28
    2004:	eb 5e       	subi	r30, 0xEB	; 235
    2006:	fe 4f       	sbci	r31, 0xFE	; 254
    2008:	10 82       	st	Z, r1
			// save the operator
			operator=pressed_key;
    200a:	de 01       	movw	r26, r28
    200c:	a8 5e       	subi	r26, 0xE8	; 232
    200e:	be 4f       	sbci	r27, 0xFE	; 254
    2010:	fe 01       	movw	r30, r28
    2012:	e5 5f       	subi	r30, 0xF5	; 245
    2014:	fe 4f       	sbci	r31, 0xFE	; 254
    2016:	80 81       	ld	r24, Z
    2018:	8c 93       	st	X, r24

			// Switch to display the operator on LCD
			switch(pressed_key)
    201a:	fe 01       	movw	r30, r28
    201c:	e5 5f       	subi	r30, 0xF5	; 245
    201e:	fe 4f       	sbci	r31, 0xFE	; 254
    2020:	80 81       	ld	r24, Z
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	c9 5d       	subi	r28, 0xD9	; 217
    2028:	de 4f       	sbci	r29, 0xFE	; 254
    202a:	39 83       	std	Y+1, r19	; 0x01
    202c:	28 83       	st	Y, r18
    202e:	c7 52       	subi	r28, 0x27	; 39
    2030:	d1 40       	sbci	r29, 0x01	; 1
    2032:	c9 5d       	subi	r28, 0xD9	; 217
    2034:	de 4f       	sbci	r29, 0xFE	; 254
    2036:	48 81       	ld	r20, Y
    2038:	59 81       	ldd	r21, Y+1	; 0x01
    203a:	c7 52       	subi	r28, 0x27	; 39
    203c:	d1 40       	sbci	r29, 0x01	; 1
    203e:	48 30       	cpi	r20, 0x08	; 8
    2040:	51 05       	cpc	r21, r1
    2042:	09 f4       	brne	.+2      	; 0x2046 <main+0x144>
    2044:	e1 c0       	rjmp	.+450    	; 0x2208 <main+0x306>
    2046:	c9 5d       	subi	r28, 0xD9	; 217
    2048:	de 4f       	sbci	r29, 0xFE	; 254
    204a:	88 81       	ld	r24, Y
    204c:	99 81       	ldd	r25, Y+1	; 0x01
    204e:	c7 52       	subi	r28, 0x27	; 39
    2050:	d1 40       	sbci	r29, 0x01	; 1
    2052:	89 30       	cpi	r24, 0x09	; 9
    2054:	91 05       	cpc	r25, r1
    2056:	54 f4       	brge	.+20     	; 0x206c <main+0x16a>
    2058:	c9 5d       	subi	r28, 0xD9	; 217
    205a:	de 4f       	sbci	r29, 0xFE	; 254
    205c:	e8 81       	ld	r30, Y
    205e:	f9 81       	ldd	r31, Y+1	; 0x01
    2060:	c7 52       	subi	r28, 0x27	; 39
    2062:	d1 40       	sbci	r29, 0x01	; 1
    2064:	e4 30       	cpi	r30, 0x04	; 4
    2066:	f1 05       	cpc	r31, r1
    2068:	b1 f0       	breq	.+44     	; 0x2096 <main+0x194>
    206a:	7e cf       	rjmp	.-260    	; 0x1f68 <main+0x66>
    206c:	c9 5d       	subi	r28, 0xD9	; 217
    206e:	de 4f       	sbci	r29, 0xFE	; 254
    2070:	28 81       	ld	r18, Y
    2072:	39 81       	ldd	r19, Y+1	; 0x01
    2074:	c7 52       	subi	r28, 0x27	; 39
    2076:	d1 40       	sbci	r29, 0x01	; 1
    2078:	2c 30       	cpi	r18, 0x0C	; 12
    207a:	31 05       	cpc	r19, r1
    207c:	09 f4       	brne	.+2      	; 0x2080 <main+0x17e>
    207e:	7d c1       	rjmp	.+762    	; 0x237a <main+0x478>
    2080:	c9 5d       	subi	r28, 0xD9	; 217
    2082:	de 4f       	sbci	r29, 0xFE	; 254
    2084:	48 81       	ld	r20, Y
    2086:	59 81       	ldd	r21, Y+1	; 0x01
    2088:	c7 52       	subi	r28, 0x27	; 39
    208a:	d1 40       	sbci	r29, 0x01	; 1
    208c:	40 31       	cpi	r20, 0x10	; 16
    208e:	51 05       	cpc	r21, r1
    2090:	09 f4       	brne	.+2      	; 0x2094 <main+0x192>
    2092:	2c c2       	rjmp	.+1112   	; 0x24ec <main+0x5ea>
    2094:	69 cf       	rjmp	.-302    	; 0x1f68 <main+0x66>
			{
			case 4 : CLCD_voidSendString(" / ");_delay_ms(1);break;
    2096:	80 e6       	ldi	r24, 0x60	; 96
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0e 94 8d 0a 	call	0x151a	; 0x151a <CLCD_voidSendString>
    209e:	fe 01       	movw	r30, r28
    20a0:	e9 5f       	subi	r30, 0xF9	; 249
    20a2:	fe 4f       	sbci	r31, 0xFE	; 254
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a0 e8       	ldi	r26, 0x80	; 128
    20aa:	bf e3       	ldi	r27, 0x3F	; 63
    20ac:	80 83       	st	Z, r24
    20ae:	91 83       	std	Z+1, r25	; 0x01
    20b0:	a2 83       	std	Z+2, r26	; 0x02
    20b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b4:	8e 01       	movw	r16, r28
    20b6:	0d 5f       	subi	r16, 0xFD	; 253
    20b8:	1e 4f       	sbci	r17, 0xFE	; 254
    20ba:	fe 01       	movw	r30, r28
    20bc:	e9 5f       	subi	r30, 0xF9	; 249
    20be:	fe 4f       	sbci	r31, 0xFE	; 254
    20c0:	60 81       	ld	r22, Z
    20c2:	71 81       	ldd	r23, Z+1	; 0x01
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	93 81       	ldd	r25, Z+3	; 0x03
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4a ef       	ldi	r20, 0xFA	; 250
    20ce:	54 e4       	ldi	r21, 0x44	; 68
    20d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	f8 01       	movw	r30, r16
    20da:	80 83       	st	Z, r24
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	a2 83       	std	Z+2, r26	; 0x02
    20e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20e2:	fe 01       	movw	r30, r28
    20e4:	ed 5f       	subi	r30, 0xFD	; 253
    20e6:	fe 4f       	sbci	r31, 0xFE	; 254
    20e8:	60 81       	ld	r22, Z
    20ea:	71 81       	ldd	r23, Z+1	; 0x01
    20ec:	82 81       	ldd	r24, Z+2	; 0x02
    20ee:	93 81       	ldd	r25, Z+3	; 0x03
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e8       	ldi	r20, 0x80	; 128
    20f6:	5f e3       	ldi	r21, 0x3F	; 63
    20f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20fc:	88 23       	and	r24, r24
    20fe:	44 f4       	brge	.+16     	; 0x2110 <main+0x20e>
		__ticks = 1;
    2100:	fe 01       	movw	r30, r28
    2102:	ef 5f       	subi	r30, 0xFF	; 255
    2104:	fe 4f       	sbci	r31, 0xFE	; 254
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	91 83       	std	Z+1, r25	; 0x01
    210c:	80 83       	st	Z, r24
    210e:	64 c0       	rjmp	.+200    	; 0x21d8 <main+0x2d6>
	else if (__tmp > 65535)
    2110:	fe 01       	movw	r30, r28
    2112:	ed 5f       	subi	r30, 0xFD	; 253
    2114:	fe 4f       	sbci	r31, 0xFE	; 254
    2116:	60 81       	ld	r22, Z
    2118:	71 81       	ldd	r23, Z+1	; 0x01
    211a:	82 81       	ldd	r24, Z+2	; 0x02
    211c:	93 81       	ldd	r25, Z+3	; 0x03
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	3f ef       	ldi	r19, 0xFF	; 255
    2122:	4f e7       	ldi	r20, 0x7F	; 127
    2124:	57 e4       	ldi	r21, 0x47	; 71
    2126:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    212a:	18 16       	cp	r1, r24
    212c:	0c f0       	brlt	.+2      	; 0x2130 <main+0x22e>
    212e:	43 c0       	rjmp	.+134    	; 0x21b6 <main+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2130:	fe 01       	movw	r30, r28
    2132:	e9 5f       	subi	r30, 0xF9	; 249
    2134:	fe 4f       	sbci	r31, 0xFE	; 254
    2136:	60 81       	ld	r22, Z
    2138:	71 81       	ldd	r23, Z+1	; 0x01
    213a:	82 81       	ldd	r24, Z+2	; 0x02
    213c:	93 81       	ldd	r25, Z+3	; 0x03
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e2       	ldi	r20, 0x20	; 32
    2144:	51 e4       	ldi	r21, 0x41	; 65
    2146:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	8e 01       	movw	r16, r28
    2150:	0f 5f       	subi	r16, 0xFF	; 255
    2152:	1e 4f       	sbci	r17, 0xFE	; 254
    2154:	bc 01       	movw	r22, r24
    2156:	cd 01       	movw	r24, r26
    2158:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	f8 01       	movw	r30, r16
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	80 83       	st	Z, r24
    2166:	1f c0       	rjmp	.+62     	; 0x21a6 <main+0x2a4>
    2168:	fe 01       	movw	r30, r28
    216a:	e1 50       	subi	r30, 0x01	; 1
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	88 ec       	ldi	r24, 0xC8	; 200
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	80 83       	st	Z, r24
    2176:	fe 01       	movw	r30, r28
    2178:	e1 50       	subi	r30, 0x01	; 1
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	80 81       	ld	r24, Z
    217e:	91 81       	ldd	r25, Z+1	; 0x01
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <main+0x27e>
    2184:	fe 01       	movw	r30, r28
    2186:	e1 50       	subi	r30, 0x01	; 1
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	91 83       	std	Z+1, r25	; 0x01
    218c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218e:	de 01       	movw	r26, r28
    2190:	af 5f       	subi	r26, 0xFF	; 255
    2192:	be 4f       	sbci	r27, 0xFE	; 254
    2194:	fe 01       	movw	r30, r28
    2196:	ef 5f       	subi	r30, 0xFF	; 255
    2198:	fe 4f       	sbci	r31, 0xFE	; 254
    219a:	80 81       	ld	r24, Z
    219c:	91 81       	ldd	r25, Z+1	; 0x01
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	11 96       	adiw	r26, 0x01	; 1
    21a2:	9c 93       	st	X, r25
    21a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	fe 01       	movw	r30, r28
    21a8:	ef 5f       	subi	r30, 0xFF	; 255
    21aa:	fe 4f       	sbci	r31, 0xFE	; 254
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	d1 f6       	brne	.-76     	; 0x2168 <main+0x266>
    21b4:	d9 ce       	rjmp	.-590    	; 0x1f68 <main+0x66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b6:	8e 01       	movw	r16, r28
    21b8:	0f 5f       	subi	r16, 0xFF	; 255
    21ba:	1e 4f       	sbci	r17, 0xFE	; 254
    21bc:	fe 01       	movw	r30, r28
    21be:	ed 5f       	subi	r30, 0xFD	; 253
    21c0:	fe 4f       	sbci	r31, 0xFE	; 254
    21c2:	60 81       	ld	r22, Z
    21c4:	71 81       	ldd	r23, Z+1	; 0x01
    21c6:	82 81       	ldd	r24, Z+2	; 0x02
    21c8:	93 81       	ldd	r25, Z+3	; 0x03
    21ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	f8 01       	movw	r30, r16
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	80 83       	st	Z, r24
    21d8:	de 01       	movw	r26, r28
    21da:	a3 50       	subi	r26, 0x03	; 3
    21dc:	bf 4f       	sbci	r27, 0xFF	; 255
    21de:	fe 01       	movw	r30, r28
    21e0:	ef 5f       	subi	r30, 0xFF	; 255
    21e2:	fe 4f       	sbci	r31, 0xFE	; 254
    21e4:	80 81       	ld	r24, Z
    21e6:	91 81       	ldd	r25, Z+1	; 0x01
    21e8:	11 96       	adiw	r26, 0x01	; 1
    21ea:	9c 93       	st	X, r25
    21ec:	8e 93       	st	-X, r24
    21ee:	fe 01       	movw	r30, r28
    21f0:	e3 50       	subi	r30, 0x03	; 3
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	80 81       	ld	r24, Z
    21f6:	91 81       	ldd	r25, Z+1	; 0x01
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <main+0x2f6>
    21fc:	fe 01       	movw	r30, r28
    21fe:	e3 50       	subi	r30, 0x03	; 3
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	91 83       	std	Z+1, r25	; 0x01
    2204:	80 83       	st	Z, r24
    2206:	b0 ce       	rjmp	.-672    	; 0x1f68 <main+0x66>
			case 8 : CLCD_voidSendString(" * ");_delay_ms(1);break;
    2208:	84 e6       	ldi	r24, 0x64	; 100
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	0e 94 8d 0a 	call	0x151a	; 0x151a <CLCD_voidSendString>
    2210:	fe 01       	movw	r30, r28
    2212:	e7 50       	subi	r30, 0x07	; 7
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	a0 e8       	ldi	r26, 0x80	; 128
    221c:	bf e3       	ldi	r27, 0x3F	; 63
    221e:	80 83       	st	Z, r24
    2220:	91 83       	std	Z+1, r25	; 0x01
    2222:	a2 83       	std	Z+2, r26	; 0x02
    2224:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2226:	8e 01       	movw	r16, r28
    2228:	0b 50       	subi	r16, 0x0B	; 11
    222a:	1f 4f       	sbci	r17, 0xFF	; 255
    222c:	fe 01       	movw	r30, r28
    222e:	e7 50       	subi	r30, 0x07	; 7
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	60 81       	ld	r22, Z
    2234:	71 81       	ldd	r23, Z+1	; 0x01
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	4a ef       	ldi	r20, 0xFA	; 250
    2240:	54 e4       	ldi	r21, 0x44	; 68
    2242:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	f8 01       	movw	r30, r16
    224c:	80 83       	st	Z, r24
    224e:	91 83       	std	Z+1, r25	; 0x01
    2250:	a2 83       	std	Z+2, r26	; 0x02
    2252:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2254:	fe 01       	movw	r30, r28
    2256:	eb 50       	subi	r30, 0x0B	; 11
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	60 81       	ld	r22, Z
    225c:	71 81       	ldd	r23, Z+1	; 0x01
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e8       	ldi	r20, 0x80	; 128
    2268:	5f e3       	ldi	r21, 0x3F	; 63
    226a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    226e:	88 23       	and	r24, r24
    2270:	44 f4       	brge	.+16     	; 0x2282 <main+0x380>
		__ticks = 1;
    2272:	fe 01       	movw	r30, r28
    2274:	ed 50       	subi	r30, 0x0D	; 13
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	91 83       	std	Z+1, r25	; 0x01
    227e:	80 83       	st	Z, r24
    2280:	64 c0       	rjmp	.+200    	; 0x234a <main+0x448>
	else if (__tmp > 65535)
    2282:	fe 01       	movw	r30, r28
    2284:	eb 50       	subi	r30, 0x0B	; 11
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	60 81       	ld	r22, Z
    228a:	71 81       	ldd	r23, Z+1	; 0x01
    228c:	82 81       	ldd	r24, Z+2	; 0x02
    228e:	93 81       	ldd	r25, Z+3	; 0x03
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	3f ef       	ldi	r19, 0xFF	; 255
    2294:	4f e7       	ldi	r20, 0x7F	; 127
    2296:	57 e4       	ldi	r21, 0x47	; 71
    2298:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    229c:	18 16       	cp	r1, r24
    229e:	0c f0       	brlt	.+2      	; 0x22a2 <main+0x3a0>
    22a0:	43 c0       	rjmp	.+134    	; 0x2328 <main+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a2:	fe 01       	movw	r30, r28
    22a4:	e7 50       	subi	r30, 0x07	; 7
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	60 81       	ld	r22, Z
    22aa:	71 81       	ldd	r23, Z+1	; 0x01
    22ac:	82 81       	ldd	r24, Z+2	; 0x02
    22ae:	93 81       	ldd	r25, Z+3	; 0x03
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e2       	ldi	r20, 0x20	; 32
    22b6:	51 e4       	ldi	r21, 0x41	; 65
    22b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	8e 01       	movw	r16, r28
    22c2:	0d 50       	subi	r16, 0x0D	; 13
    22c4:	1f 4f       	sbci	r17, 0xFF	; 255
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	f8 01       	movw	r30, r16
    22d4:	91 83       	std	Z+1, r25	; 0x01
    22d6:	80 83       	st	Z, r24
    22d8:	1f c0       	rjmp	.+62     	; 0x2318 <main+0x416>
    22da:	fe 01       	movw	r30, r28
    22dc:	ef 50       	subi	r30, 0x0F	; 15
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	88 ec       	ldi	r24, 0xC8	; 200
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
    22e8:	fe 01       	movw	r30, r28
    22ea:	ef 50       	subi	r30, 0x0F	; 15
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	80 81       	ld	r24, Z
    22f0:	91 81       	ldd	r25, Z+1	; 0x01
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <main+0x3f0>
    22f6:	fe 01       	movw	r30, r28
    22f8:	ef 50       	subi	r30, 0x0F	; 15
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	91 83       	std	Z+1, r25	; 0x01
    22fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2300:	de 01       	movw	r26, r28
    2302:	ad 50       	subi	r26, 0x0D	; 13
    2304:	bf 4f       	sbci	r27, 0xFF	; 255
    2306:	fe 01       	movw	r30, r28
    2308:	ed 50       	subi	r30, 0x0D	; 13
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	80 81       	ld	r24, Z
    230e:	91 81       	ldd	r25, Z+1	; 0x01
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	11 96       	adiw	r26, 0x01	; 1
    2314:	9c 93       	st	X, r25
    2316:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2318:	fe 01       	movw	r30, r28
    231a:	ed 50       	subi	r30, 0x0D	; 13
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	80 81       	ld	r24, Z
    2320:	91 81       	ldd	r25, Z+1	; 0x01
    2322:	00 97       	sbiw	r24, 0x00	; 0
    2324:	d1 f6       	brne	.-76     	; 0x22da <main+0x3d8>
    2326:	20 ce       	rjmp	.-960    	; 0x1f68 <main+0x66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2328:	8e 01       	movw	r16, r28
    232a:	0d 50       	subi	r16, 0x0D	; 13
    232c:	1f 4f       	sbci	r17, 0xFF	; 255
    232e:	fe 01       	movw	r30, r28
    2330:	eb 50       	subi	r30, 0x0B	; 11
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	60 81       	ld	r22, Z
    2336:	71 81       	ldd	r23, Z+1	; 0x01
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	93 81       	ldd	r25, Z+3	; 0x03
    233c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	f8 01       	movw	r30, r16
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	80 83       	st	Z, r24
    234a:	de 01       	movw	r26, r28
    234c:	a1 51       	subi	r26, 0x11	; 17
    234e:	bf 4f       	sbci	r27, 0xFF	; 255
    2350:	fe 01       	movw	r30, r28
    2352:	ed 50       	subi	r30, 0x0D	; 13
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	80 81       	ld	r24, Z
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	11 96       	adiw	r26, 0x01	; 1
    235c:	9c 93       	st	X, r25
    235e:	8e 93       	st	-X, r24
    2360:	fe 01       	movw	r30, r28
    2362:	e1 51       	subi	r30, 0x11	; 17
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	80 81       	ld	r24, Z
    2368:	91 81       	ldd	r25, Z+1	; 0x01
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <main+0x468>
    236e:	fe 01       	movw	r30, r28
    2370:	e1 51       	subi	r30, 0x11	; 17
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	91 83       	std	Z+1, r25	; 0x01
    2376:	80 83       	st	Z, r24
    2378:	f7 cd       	rjmp	.-1042   	; 0x1f68 <main+0x66>
			case 12: CLCD_voidSendString(" - ");_delay_ms(1);break;
    237a:	88 e6       	ldi	r24, 0x68	; 104
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	0e 94 8d 0a 	call	0x151a	; 0x151a <CLCD_voidSendString>
    2382:	fe 01       	movw	r30, r28
    2384:	e5 51       	subi	r30, 0x15	; 21
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	a0 e8       	ldi	r26, 0x80	; 128
    238e:	bf e3       	ldi	r27, 0x3F	; 63
    2390:	80 83       	st	Z, r24
    2392:	91 83       	std	Z+1, r25	; 0x01
    2394:	a2 83       	std	Z+2, r26	; 0x02
    2396:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2398:	8e 01       	movw	r16, r28
    239a:	09 51       	subi	r16, 0x19	; 25
    239c:	1f 4f       	sbci	r17, 0xFF	; 255
    239e:	fe 01       	movw	r30, r28
    23a0:	e5 51       	subi	r30, 0x15	; 21
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	60 81       	ld	r22, Z
    23a6:	71 81       	ldd	r23, Z+1	; 0x01
    23a8:	82 81       	ldd	r24, Z+2	; 0x02
    23aa:	93 81       	ldd	r25, Z+3	; 0x03
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	4a ef       	ldi	r20, 0xFA	; 250
    23b2:	54 e4       	ldi	r21, 0x44	; 68
    23b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	f8 01       	movw	r30, r16
    23be:	80 83       	st	Z, r24
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	a2 83       	std	Z+2, r26	; 0x02
    23c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23c6:	fe 01       	movw	r30, r28
    23c8:	e9 51       	subi	r30, 0x19	; 25
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e8       	ldi	r20, 0x80	; 128
    23da:	5f e3       	ldi	r21, 0x3F	; 63
    23dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23e0:	88 23       	and	r24, r24
    23e2:	44 f4       	brge	.+16     	; 0x23f4 <main+0x4f2>
		__ticks = 1;
    23e4:	fe 01       	movw	r30, r28
    23e6:	eb 51       	subi	r30, 0x1B	; 27
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	91 83       	std	Z+1, r25	; 0x01
    23f0:	80 83       	st	Z, r24
    23f2:	64 c0       	rjmp	.+200    	; 0x24bc <main+0x5ba>
	else if (__tmp > 65535)
    23f4:	fe 01       	movw	r30, r28
    23f6:	e9 51       	subi	r30, 0x19	; 25
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	60 81       	ld	r22, Z
    23fc:	71 81       	ldd	r23, Z+1	; 0x01
    23fe:	82 81       	ldd	r24, Z+2	; 0x02
    2400:	93 81       	ldd	r25, Z+3	; 0x03
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	3f ef       	ldi	r19, 0xFF	; 255
    2406:	4f e7       	ldi	r20, 0x7F	; 127
    2408:	57 e4       	ldi	r21, 0x47	; 71
    240a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    240e:	18 16       	cp	r1, r24
    2410:	0c f0       	brlt	.+2      	; 0x2414 <main+0x512>
    2412:	43 c0       	rjmp	.+134    	; 0x249a <main+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2414:	fe 01       	movw	r30, r28
    2416:	e5 51       	subi	r30, 0x15	; 21
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	60 81       	ld	r22, Z
    241c:	71 81       	ldd	r23, Z+1	; 0x01
    241e:	82 81       	ldd	r24, Z+2	; 0x02
    2420:	93 81       	ldd	r25, Z+3	; 0x03
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e2       	ldi	r20, 0x20	; 32
    2428:	51 e4       	ldi	r21, 0x41	; 65
    242a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	8e 01       	movw	r16, r28
    2434:	0b 51       	subi	r16, 0x1B	; 27
    2436:	1f 4f       	sbci	r17, 0xFF	; 255
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	f8 01       	movw	r30, r16
    2446:	91 83       	std	Z+1, r25	; 0x01
    2448:	80 83       	st	Z, r24
    244a:	1f c0       	rjmp	.+62     	; 0x248a <main+0x588>
    244c:	fe 01       	movw	r30, r28
    244e:	ed 51       	subi	r30, 0x1D	; 29
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	88 ec       	ldi	r24, 0xC8	; 200
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	91 83       	std	Z+1, r25	; 0x01
    2458:	80 83       	st	Z, r24
    245a:	fe 01       	movw	r30, r28
    245c:	ed 51       	subi	r30, 0x1D	; 29
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	80 81       	ld	r24, Z
    2462:	91 81       	ldd	r25, Z+1	; 0x01
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <main+0x562>
    2468:	fe 01       	movw	r30, r28
    246a:	ed 51       	subi	r30, 0x1D	; 29
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	de 01       	movw	r26, r28
    2474:	ab 51       	subi	r26, 0x1B	; 27
    2476:	bf 4f       	sbci	r27, 0xFF	; 255
    2478:	fe 01       	movw	r30, r28
    247a:	eb 51       	subi	r30, 0x1B	; 27
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	80 81       	ld	r24, Z
    2480:	91 81       	ldd	r25, Z+1	; 0x01
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	11 96       	adiw	r26, 0x01	; 1
    2486:	9c 93       	st	X, r25
    2488:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248a:	fe 01       	movw	r30, r28
    248c:	eb 51       	subi	r30, 0x1B	; 27
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	d1 f6       	brne	.-76     	; 0x244c <main+0x54a>
    2498:	67 cd       	rjmp	.-1330   	; 0x1f68 <main+0x66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249a:	8e 01       	movw	r16, r28
    249c:	0b 51       	subi	r16, 0x1B	; 27
    249e:	1f 4f       	sbci	r17, 0xFF	; 255
    24a0:	fe 01       	movw	r30, r28
    24a2:	e9 51       	subi	r30, 0x19	; 25
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	60 81       	ld	r22, Z
    24a8:	71 81       	ldd	r23, Z+1	; 0x01
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	93 81       	ldd	r25, Z+3	; 0x03
    24ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	f8 01       	movw	r30, r16
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	80 83       	st	Z, r24
    24bc:	de 01       	movw	r26, r28
    24be:	af 51       	subi	r26, 0x1F	; 31
    24c0:	bf 4f       	sbci	r27, 0xFF	; 255
    24c2:	fe 01       	movw	r30, r28
    24c4:	eb 51       	subi	r30, 0x1B	; 27
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	80 81       	ld	r24, Z
    24ca:	91 81       	ldd	r25, Z+1	; 0x01
    24cc:	11 96       	adiw	r26, 0x01	; 1
    24ce:	9c 93       	st	X, r25
    24d0:	8e 93       	st	-X, r24
    24d2:	fe 01       	movw	r30, r28
    24d4:	ef 51       	subi	r30, 0x1F	; 31
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	80 81       	ld	r24, Z
    24da:	91 81       	ldd	r25, Z+1	; 0x01
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <main+0x5da>
    24e0:	fe 01       	movw	r30, r28
    24e2:	ef 51       	subi	r30, 0x1F	; 31
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	80 83       	st	Z, r24
    24ea:	3e cd       	rjmp	.-1412   	; 0x1f68 <main+0x66>
			case 16: CLCD_voidSendString(" + ");_delay_ms(1);break;
    24ec:	8c e6       	ldi	r24, 0x6C	; 108
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	0e 94 8d 0a 	call	0x151a	; 0x151a <CLCD_voidSendString>
    24f4:	fe 01       	movw	r30, r28
    24f6:	e3 52       	subi	r30, 0x23	; 35
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	a0 e8       	ldi	r26, 0x80	; 128
    2500:	bf e3       	ldi	r27, 0x3F	; 63
    2502:	80 83       	st	Z, r24
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	a2 83       	std	Z+2, r26	; 0x02
    2508:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250a:	8e 01       	movw	r16, r28
    250c:	07 52       	subi	r16, 0x27	; 39
    250e:	1f 4f       	sbci	r17, 0xFF	; 255
    2510:	fe 01       	movw	r30, r28
    2512:	e3 52       	subi	r30, 0x23	; 35
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	60 81       	ld	r22, Z
    2518:	71 81       	ldd	r23, Z+1	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	4a ef       	ldi	r20, 0xFA	; 250
    2524:	54 e4       	ldi	r21, 0x44	; 68
    2526:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	f8 01       	movw	r30, r16
    2530:	80 83       	st	Z, r24
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	a2 83       	std	Z+2, r26	; 0x02
    2536:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2538:	fe 01       	movw	r30, r28
    253a:	e7 52       	subi	r30, 0x27	; 39
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	60 81       	ld	r22, Z
    2540:	71 81       	ldd	r23, Z+1	; 0x01
    2542:	82 81       	ldd	r24, Z+2	; 0x02
    2544:	93 81       	ldd	r25, Z+3	; 0x03
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e8       	ldi	r20, 0x80	; 128
    254c:	5f e3       	ldi	r21, 0x3F	; 63
    254e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2552:	88 23       	and	r24, r24
    2554:	44 f4       	brge	.+16     	; 0x2566 <main+0x664>
		__ticks = 1;
    2556:	fe 01       	movw	r30, r28
    2558:	e9 52       	subi	r30, 0x29	; 41
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	91 83       	std	Z+1, r25	; 0x01
    2562:	80 83       	st	Z, r24
    2564:	64 c0       	rjmp	.+200    	; 0x262e <main+0x72c>
	else if (__tmp > 65535)
    2566:	fe 01       	movw	r30, r28
    2568:	e7 52       	subi	r30, 0x27	; 39
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	60 81       	ld	r22, Z
    256e:	71 81       	ldd	r23, Z+1	; 0x01
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	93 81       	ldd	r25, Z+3	; 0x03
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	3f ef       	ldi	r19, 0xFF	; 255
    2578:	4f e7       	ldi	r20, 0x7F	; 127
    257a:	57 e4       	ldi	r21, 0x47	; 71
    257c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2580:	18 16       	cp	r1, r24
    2582:	0c f0       	brlt	.+2      	; 0x2586 <main+0x684>
    2584:	43 c0       	rjmp	.+134    	; 0x260c <main+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2586:	fe 01       	movw	r30, r28
    2588:	e3 52       	subi	r30, 0x23	; 35
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	60 81       	ld	r22, Z
    258e:	71 81       	ldd	r23, Z+1	; 0x01
    2590:	82 81       	ldd	r24, Z+2	; 0x02
    2592:	93 81       	ldd	r25, Z+3	; 0x03
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e2       	ldi	r20, 0x20	; 32
    259a:	51 e4       	ldi	r21, 0x41	; 65
    259c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	8e 01       	movw	r16, r28
    25a6:	09 52       	subi	r16, 0x29	; 41
    25a8:	1f 4f       	sbci	r17, 0xFF	; 255
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	f8 01       	movw	r30, r16
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	80 83       	st	Z, r24
    25bc:	1f c0       	rjmp	.+62     	; 0x25fc <main+0x6fa>
    25be:	fe 01       	movw	r30, r28
    25c0:	eb 52       	subi	r30, 0x2B	; 43
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	88 ec       	ldi	r24, 0xC8	; 200
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	80 83       	st	Z, r24
    25cc:	fe 01       	movw	r30, r28
    25ce:	eb 52       	subi	r30, 0x2B	; 43
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	80 81       	ld	r24, Z
    25d4:	91 81       	ldd	r25, Z+1	; 0x01
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <main+0x6d4>
    25da:	fe 01       	movw	r30, r28
    25dc:	eb 52       	subi	r30, 0x2B	; 43
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	91 83       	std	Z+1, r25	; 0x01
    25e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e4:	de 01       	movw	r26, r28
    25e6:	a9 52       	subi	r26, 0x29	; 41
    25e8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ea:	fe 01       	movw	r30, r28
    25ec:	e9 52       	subi	r30, 0x29	; 41
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	80 81       	ld	r24, Z
    25f2:	91 81       	ldd	r25, Z+1	; 0x01
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	11 96       	adiw	r26, 0x01	; 1
    25f8:	9c 93       	st	X, r25
    25fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fc:	fe 01       	movw	r30, r28
    25fe:	e9 52       	subi	r30, 0x29	; 41
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 81       	ld	r24, Z
    2604:	91 81       	ldd	r25, Z+1	; 0x01
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	d1 f6       	brne	.-76     	; 0x25be <main+0x6bc>
    260a:	ae cc       	rjmp	.-1700   	; 0x1f68 <main+0x66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260c:	8e 01       	movw	r16, r28
    260e:	09 52       	subi	r16, 0x29	; 41
    2610:	1f 4f       	sbci	r17, 0xFF	; 255
    2612:	fe 01       	movw	r30, r28
    2614:	e7 52       	subi	r30, 0x27	; 39
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	60 81       	ld	r22, Z
    261a:	71 81       	ldd	r23, Z+1	; 0x01
    261c:	82 81       	ldd	r24, Z+2	; 0x02
    261e:	93 81       	ldd	r25, Z+3	; 0x03
    2620:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	f8 01       	movw	r30, r16
    262a:	91 83       	std	Z+1, r25	; 0x01
    262c:	80 83       	st	Z, r24
    262e:	de 01       	movw	r26, r28
    2630:	ad 52       	subi	r26, 0x2D	; 45
    2632:	bf 4f       	sbci	r27, 0xFF	; 255
    2634:	fe 01       	movw	r30, r28
    2636:	e9 52       	subi	r30, 0x29	; 41
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	11 96       	adiw	r26, 0x01	; 1
    2640:	9c 93       	st	X, r25
    2642:	8e 93       	st	-X, r24
    2644:	fe 01       	movw	r30, r28
    2646:	ed 52       	subi	r30, 0x2D	; 45
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 81       	ld	r24, Z
    264c:	91 81       	ldd	r25, Z+1	; 0x01
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	f1 f7       	brne	.-4      	; 0x264e <main+0x74c>
    2652:	fe 01       	movw	r30, r28
    2654:	ed 52       	subi	r30, 0x2D	; 45
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	91 83       	std	Z+1, r25	; 0x01
    265a:	80 83       	st	Z, r24
    265c:	85 cc       	rjmp	.-1782   	; 0x1f68 <main+0x66>
			}
		}

		// 13 is reset key , it clears all displayed data on lcd, and zeroing all variables
		else if(pressed_key==13)
    265e:	fe 01       	movw	r30, r28
    2660:	e5 5f       	subi	r30, 0xF5	; 245
    2662:	fe 4f       	sbci	r31, 0xFE	; 254
    2664:	80 81       	ld	r24, Z
    2666:	8d 30       	cpi	r24, 0x0D	; 13
    2668:	09 f5       	brne	.+66     	; 0x26ac <main+0x7aa>
		{
			CLCD_voidInit();
    266a:	0e 94 a9 08 	call	0x1152	; 0x1152 <CLCD_voidInit>
			num1=0;
    266e:	fe 01       	movw	r30, r28
    2670:	e9 5e       	subi	r30, 0xE9	; 233
    2672:	fe 4f       	sbci	r31, 0xFE	; 254
    2674:	10 82       	st	Z, r1
			num2=0;
    2676:	fe 01       	movw	r30, r28
    2678:	ea 5e       	subi	r30, 0xEA	; 234
    267a:	fe 4f       	sbci	r31, 0xFE	; 254
    267c:	10 82       	st	Z, r1
			result=0.0;
    267e:	fe 01       	movw	r30, r28
    2680:	e0 5f       	subi	r30, 0xF0	; 240
    2682:	fe 4f       	sbci	r31, 0xFE	; 254
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	a0 e0       	ldi	r26, 0x00	; 0
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	80 83       	st	Z, r24
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	a2 83       	std	Z+2, r26	; 0x02
    2692:	b3 83       	std	Z+3, r27	; 0x03
			div=0.0;
    2694:	fe 01       	movw	r30, r28
    2696:	e4 5f       	subi	r30, 0xF4	; 244
    2698:	fe 4f       	sbci	r31, 0xFE	; 254
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	a0 e0       	ldi	r26, 0x00	; 0
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	80 83       	st	Z, r24
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	a2 83       	std	Z+2, r26	; 0x02
    26a8:	b3 83       	std	Z+3, r27	; 0x03
    26aa:	5e cc       	rjmp	.-1860   	; 0x1f68 <main+0x66>
		}

		// 15 is equal key
		else if (pressed_key==15)
    26ac:	fe 01       	movw	r30, r28
    26ae:	e5 5f       	subi	r30, 0xF5	; 245
    26b0:	fe 4f       	sbci	r31, 0xFE	; 254
    26b2:	80 81       	ld	r24, Z
    26b4:	8f 30       	cpi	r24, 0x0F	; 15
    26b6:	09 f0       	breq	.+2      	; 0x26ba <main+0x7b8>
    26b8:	75 c5       	rjmp	.+2794   	; 0x31a4 <main+0x12a2>
		{
			// Send "=" to lcd
			CLCD_voidSendString(" = ");
    26ba:	80 e7       	ldi	r24, 0x70	; 112
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 8d 0a 	call	0x151a	; 0x151a <CLCD_voidSendString>

			// get the value of second number
			for(j=0;j<i;j++)
    26c2:	fe 01       	movw	r30, r28
    26c4:	ec 5e       	subi	r30, 0xEC	; 236
    26c6:	fe 4f       	sbci	r31, 0xFE	; 254
    26c8:	10 82       	st	Z, r1
    26ca:	1f c0       	rjmp	.+62     	; 0x270a <main+0x808>
			{
				num2 += arr[j];
    26cc:	fe 01       	movw	r30, r28
    26ce:	ec 5e       	subi	r30, 0xEC	; 236
    26d0:	fe 4f       	sbci	r31, 0xFE	; 254
    26d2:	80 81       	ld	r24, Z
    26d4:	28 2f       	mov	r18, r24
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	ce 01       	movw	r24, r28
    26da:	87 5e       	subi	r24, 0xE7	; 231
    26dc:	9e 4f       	sbci	r25, 0xFE	; 254
    26de:	fc 01       	movw	r30, r24
    26e0:	e2 0f       	add	r30, r18
    26e2:	f3 1f       	adc	r31, r19
    26e4:	90 81       	ld	r25, Z
    26e6:	de 01       	movw	r26, r28
    26e8:	aa 5e       	subi	r26, 0xEA	; 234
    26ea:	be 4f       	sbci	r27, 0xFE	; 254
    26ec:	fe 01       	movw	r30, r28
    26ee:	ea 5e       	subi	r30, 0xEA	; 234
    26f0:	fe 4f       	sbci	r31, 0xFE	; 254
    26f2:	80 81       	ld	r24, Z
    26f4:	89 0f       	add	r24, r25
    26f6:	8c 93       	st	X, r24
		{
			// Send "=" to lcd
			CLCD_voidSendString(" = ");

			// get the value of second number
			for(j=0;j<i;j++)
    26f8:	de 01       	movw	r26, r28
    26fa:	ac 5e       	subi	r26, 0xEC	; 236
    26fc:	be 4f       	sbci	r27, 0xFE	; 254
    26fe:	fe 01       	movw	r30, r28
    2700:	ec 5e       	subi	r30, 0xEC	; 236
    2702:	fe 4f       	sbci	r31, 0xFE	; 254
    2704:	80 81       	ld	r24, Z
    2706:	8f 5f       	subi	r24, 0xFF	; 255
    2708:	8c 93       	st	X, r24
    270a:	fe 01       	movw	r30, r28
    270c:	ec 5e       	subi	r30, 0xEC	; 236
    270e:	fe 4f       	sbci	r31, 0xFE	; 254
    2710:	de 01       	movw	r26, r28
    2712:	ab 5e       	subi	r26, 0xEB	; 235
    2714:	be 4f       	sbci	r27, 0xFE	; 254
    2716:	90 81       	ld	r25, Z
    2718:	8c 91       	ld	r24, X
    271a:	98 17       	cp	r25, r24
    271c:	b8 f2       	brcs	.-82     	; 0x26cc <main+0x7ca>
			{
				num2 += arr[j];
			}
			//zeroing the itirator
			i=0;
    271e:	fe 01       	movw	r30, r28
    2720:	eb 5e       	subi	r30, 0xEB	; 235
    2722:	fe 4f       	sbci	r31, 0xFE	; 254
    2724:	10 82       	st	Z, r1

			// switch to calculate the result
			switch(operator)
    2726:	fe 01       	movw	r30, r28
    2728:	e8 5e       	subi	r30, 0xE8	; 232
    272a:	fe 4f       	sbci	r31, 0xFE	; 254
    272c:	80 81       	ld	r24, Z
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	cb 5d       	subi	r28, 0xDB	; 219
    2734:	de 4f       	sbci	r29, 0xFE	; 254
    2736:	39 83       	std	Y+1, r19	; 0x01
    2738:	28 83       	st	Y, r18
    273a:	c5 52       	subi	r28, 0x25	; 37
    273c:	d1 40       	sbci	r29, 0x01	; 1
    273e:	cb 5d       	subi	r28, 0xDB	; 219
    2740:	de 4f       	sbci	r29, 0xFE	; 254
    2742:	48 81       	ld	r20, Y
    2744:	59 81       	ldd	r21, Y+1	; 0x01
    2746:	c5 52       	subi	r28, 0x25	; 37
    2748:	d1 40       	sbci	r29, 0x01	; 1
    274a:	48 30       	cpi	r20, 0x08	; 8
    274c:	51 05       	cpc	r21, r1
    274e:	09 f4       	brne	.+2      	; 0x2752 <main+0x850>
    2750:	62 c1       	rjmp	.+708    	; 0x2a16 <main+0xb14>
    2752:	cb 5d       	subi	r28, 0xDB	; 219
    2754:	de 4f       	sbci	r29, 0xFE	; 254
    2756:	88 81       	ld	r24, Y
    2758:	99 81       	ldd	r25, Y+1	; 0x01
    275a:	c5 52       	subi	r28, 0x25	; 37
    275c:	d1 40       	sbci	r29, 0x01	; 1
    275e:	89 30       	cpi	r24, 0x09	; 9
    2760:	91 05       	cpc	r25, r1
    2762:	54 f4       	brge	.+20     	; 0x2778 <main+0x876>
    2764:	cb 5d       	subi	r28, 0xDB	; 219
    2766:	de 4f       	sbci	r29, 0xFE	; 254
    2768:	e8 81       	ld	r30, Y
    276a:	f9 81       	ldd	r31, Y+1	; 0x01
    276c:	c5 52       	subi	r28, 0x25	; 37
    276e:	d1 40       	sbci	r29, 0x01	; 1
    2770:	e4 30       	cpi	r30, 0x04	; 4
    2772:	f1 05       	cpc	r31, r1
    2774:	b1 f0       	breq	.+44     	; 0x27a2 <main+0x8a0>
    2776:	f6 c4       	rjmp	.+2540   	; 0x3164 <main+0x1262>
    2778:	cb 5d       	subi	r28, 0xDB	; 219
    277a:	de 4f       	sbci	r29, 0xFE	; 254
    277c:	28 81       	ld	r18, Y
    277e:	39 81       	ldd	r19, Y+1	; 0x01
    2780:	c5 52       	subi	r28, 0x25	; 37
    2782:	d1 40       	sbci	r29, 0x01	; 1
    2784:	2c 30       	cpi	r18, 0x0C	; 12
    2786:	31 05       	cpc	r19, r1
    2788:	09 f4       	brne	.+2      	; 0x278c <main+0x88a>
    278a:	2f c2       	rjmp	.+1118   	; 0x2bea <main+0xce8>
    278c:	cb 5d       	subi	r28, 0xDB	; 219
    278e:	de 4f       	sbci	r29, 0xFE	; 254
    2790:	48 81       	ld	r20, Y
    2792:	59 81       	ldd	r21, Y+1	; 0x01
    2794:	c5 52       	subi	r28, 0x25	; 37
    2796:	d1 40       	sbci	r29, 0x01	; 1
    2798:	40 31       	cpi	r20, 0x10	; 16
    279a:	51 05       	cpc	r21, r1
    279c:	09 f4       	brne	.+2      	; 0x27a0 <main+0x89e>
    279e:	00 c4       	rjmp	.+2048   	; 0x2fa0 <main+0x109e>
    27a0:	e1 c4       	rjmp	.+2498   	; 0x3164 <main+0x1262>
			{

			//division
			case 4 :
				//division value
				result=(float)num1/num2;
    27a2:	fe 01       	movw	r30, r28
    27a4:	e9 5e       	subi	r30, 0xE9	; 233
    27a6:	fe 4f       	sbci	r31, 0xFE	; 254
    27a8:	80 81       	ld	r24, Z
    27aa:	88 2f       	mov	r24, r24
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	a0 e0       	ldi	r26, 0x00	; 0
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	bc 01       	movw	r22, r24
    27b4:	cd 01       	movw	r24, r26
    27b6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    27ba:	7b 01       	movw	r14, r22
    27bc:	8c 01       	movw	r16, r24
    27be:	fe 01       	movw	r30, r28
    27c0:	ea 5e       	subi	r30, 0xEA	; 234
    27c2:	fe 4f       	sbci	r31, 0xFE	; 254
    27c4:	80 81       	ld	r24, Z
    27c6:	88 2f       	mov	r24, r24
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	aa 27       	eor	r26, r26
    27cc:	97 fd       	sbrc	r25, 7
    27ce:	a0 95       	com	r26
    27d0:	ba 2f       	mov	r27, r26
    27d2:	bc 01       	movw	r22, r24
    27d4:	cd 01       	movw	r24, r26
    27d6:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    27da:	9b 01       	movw	r18, r22
    27dc:	ac 01       	movw	r20, r24
    27de:	0f 2e       	mov	r0, r31
    27e0:	f0 e1       	ldi	r31, 0x10	; 16
    27e2:	cf 2e       	mov	r12, r31
    27e4:	f1 e0       	ldi	r31, 0x01	; 1
    27e6:	df 2e       	mov	r13, r31
    27e8:	f0 2d       	mov	r31, r0
    27ea:	cc 0e       	add	r12, r28
    27ec:	dd 1e       	adc	r13, r29
    27ee:	c8 01       	movw	r24, r16
    27f0:	b7 01       	movw	r22, r14
    27f2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	f6 01       	movw	r30, r12
    27fc:	80 83       	st	Z, r24
    27fe:	91 83       	std	Z+1, r25	; 0x01
    2800:	a2 83       	std	Z+2, r26	; 0x02
    2802:	b3 83       	std	Z+3, r27	; 0x03
				// get the value after decimal point
				div=(result - (int)result)*100;
    2804:	fe 01       	movw	r30, r28
    2806:	e0 5f       	subi	r30, 0xF0	; 240
    2808:	fe 4f       	sbci	r31, 0xFE	; 254
    280a:	60 81       	ld	r22, Z
    280c:	71 81       	ldd	r23, Z+1	; 0x01
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	93 81       	ldd	r25, Z+3	; 0x03
    2812:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	aa 27       	eor	r26, r26
    281c:	97 fd       	sbrc	r25, 7
    281e:	a0 95       	com	r26
    2820:	ba 2f       	mov	r27, r26
    2822:	bc 01       	movw	r22, r24
    2824:	cd 01       	movw	r24, r26
    2826:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    282a:	9b 01       	movw	r18, r22
    282c:	ac 01       	movw	r20, r24
    282e:	fe 01       	movw	r30, r28
    2830:	e0 5f       	subi	r30, 0xF0	; 240
    2832:	fe 4f       	sbci	r31, 0xFE	; 254
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	8e 01       	movw	r16, r28
    2846:	04 5f       	subi	r16, 0xF4	; 244
    2848:	1e 4f       	sbci	r17, 0xFE	; 254
    284a:	bc 01       	movw	r22, r24
    284c:	cd 01       	movw	r24, r26
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	48 ec       	ldi	r20, 0xC8	; 200
    2854:	52 e4       	ldi	r21, 0x42	; 66
    2856:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	f8 01       	movw	r30, r16
    2860:	80 83       	st	Z, r24
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	a2 83       	std	Z+2, r26	; 0x02
    2866:	b3 83       	std	Z+3, r27	; 0x03
				//send the integer value
				CLCD_voidSendNum(result);
    2868:	fe 01       	movw	r30, r28
    286a:	e0 5f       	subi	r30, 0xF0	; 240
    286c:	fe 4f       	sbci	r31, 0xFE	; 254
    286e:	60 81       	ld	r22, Z
    2870:	71 81       	ldd	r23, Z+1	; 0x01
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
				// send the decimal point
				CLCD_voidSendString(".");
    2886:	84 e7       	ldi	r24, 0x74	; 116
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	0e 94 8d 0a 	call	0x151a	; 0x151a <CLCD_voidSendString>
				// send the friction value
				CLCD_voidSendNum(div);
    288e:	fe 01       	movw	r30, r28
    2890:	e4 5f       	subi	r30, 0xF4	; 244
    2892:	fe 4f       	sbci	r31, 0xFE	; 254
    2894:	60 81       	ld	r22, Z
    2896:	71 81       	ldd	r23, Z+1	; 0x01
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    28ac:	fe 01       	movw	r30, r28
    28ae:	e1 53       	subi	r30, 0x31	; 49
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a0 e8       	ldi	r26, 0x80	; 128
    28b8:	bf e3       	ldi	r27, 0x3F	; 63
    28ba:	80 83       	st	Z, r24
    28bc:	91 83       	std	Z+1, r25	; 0x01
    28be:	a2 83       	std	Z+2, r26	; 0x02
    28c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c2:	8e 01       	movw	r16, r28
    28c4:	05 53       	subi	r16, 0x35	; 53
    28c6:	1f 4f       	sbci	r17, 0xFF	; 255
    28c8:	fe 01       	movw	r30, r28
    28ca:	e1 53       	subi	r30, 0x31	; 49
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	60 81       	ld	r22, Z
    28d0:	71 81       	ldd	r23, Z+1	; 0x01
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	93 81       	ldd	r25, Z+3	; 0x03
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	4a ef       	ldi	r20, 0xFA	; 250
    28dc:	54 e4       	ldi	r21, 0x44	; 68
    28de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	f8 01       	movw	r30, r16
    28e8:	80 83       	st	Z, r24
    28ea:	91 83       	std	Z+1, r25	; 0x01
    28ec:	a2 83       	std	Z+2, r26	; 0x02
    28ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28f0:	fe 01       	movw	r30, r28
    28f2:	e5 53       	subi	r30, 0x35	; 53
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	60 81       	ld	r22, Z
    28f8:	71 81       	ldd	r23, Z+1	; 0x01
    28fa:	82 81       	ldd	r24, Z+2	; 0x02
    28fc:	93 81       	ldd	r25, Z+3	; 0x03
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e8       	ldi	r20, 0x80	; 128
    2904:	5f e3       	ldi	r21, 0x3F	; 63
    2906:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    290a:	88 23       	and	r24, r24
    290c:	44 f4       	brge	.+16     	; 0x291e <main+0xa1c>
		__ticks = 1;
    290e:	fe 01       	movw	r30, r28
    2910:	e7 53       	subi	r30, 0x37	; 55
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	91 83       	std	Z+1, r25	; 0x01
    291a:	80 83       	st	Z, r24
    291c:	64 c0       	rjmp	.+200    	; 0x29e6 <main+0xae4>
	else if (__tmp > 65535)
    291e:	fe 01       	movw	r30, r28
    2920:	e5 53       	subi	r30, 0x35	; 53
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	60 81       	ld	r22, Z
    2926:	71 81       	ldd	r23, Z+1	; 0x01
    2928:	82 81       	ldd	r24, Z+2	; 0x02
    292a:	93 81       	ldd	r25, Z+3	; 0x03
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	3f ef       	ldi	r19, 0xFF	; 255
    2930:	4f e7       	ldi	r20, 0x7F	; 127
    2932:	57 e4       	ldi	r21, 0x47	; 71
    2934:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2938:	18 16       	cp	r1, r24
    293a:	0c f0       	brlt	.+2      	; 0x293e <main+0xa3c>
    293c:	43 c0       	rjmp	.+134    	; 0x29c4 <main+0xac2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293e:	fe 01       	movw	r30, r28
    2940:	e1 53       	subi	r30, 0x31	; 49
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	60 81       	ld	r22, Z
    2946:	71 81       	ldd	r23, Z+1	; 0x01
    2948:	82 81       	ldd	r24, Z+2	; 0x02
    294a:	93 81       	ldd	r25, Z+3	; 0x03
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e2       	ldi	r20, 0x20	; 32
    2952:	51 e4       	ldi	r21, 0x41	; 65
    2954:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	8e 01       	movw	r16, r28
    295e:	07 53       	subi	r16, 0x37	; 55
    2960:	1f 4f       	sbci	r17, 0xFF	; 255
    2962:	bc 01       	movw	r22, r24
    2964:	cd 01       	movw	r24, r26
    2966:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	f8 01       	movw	r30, r16
    2970:	91 83       	std	Z+1, r25	; 0x01
    2972:	80 83       	st	Z, r24
    2974:	1f c0       	rjmp	.+62     	; 0x29b4 <main+0xab2>
    2976:	fe 01       	movw	r30, r28
    2978:	e9 53       	subi	r30, 0x39	; 57
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	88 ec       	ldi	r24, 0xC8	; 200
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	91 83       	std	Z+1, r25	; 0x01
    2982:	80 83       	st	Z, r24
    2984:	fe 01       	movw	r30, r28
    2986:	e9 53       	subi	r30, 0x39	; 57
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	80 81       	ld	r24, Z
    298c:	91 81       	ldd	r25, Z+1	; 0x01
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <main+0xa8c>
    2992:	fe 01       	movw	r30, r28
    2994:	e9 53       	subi	r30, 0x39	; 57
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	91 83       	std	Z+1, r25	; 0x01
    299a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299c:	de 01       	movw	r26, r28
    299e:	a7 53       	subi	r26, 0x37	; 55
    29a0:	bf 4f       	sbci	r27, 0xFF	; 255
    29a2:	fe 01       	movw	r30, r28
    29a4:	e7 53       	subi	r30, 0x37	; 55
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	80 81       	ld	r24, Z
    29aa:	91 81       	ldd	r25, Z+1	; 0x01
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	11 96       	adiw	r26, 0x01	; 1
    29b0:	9c 93       	st	X, r25
    29b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b4:	fe 01       	movw	r30, r28
    29b6:	e7 53       	subi	r30, 0x37	; 55
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	80 81       	ld	r24, Z
    29bc:	91 81       	ldd	r25, Z+1	; 0x01
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	d1 f6       	brne	.-76     	; 0x2976 <main+0xa74>
    29c2:	d0 c3       	rjmp	.+1952   	; 0x3164 <main+0x1262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c4:	8e 01       	movw	r16, r28
    29c6:	07 53       	subi	r16, 0x37	; 55
    29c8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ca:	fe 01       	movw	r30, r28
    29cc:	e5 53       	subi	r30, 0x35	; 53
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	60 81       	ld	r22, Z
    29d2:	71 81       	ldd	r23, Z+1	; 0x01
    29d4:	82 81       	ldd	r24, Z+2	; 0x02
    29d6:	93 81       	ldd	r25, Z+3	; 0x03
    29d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	f8 01       	movw	r30, r16
    29e2:	91 83       	std	Z+1, r25	; 0x01
    29e4:	80 83       	st	Z, r24
    29e6:	de 01       	movw	r26, r28
    29e8:	ab 53       	subi	r26, 0x3B	; 59
    29ea:	bf 4f       	sbci	r27, 0xFF	; 255
    29ec:	fe 01       	movw	r30, r28
    29ee:	e7 53       	subi	r30, 0x37	; 55
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	80 81       	ld	r24, Z
    29f4:	91 81       	ldd	r25, Z+1	; 0x01
    29f6:	11 96       	adiw	r26, 0x01	; 1
    29f8:	9c 93       	st	X, r25
    29fa:	8e 93       	st	-X, r24
    29fc:	fe 01       	movw	r30, r28
    29fe:	eb 53       	subi	r30, 0x3B	; 59
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	80 81       	ld	r24, Z
    2a04:	91 81       	ldd	r25, Z+1	; 0x01
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <main+0xb04>
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	eb 53       	subi	r30, 0x3B	; 59
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	91 83       	std	Z+1, r25	; 0x01
    2a12:	80 83       	st	Z, r24
    2a14:	a7 c3       	rjmp	.+1870   	; 0x3164 <main+0x1262>
				_delay_ms(1);
				break;

				//multiply
			case 8 :
				result=num1*num2;
    2a16:	fe 01       	movw	r30, r28
    2a18:	e9 5e       	subi	r30, 0xE9	; 233
    2a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1c:	80 81       	ld	r24, Z
    2a1e:	28 2f       	mov	r18, r24
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	fe 01       	movw	r30, r28
    2a24:	ea 5e       	subi	r30, 0xEA	; 234
    2a26:	fe 4f       	sbci	r31, 0xFE	; 254
    2a28:	80 81       	ld	r24, Z
    2a2a:	88 2f       	mov	r24, r24
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	ac 01       	movw	r20, r24
    2a30:	24 9f       	mul	r18, r20
    2a32:	c0 01       	movw	r24, r0
    2a34:	25 9f       	mul	r18, r21
    2a36:	90 0d       	add	r25, r0
    2a38:	34 9f       	mul	r19, r20
    2a3a:	90 0d       	add	r25, r0
    2a3c:	11 24       	eor	r1, r1
    2a3e:	8e 01       	movw	r16, r28
    2a40:	00 5f       	subi	r16, 0xF0	; 240
    2a42:	1e 4f       	sbci	r17, 0xFE	; 254
    2a44:	aa 27       	eor	r26, r26
    2a46:	97 fd       	sbrc	r25, 7
    2a48:	a0 95       	com	r26
    2a4a:	ba 2f       	mov	r27, r26
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	cd 01       	movw	r24, r26
    2a50:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	f8 01       	movw	r30, r16
    2a5a:	80 83       	st	Z, r24
    2a5c:	91 83       	std	Z+1, r25	; 0x01
    2a5e:	a2 83       	std	Z+2, r26	; 0x02
    2a60:	b3 83       	std	Z+3, r27	; 0x03
				CLCD_voidSendNum(result);
    2a62:	fe 01       	movw	r30, r28
    2a64:	e0 5f       	subi	r30, 0xF0	; 240
    2a66:	fe 4f       	sbci	r31, 0xFE	; 254
    2a68:	60 81       	ld	r22, Z
    2a6a:	71 81       	ldd	r23, Z+1	; 0x01
    2a6c:	82 81       	ldd	r24, Z+2	; 0x02
    2a6e:	93 81       	ldd	r25, Z+3	; 0x03
    2a70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	bc 01       	movw	r22, r24
    2a7a:	cd 01       	movw	r24, r26
    2a7c:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    2a80:	fe 01       	movw	r30, r28
    2a82:	ef 53       	subi	r30, 0x3F	; 63
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 e8       	ldi	r26, 0x80	; 128
    2a8c:	bf e3       	ldi	r27, 0x3F	; 63
    2a8e:	80 83       	st	Z, r24
    2a90:	91 83       	std	Z+1, r25	; 0x01
    2a92:	a2 83       	std	Z+2, r26	; 0x02
    2a94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a96:	8e 01       	movw	r16, r28
    2a98:	03 54       	subi	r16, 0x43	; 67
    2a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ef 53       	subi	r30, 0x3F	; 63
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	4a ef       	ldi	r20, 0xFA	; 250
    2ab0:	54 e4       	ldi	r21, 0x44	; 68
    2ab2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	f8 01       	movw	r30, r16
    2abc:	80 83       	st	Z, r24
    2abe:	91 83       	std	Z+1, r25	; 0x01
    2ac0:	a2 83       	std	Z+2, r26	; 0x02
    2ac2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	e3 54       	subi	r30, 0x43	; 67
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	60 81       	ld	r22, Z
    2acc:	71 81       	ldd	r23, Z+1	; 0x01
    2ace:	82 81       	ldd	r24, Z+2	; 0x02
    2ad0:	93 81       	ldd	r25, Z+3	; 0x03
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e8       	ldi	r20, 0x80	; 128
    2ad8:	5f e3       	ldi	r21, 0x3F	; 63
    2ada:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ade:	88 23       	and	r24, r24
    2ae0:	44 f4       	brge	.+16     	; 0x2af2 <main+0xbf0>
		__ticks = 1;
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e5 54       	subi	r30, 0x45	; 69
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	91 83       	std	Z+1, r25	; 0x01
    2aee:	80 83       	st	Z, r24
    2af0:	64 c0       	rjmp	.+200    	; 0x2bba <main+0xcb8>
	else if (__tmp > 65535)
    2af2:	fe 01       	movw	r30, r28
    2af4:	e3 54       	subi	r30, 0x43	; 67
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	60 81       	ld	r22, Z
    2afa:	71 81       	ldd	r23, Z+1	; 0x01
    2afc:	82 81       	ldd	r24, Z+2	; 0x02
    2afe:	93 81       	ldd	r25, Z+3	; 0x03
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	3f ef       	ldi	r19, 0xFF	; 255
    2b04:	4f e7       	ldi	r20, 0x7F	; 127
    2b06:	57 e4       	ldi	r21, 0x47	; 71
    2b08:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b0c:	18 16       	cp	r1, r24
    2b0e:	0c f0       	brlt	.+2      	; 0x2b12 <main+0xc10>
    2b10:	43 c0       	rjmp	.+134    	; 0x2b98 <main+0xc96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b12:	fe 01       	movw	r30, r28
    2b14:	ef 53       	subi	r30, 0x3F	; 63
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	60 81       	ld	r22, Z
    2b1a:	71 81       	ldd	r23, Z+1	; 0x01
    2b1c:	82 81       	ldd	r24, Z+2	; 0x02
    2b1e:	93 81       	ldd	r25, Z+3	; 0x03
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 e2       	ldi	r20, 0x20	; 32
    2b26:	51 e4       	ldi	r21, 0x41	; 65
    2b28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	8e 01       	movw	r16, r28
    2b32:	05 54       	subi	r16, 0x45	; 69
    2b34:	1f 4f       	sbci	r17, 0xFF	; 255
    2b36:	bc 01       	movw	r22, r24
    2b38:	cd 01       	movw	r24, r26
    2b3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	f8 01       	movw	r30, r16
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	80 83       	st	Z, r24
    2b48:	1f c0       	rjmp	.+62     	; 0x2b88 <main+0xc86>
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e7 54       	subi	r30, 0x47	; 71
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	88 ec       	ldi	r24, 0xC8	; 200
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	91 83       	std	Z+1, r25	; 0x01
    2b56:	80 83       	st	Z, r24
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e7 54       	subi	r30, 0x47	; 71
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	80 81       	ld	r24, Z
    2b60:	91 81       	ldd	r25, Z+1	; 0x01
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <main+0xc60>
    2b66:	fe 01       	movw	r30, r28
    2b68:	e7 54       	subi	r30, 0x47	; 71
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	91 83       	std	Z+1, r25	; 0x01
    2b6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b70:	de 01       	movw	r26, r28
    2b72:	a5 54       	subi	r26, 0x45	; 69
    2b74:	bf 4f       	sbci	r27, 0xFF	; 255
    2b76:	fe 01       	movw	r30, r28
    2b78:	e5 54       	subi	r30, 0x45	; 69
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	91 81       	ldd	r25, Z+1	; 0x01
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	11 96       	adiw	r26, 0x01	; 1
    2b84:	9c 93       	st	X, r25
    2b86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e5 54       	subi	r30, 0x45	; 69
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	80 81       	ld	r24, Z
    2b90:	91 81       	ldd	r25, Z+1	; 0x01
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	d1 f6       	brne	.-76     	; 0x2b4a <main+0xc48>
    2b96:	e6 c2       	rjmp	.+1484   	; 0x3164 <main+0x1262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b98:	8e 01       	movw	r16, r28
    2b9a:	05 54       	subi	r16, 0x45	; 69
    2b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	e3 54       	subi	r30, 0x43	; 67
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	60 81       	ld	r22, Z
    2ba6:	71 81       	ldd	r23, Z+1	; 0x01
    2ba8:	82 81       	ldd	r24, Z+2	; 0x02
    2baa:	93 81       	ldd	r25, Z+3	; 0x03
    2bac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	f8 01       	movw	r30, r16
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	80 83       	st	Z, r24
    2bba:	de 01       	movw	r26, r28
    2bbc:	a9 54       	subi	r26, 0x49	; 73
    2bbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e5 54       	subi	r30, 0x45	; 69
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	80 81       	ld	r24, Z
    2bc8:	91 81       	ldd	r25, Z+1	; 0x01
    2bca:	11 96       	adiw	r26, 0x01	; 1
    2bcc:	9c 93       	st	X, r25
    2bce:	8e 93       	st	-X, r24
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e9 54       	subi	r30, 0x49	; 73
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	80 81       	ld	r24, Z
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <main+0xcd8>
    2bde:	fe 01       	movw	r30, r28
    2be0:	e9 54       	subi	r30, 0x49	; 73
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	91 83       	std	Z+1, r25	; 0x01
    2be6:	80 83       	st	Z, r24
    2be8:	bd c2       	rjmp	.+1402   	; 0x3164 <main+0x1262>
				break;

				//Subtract
			case 12:
				// positive answer
				if(num1>num2)
    2bea:	fe 01       	movw	r30, r28
    2bec:	e9 5e       	subi	r30, 0xE9	; 233
    2bee:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf0:	de 01       	movw	r26, r28
    2bf2:	aa 5e       	subi	r26, 0xEA	; 234
    2bf4:	be 4f       	sbci	r27, 0xFE	; 254
    2bf6:	90 81       	ld	r25, Z
    2bf8:	8c 91       	ld	r24, X
    2bfa:	89 17       	cp	r24, r25
    2bfc:	08 f0       	brcs	.+2      	; 0x2c00 <main+0xcfe>
    2bfe:	e6 c0       	rjmp	.+460    	; 0x2dcc <main+0xeca>
				{
					result=num1-num2;
    2c00:	fe 01       	movw	r30, r28
    2c02:	e9 5e       	subi	r30, 0xE9	; 233
    2c04:	fe 4f       	sbci	r31, 0xFE	; 254
    2c06:	80 81       	ld	r24, Z
    2c08:	28 2f       	mov	r18, r24
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	ea 5e       	subi	r30, 0xEA	; 234
    2c10:	fe 4f       	sbci	r31, 0xFE	; 254
    2c12:	80 81       	ld	r24, Z
    2c14:	88 2f       	mov	r24, r24
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	a9 01       	movw	r20, r18
    2c1a:	48 1b       	sub	r20, r24
    2c1c:	59 0b       	sbc	r21, r25
    2c1e:	ca 01       	movw	r24, r20
    2c20:	8e 01       	movw	r16, r28
    2c22:	00 5f       	subi	r16, 0xF0	; 240
    2c24:	1e 4f       	sbci	r17, 0xFE	; 254
    2c26:	aa 27       	eor	r26, r26
    2c28:	97 fd       	sbrc	r25, 7
    2c2a:	a0 95       	com	r26
    2c2c:	ba 2f       	mov	r27, r26
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	f8 01       	movw	r30, r16
    2c3c:	80 83       	st	Z, r24
    2c3e:	91 83       	std	Z+1, r25	; 0x01
    2c40:	a2 83       	std	Z+2, r26	; 0x02
    2c42:	b3 83       	std	Z+3, r27	; 0x03
					CLCD_voidSendNum(result);
    2c44:	fe 01       	movw	r30, r28
    2c46:	e0 5f       	subi	r30, 0xF0	; 240
    2c48:	fe 4f       	sbci	r31, 0xFE	; 254
    2c4a:	60 81       	ld	r22, Z
    2c4c:	71 81       	ldd	r23, Z+1	; 0x01
    2c4e:	82 81       	ldd	r24, Z+2	; 0x02
    2c50:	93 81       	ldd	r25, Z+3	; 0x03
    2c52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	cd 01       	movw	r24, r26
    2c5e:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    2c62:	fe 01       	movw	r30, r28
    2c64:	ed 54       	subi	r30, 0x4D	; 77
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	a0 e8       	ldi	r26, 0x80	; 128
    2c6e:	bf e3       	ldi	r27, 0x3F	; 63
    2c70:	80 83       	st	Z, r24
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	a2 83       	std	Z+2, r26	; 0x02
    2c76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c78:	8e 01       	movw	r16, r28
    2c7a:	01 55       	subi	r16, 0x51	; 81
    2c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7e:	fe 01       	movw	r30, r28
    2c80:	ed 54       	subi	r30, 0x4D	; 77
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	60 81       	ld	r22, Z
    2c86:	71 81       	ldd	r23, Z+1	; 0x01
    2c88:	82 81       	ldd	r24, Z+2	; 0x02
    2c8a:	93 81       	ldd	r25, Z+3	; 0x03
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	4a ef       	ldi	r20, 0xFA	; 250
    2c92:	54 e4       	ldi	r21, 0x44	; 68
    2c94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	f8 01       	movw	r30, r16
    2c9e:	80 83       	st	Z, r24
    2ca0:	91 83       	std	Z+1, r25	; 0x01
    2ca2:	a2 83       	std	Z+2, r26	; 0x02
    2ca4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e1 55       	subi	r30, 0x51	; 81
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	60 81       	ld	r22, Z
    2cae:	71 81       	ldd	r23, Z+1	; 0x01
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e8       	ldi	r20, 0x80	; 128
    2cba:	5f e3       	ldi	r21, 0x3F	; 63
    2cbc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2cc0:	88 23       	and	r24, r24
    2cc2:	44 f4       	brge	.+16     	; 0x2cd4 <main+0xdd2>
		__ticks = 1;
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e3 55       	subi	r30, 0x53	; 83
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	91 83       	std	Z+1, r25	; 0x01
    2cd0:	80 83       	st	Z, r24
    2cd2:	64 c0       	rjmp	.+200    	; 0x2d9c <main+0xe9a>
	else if (__tmp > 65535)
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	e1 55       	subi	r30, 0x51	; 81
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	60 81       	ld	r22, Z
    2cdc:	71 81       	ldd	r23, Z+1	; 0x01
    2cde:	82 81       	ldd	r24, Z+2	; 0x02
    2ce0:	93 81       	ldd	r25, Z+3	; 0x03
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	3f ef       	ldi	r19, 0xFF	; 255
    2ce6:	4f e7       	ldi	r20, 0x7F	; 127
    2ce8:	57 e4       	ldi	r21, 0x47	; 71
    2cea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2cee:	18 16       	cp	r1, r24
    2cf0:	0c f0       	brlt	.+2      	; 0x2cf4 <main+0xdf2>
    2cf2:	43 c0       	rjmp	.+134    	; 0x2d7a <main+0xe78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	ed 54       	subi	r30, 0x4D	; 77
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	60 81       	ld	r22, Z
    2cfc:	71 81       	ldd	r23, Z+1	; 0x01
    2cfe:	82 81       	ldd	r24, Z+2	; 0x02
    2d00:	93 81       	ldd	r25, Z+3	; 0x03
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	40 e2       	ldi	r20, 0x20	; 32
    2d08:	51 e4       	ldi	r21, 0x41	; 65
    2d0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	8e 01       	movw	r16, r28
    2d14:	03 55       	subi	r16, 0x53	; 83
    2d16:	1f 4f       	sbci	r17, 0xFF	; 255
    2d18:	bc 01       	movw	r22, r24
    2d1a:	cd 01       	movw	r24, r26
    2d1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	f8 01       	movw	r30, r16
    2d26:	91 83       	std	Z+1, r25	; 0x01
    2d28:	80 83       	st	Z, r24
    2d2a:	1f c0       	rjmp	.+62     	; 0x2d6a <main+0xe68>
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	e5 55       	subi	r30, 0x55	; 85
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	88 ec       	ldi	r24, 0xC8	; 200
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	91 83       	std	Z+1, r25	; 0x01
    2d38:	80 83       	st	Z, r24
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e5 55       	subi	r30, 0x55	; 85
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 81       	ld	r24, Z
    2d42:	91 81       	ldd	r25, Z+1	; 0x01
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	f1 f7       	brne	.-4      	; 0x2d44 <main+0xe42>
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e5 55       	subi	r30, 0x55	; 85
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	91 83       	std	Z+1, r25	; 0x01
    2d50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d52:	de 01       	movw	r26, r28
    2d54:	a3 55       	subi	r26, 0x53	; 83
    2d56:	bf 4f       	sbci	r27, 0xFF	; 255
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e3 55       	subi	r30, 0x53	; 83
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	80 81       	ld	r24, Z
    2d60:	91 81       	ldd	r25, Z+1	; 0x01
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	11 96       	adiw	r26, 0x01	; 1
    2d66:	9c 93       	st	X, r25
    2d68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e3 55       	subi	r30, 0x53	; 83
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	80 81       	ld	r24, Z
    2d72:	91 81       	ldd	r25, Z+1	; 0x01
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	d1 f6       	brne	.-76     	; 0x2d2c <main+0xe2a>
    2d78:	f5 c1       	rjmp	.+1002   	; 0x3164 <main+0x1262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7a:	8e 01       	movw	r16, r28
    2d7c:	03 55       	subi	r16, 0x53	; 83
    2d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d80:	fe 01       	movw	r30, r28
    2d82:	e1 55       	subi	r30, 0x51	; 81
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	60 81       	ld	r22, Z
    2d88:	71 81       	ldd	r23, Z+1	; 0x01
    2d8a:	82 81       	ldd	r24, Z+2	; 0x02
    2d8c:	93 81       	ldd	r25, Z+3	; 0x03
    2d8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	f8 01       	movw	r30, r16
    2d98:	91 83       	std	Z+1, r25	; 0x01
    2d9a:	80 83       	st	Z, r24
    2d9c:	de 01       	movw	r26, r28
    2d9e:	a7 55       	subi	r26, 0x57	; 87
    2da0:	bf 4f       	sbci	r27, 0xFF	; 255
    2da2:	fe 01       	movw	r30, r28
    2da4:	e3 55       	subi	r30, 0x53	; 83
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	80 81       	ld	r24, Z
    2daa:	91 81       	ldd	r25, Z+1	; 0x01
    2dac:	11 96       	adiw	r26, 0x01	; 1
    2dae:	9c 93       	st	X, r25
    2db0:	8e 93       	st	-X, r24
    2db2:	fe 01       	movw	r30, r28
    2db4:	e7 55       	subi	r30, 0x57	; 87
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	80 81       	ld	r24, Z
    2dba:	91 81       	ldd	r25, Z+1	; 0x01
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <main+0xeba>
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	e7 55       	subi	r30, 0x57	; 87
    2dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc6:	91 83       	std	Z+1, r25	; 0x01
    2dc8:	80 83       	st	Z, r24
    2dca:	cc c1       	rjmp	.+920    	; 0x3164 <main+0x1262>
					break;
				}
				// negative answer
				else
				{
					result=num2-num1;
    2dcc:	fe 01       	movw	r30, r28
    2dce:	ea 5e       	subi	r30, 0xEA	; 234
    2dd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd2:	80 81       	ld	r24, Z
    2dd4:	28 2f       	mov	r18, r24
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	fe 01       	movw	r30, r28
    2dda:	e9 5e       	subi	r30, 0xE9	; 233
    2ddc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dde:	80 81       	ld	r24, Z
    2de0:	88 2f       	mov	r24, r24
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	a9 01       	movw	r20, r18
    2de6:	48 1b       	sub	r20, r24
    2de8:	59 0b       	sbc	r21, r25
    2dea:	ca 01       	movw	r24, r20
    2dec:	8e 01       	movw	r16, r28
    2dee:	00 5f       	subi	r16, 0xF0	; 240
    2df0:	1e 4f       	sbci	r17, 0xFE	; 254
    2df2:	aa 27       	eor	r26, r26
    2df4:	97 fd       	sbrc	r25, 7
    2df6:	a0 95       	com	r26
    2df8:	ba 2f       	mov	r27, r26
    2dfa:	bc 01       	movw	r22, r24
    2dfc:	cd 01       	movw	r24, r26
    2dfe:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	f8 01       	movw	r30, r16
    2e08:	80 83       	st	Z, r24
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	a2 83       	std	Z+2, r26	; 0x02
    2e0e:	b3 83       	std	Z+3, r27	; 0x03
					CLCD_voidSendString("-");
    2e10:	86 e7       	ldi	r24, 0x76	; 118
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	0e 94 8d 0a 	call	0x151a	; 0x151a <CLCD_voidSendString>
					CLCD_voidSendNum(result);
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e0 5f       	subi	r30, 0xF0	; 240
    2e1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1e:	60 81       	ld	r22, Z
    2e20:	71 81       	ldd	r23, Z+1	; 0x01
    2e22:	82 81       	ldd	r24, Z+2	; 0x02
    2e24:	93 81       	ldd	r25, Z+3	; 0x03
    2e26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	bc 01       	movw	r22, r24
    2e30:	cd 01       	movw	r24, r26
    2e32:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    2e36:	fe 01       	movw	r30, r28
    2e38:	eb 55       	subi	r30, 0x5B	; 91
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	a0 e8       	ldi	r26, 0x80	; 128
    2e42:	bf e3       	ldi	r27, 0x3F	; 63
    2e44:	80 83       	st	Z, r24
    2e46:	91 83       	std	Z+1, r25	; 0x01
    2e48:	a2 83       	std	Z+2, r26	; 0x02
    2e4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4c:	8e 01       	movw	r16, r28
    2e4e:	0f 55       	subi	r16, 0x5F	; 95
    2e50:	1f 4f       	sbci	r17, 0xFF	; 255
    2e52:	fe 01       	movw	r30, r28
    2e54:	eb 55       	subi	r30, 0x5B	; 91
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	60 81       	ld	r22, Z
    2e5a:	71 81       	ldd	r23, Z+1	; 0x01
    2e5c:	82 81       	ldd	r24, Z+2	; 0x02
    2e5e:	93 81       	ldd	r25, Z+3	; 0x03
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	4a ef       	ldi	r20, 0xFA	; 250
    2e66:	54 e4       	ldi	r21, 0x44	; 68
    2e68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	f8 01       	movw	r30, r16
    2e72:	80 83       	st	Z, r24
    2e74:	91 83       	std	Z+1, r25	; 0x01
    2e76:	a2 83       	std	Z+2, r26	; 0x02
    2e78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	ef 55       	subi	r30, 0x5F	; 95
    2e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e80:	60 81       	ld	r22, Z
    2e82:	71 81       	ldd	r23, Z+1	; 0x01
    2e84:	82 81       	ldd	r24, Z+2	; 0x02
    2e86:	93 81       	ldd	r25, Z+3	; 0x03
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e8       	ldi	r20, 0x80	; 128
    2e8e:	5f e3       	ldi	r21, 0x3F	; 63
    2e90:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e94:	88 23       	and	r24, r24
    2e96:	44 f4       	brge	.+16     	; 0x2ea8 <main+0xfa6>
		__ticks = 1;
    2e98:	fe 01       	movw	r30, r28
    2e9a:	e1 56       	subi	r30, 0x61	; 97
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	80 83       	st	Z, r24
    2ea6:	64 c0       	rjmp	.+200    	; 0x2f70 <main+0x106e>
	else if (__tmp > 65535)
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	ef 55       	subi	r30, 0x5F	; 95
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	60 81       	ld	r22, Z
    2eb0:	71 81       	ldd	r23, Z+1	; 0x01
    2eb2:	82 81       	ldd	r24, Z+2	; 0x02
    2eb4:	93 81       	ldd	r25, Z+3	; 0x03
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	3f ef       	ldi	r19, 0xFF	; 255
    2eba:	4f e7       	ldi	r20, 0x7F	; 127
    2ebc:	57 e4       	ldi	r21, 0x47	; 71
    2ebe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ec2:	18 16       	cp	r1, r24
    2ec4:	0c f0       	brlt	.+2      	; 0x2ec8 <main+0xfc6>
    2ec6:	43 c0       	rjmp	.+134    	; 0x2f4e <main+0x104c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec8:	fe 01       	movw	r30, r28
    2eca:	eb 55       	subi	r30, 0x5B	; 91
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	60 81       	ld	r22, Z
    2ed0:	71 81       	ldd	r23, Z+1	; 0x01
    2ed2:	82 81       	ldd	r24, Z+2	; 0x02
    2ed4:	93 81       	ldd	r25, Z+3	; 0x03
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	40 e2       	ldi	r20, 0x20	; 32
    2edc:	51 e4       	ldi	r21, 0x41	; 65
    2ede:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	8e 01       	movw	r16, r28
    2ee8:	01 56       	subi	r16, 0x61	; 97
    2eea:	1f 4f       	sbci	r17, 0xFF	; 255
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	f8 01       	movw	r30, r16
    2efa:	91 83       	std	Z+1, r25	; 0x01
    2efc:	80 83       	st	Z, r24
    2efe:	1f c0       	rjmp	.+62     	; 0x2f3e <main+0x103c>
    2f00:	fe 01       	movw	r30, r28
    2f02:	e3 56       	subi	r30, 0x63	; 99
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	88 ec       	ldi	r24, 0xC8	; 200
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	91 83       	std	Z+1, r25	; 0x01
    2f0c:	80 83       	st	Z, r24
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e3 56       	subi	r30, 0x63	; 99
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 81       	ld	r24, Z
    2f16:	91 81       	ldd	r25, Z+1	; 0x01
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	f1 f7       	brne	.-4      	; 0x2f18 <main+0x1016>
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	e3 56       	subi	r30, 0x63	; 99
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	91 83       	std	Z+1, r25	; 0x01
    2f24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f26:	de 01       	movw	r26, r28
    2f28:	a1 56       	subi	r26, 0x61	; 97
    2f2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e1 56       	subi	r30, 0x61	; 97
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	80 81       	ld	r24, Z
    2f34:	91 81       	ldd	r25, Z+1	; 0x01
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	11 96       	adiw	r26, 0x01	; 1
    2f3a:	9c 93       	st	X, r25
    2f3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e1 56       	subi	r30, 0x61	; 97
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	80 81       	ld	r24, Z
    2f46:	91 81       	ldd	r25, Z+1	; 0x01
    2f48:	00 97       	sbiw	r24, 0x00	; 0
    2f4a:	d1 f6       	brne	.-76     	; 0x2f00 <main+0xffe>
    2f4c:	0b c1       	rjmp	.+534    	; 0x3164 <main+0x1262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4e:	8e 01       	movw	r16, r28
    2f50:	01 56       	subi	r16, 0x61	; 97
    2f52:	1f 4f       	sbci	r17, 0xFF	; 255
    2f54:	fe 01       	movw	r30, r28
    2f56:	ef 55       	subi	r30, 0x5F	; 95
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	60 81       	ld	r22, Z
    2f5c:	71 81       	ldd	r23, Z+1	; 0x01
    2f5e:	82 81       	ldd	r24, Z+2	; 0x02
    2f60:	93 81       	ldd	r25, Z+3	; 0x03
    2f62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	f8 01       	movw	r30, r16
    2f6c:	91 83       	std	Z+1, r25	; 0x01
    2f6e:	80 83       	st	Z, r24
    2f70:	de 01       	movw	r26, r28
    2f72:	a5 56       	subi	r26, 0x65	; 101
    2f74:	bf 4f       	sbci	r27, 0xFF	; 255
    2f76:	fe 01       	movw	r30, r28
    2f78:	e1 56       	subi	r30, 0x61	; 97
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	80 81       	ld	r24, Z
    2f7e:	91 81       	ldd	r25, Z+1	; 0x01
    2f80:	11 96       	adiw	r26, 0x01	; 1
    2f82:	9c 93       	st	X, r25
    2f84:	8e 93       	st	-X, r24
    2f86:	fe 01       	movw	r30, r28
    2f88:	e5 56       	subi	r30, 0x65	; 101
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	80 81       	ld	r24, Z
    2f8e:	91 81       	ldd	r25, Z+1	; 0x01
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <main+0x108e>
    2f94:	fe 01       	movw	r30, r28
    2f96:	e5 56       	subi	r30, 0x65	; 101
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	91 83       	std	Z+1, r25	; 0x01
    2f9c:	80 83       	st	Z, r24
    2f9e:	e2 c0       	rjmp	.+452    	; 0x3164 <main+0x1262>
					break;
				}

				//Add
			case 16:
				result=num1+num2;
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	e9 5e       	subi	r30, 0xE9	; 233
    2fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa6:	80 81       	ld	r24, Z
    2fa8:	28 2f       	mov	r18, r24
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	fe 01       	movw	r30, r28
    2fae:	ea 5e       	subi	r30, 0xEA	; 234
    2fb0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb2:	80 81       	ld	r24, Z
    2fb4:	88 2f       	mov	r24, r24
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	82 0f       	add	r24, r18
    2fba:	93 1f       	adc	r25, r19
    2fbc:	8e 01       	movw	r16, r28
    2fbe:	00 5f       	subi	r16, 0xF0	; 240
    2fc0:	1e 4f       	sbci	r17, 0xFE	; 254
    2fc2:	aa 27       	eor	r26, r26
    2fc4:	97 fd       	sbrc	r25, 7
    2fc6:	a0 95       	com	r26
    2fc8:	ba 2f       	mov	r27, r26
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	f8 01       	movw	r30, r16
    2fd8:	80 83       	st	Z, r24
    2fda:	91 83       	std	Z+1, r25	; 0x01
    2fdc:	a2 83       	std	Z+2, r26	; 0x02
    2fde:	b3 83       	std	Z+3, r27	; 0x03
				CLCD_voidSendNum(result);
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	e0 5f       	subi	r30, 0xF0	; 240
    2fe4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe6:	60 81       	ld	r22, Z
    2fe8:	71 81       	ldd	r23, Z+1	; 0x01
    2fea:	82 81       	ldd	r24, Z+2	; 0x02
    2fec:	93 81       	ldd	r25, Z+3	; 0x03
    2fee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	bc 01       	movw	r22, r24
    2ff8:	cd 01       	movw	r24, r26
    2ffa:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    2ffe:	fe 01       	movw	r30, r28
    3000:	e9 56       	subi	r30, 0x69	; 105
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	a0 e8       	ldi	r26, 0x80	; 128
    300a:	bf e3       	ldi	r27, 0x3F	; 63
    300c:	80 83       	st	Z, r24
    300e:	91 83       	std	Z+1, r25	; 0x01
    3010:	a2 83       	std	Z+2, r26	; 0x02
    3012:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3014:	8e 01       	movw	r16, r28
    3016:	0d 56       	subi	r16, 0x6D	; 109
    3018:	1f 4f       	sbci	r17, 0xFF	; 255
    301a:	fe 01       	movw	r30, r28
    301c:	e9 56       	subi	r30, 0x69	; 105
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	60 81       	ld	r22, Z
    3022:	71 81       	ldd	r23, Z+1	; 0x01
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	93 81       	ldd	r25, Z+3	; 0x03
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	4a ef       	ldi	r20, 0xFA	; 250
    302e:	54 e4       	ldi	r21, 0x44	; 68
    3030:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	f8 01       	movw	r30, r16
    303a:	80 83       	st	Z, r24
    303c:	91 83       	std	Z+1, r25	; 0x01
    303e:	a2 83       	std	Z+2, r26	; 0x02
    3040:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3042:	fe 01       	movw	r30, r28
    3044:	ed 56       	subi	r30, 0x6D	; 109
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	60 81       	ld	r22, Z
    304a:	71 81       	ldd	r23, Z+1	; 0x01
    304c:	82 81       	ldd	r24, Z+2	; 0x02
    304e:	93 81       	ldd	r25, Z+3	; 0x03
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e8       	ldi	r20, 0x80	; 128
    3056:	5f e3       	ldi	r21, 0x3F	; 63
    3058:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    305c:	88 23       	and	r24, r24
    305e:	44 f4       	brge	.+16     	; 0x3070 <main+0x116e>
		__ticks = 1;
    3060:	fe 01       	movw	r30, r28
    3062:	ef 56       	subi	r30, 0x6F	; 111
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	91 83       	std	Z+1, r25	; 0x01
    306c:	80 83       	st	Z, r24
    306e:	64 c0       	rjmp	.+200    	; 0x3138 <main+0x1236>
	else if (__tmp > 65535)
    3070:	fe 01       	movw	r30, r28
    3072:	ed 56       	subi	r30, 0x6D	; 109
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	93 81       	ldd	r25, Z+3	; 0x03
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	3f ef       	ldi	r19, 0xFF	; 255
    3082:	4f e7       	ldi	r20, 0x7F	; 127
    3084:	57 e4       	ldi	r21, 0x47	; 71
    3086:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    308a:	18 16       	cp	r1, r24
    308c:	0c f0       	brlt	.+2      	; 0x3090 <main+0x118e>
    308e:	43 c0       	rjmp	.+134    	; 0x3116 <main+0x1214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3090:	fe 01       	movw	r30, r28
    3092:	e9 56       	subi	r30, 0x69	; 105
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	60 81       	ld	r22, Z
    3098:	71 81       	ldd	r23, Z+1	; 0x01
    309a:	82 81       	ldd	r24, Z+2	; 0x02
    309c:	93 81       	ldd	r25, Z+3	; 0x03
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e2       	ldi	r20, 0x20	; 32
    30a4:	51 e4       	ldi	r21, 0x41	; 65
    30a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	8e 01       	movw	r16, r28
    30b0:	0f 56       	subi	r16, 0x6F	; 111
    30b2:	1f 4f       	sbci	r17, 0xFF	; 255
    30b4:	bc 01       	movw	r22, r24
    30b6:	cd 01       	movw	r24, r26
    30b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	f8 01       	movw	r30, r16
    30c2:	91 83       	std	Z+1, r25	; 0x01
    30c4:	80 83       	st	Z, r24
    30c6:	1f c0       	rjmp	.+62     	; 0x3106 <main+0x1204>
    30c8:	fe 01       	movw	r30, r28
    30ca:	e1 57       	subi	r30, 0x71	; 113
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	88 ec       	ldi	r24, 0xC8	; 200
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	91 83       	std	Z+1, r25	; 0x01
    30d4:	80 83       	st	Z, r24
    30d6:	fe 01       	movw	r30, r28
    30d8:	e1 57       	subi	r30, 0x71	; 113
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	80 81       	ld	r24, Z
    30de:	91 81       	ldd	r25, Z+1	; 0x01
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <main+0x11de>
    30e4:	fe 01       	movw	r30, r28
    30e6:	e1 57       	subi	r30, 0x71	; 113
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	91 83       	std	Z+1, r25	; 0x01
    30ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ee:	de 01       	movw	r26, r28
    30f0:	af 56       	subi	r26, 0x6F	; 111
    30f2:	bf 4f       	sbci	r27, 0xFF	; 255
    30f4:	fe 01       	movw	r30, r28
    30f6:	ef 56       	subi	r30, 0x6F	; 111
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	80 81       	ld	r24, Z
    30fc:	91 81       	ldd	r25, Z+1	; 0x01
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	11 96       	adiw	r26, 0x01	; 1
    3102:	9c 93       	st	X, r25
    3104:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3106:	fe 01       	movw	r30, r28
    3108:	ef 56       	subi	r30, 0x6F	; 111
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	80 81       	ld	r24, Z
    310e:	91 81       	ldd	r25, Z+1	; 0x01
    3110:	00 97       	sbiw	r24, 0x00	; 0
    3112:	d1 f6       	brne	.-76     	; 0x30c8 <main+0x11c6>
    3114:	27 c0       	rjmp	.+78     	; 0x3164 <main+0x1262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3116:	8e 01       	movw	r16, r28
    3118:	0f 56       	subi	r16, 0x6F	; 111
    311a:	1f 4f       	sbci	r17, 0xFF	; 255
    311c:	fe 01       	movw	r30, r28
    311e:	ed 56       	subi	r30, 0x6D	; 109
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	60 81       	ld	r22, Z
    3124:	71 81       	ldd	r23, Z+1	; 0x01
    3126:	82 81       	ldd	r24, Z+2	; 0x02
    3128:	93 81       	ldd	r25, Z+3	; 0x03
    312a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	f8 01       	movw	r30, r16
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	80 83       	st	Z, r24
    3138:	de 01       	movw	r26, r28
    313a:	a3 57       	subi	r26, 0x73	; 115
    313c:	bf 4f       	sbci	r27, 0xFF	; 255
    313e:	fe 01       	movw	r30, r28
    3140:	ef 56       	subi	r30, 0x6F	; 111
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	80 81       	ld	r24, Z
    3146:	91 81       	ldd	r25, Z+1	; 0x01
    3148:	8d 93       	st	X+, r24
    314a:	9c 93       	st	X, r25
    314c:	fe 01       	movw	r30, r28
    314e:	e3 57       	subi	r30, 0x73	; 115
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	80 81       	ld	r24, Z
    3154:	91 81       	ldd	r25, Z+1	; 0x01
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	f1 f7       	brne	.-4      	; 0x3156 <main+0x1254>
    315a:	fe 01       	movw	r30, r28
    315c:	e3 57       	subi	r30, 0x73	; 115
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24
				_delay_ms(1);
				break;

			}
			// zeroing all numbers after calculating the result
			result=0.0;
    3164:	fe 01       	movw	r30, r28
    3166:	e0 5f       	subi	r30, 0xF0	; 240
    3168:	fe 4f       	sbci	r31, 0xFE	; 254
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	a0 e0       	ldi	r26, 0x00	; 0
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	80 83       	st	Z, r24
    3174:	91 83       	std	Z+1, r25	; 0x01
    3176:	a2 83       	std	Z+2, r26	; 0x02
    3178:	b3 83       	std	Z+3, r27	; 0x03
			div=0.0;
    317a:	fe 01       	movw	r30, r28
    317c:	e4 5f       	subi	r30, 0xF4	; 244
    317e:	fe 4f       	sbci	r31, 0xFE	; 254
    3180:	80 e0       	ldi	r24, 0x00	; 0
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	a0 e0       	ldi	r26, 0x00	; 0
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	80 83       	st	Z, r24
    318a:	91 83       	std	Z+1, r25	; 0x01
    318c:	a2 83       	std	Z+2, r26	; 0x02
    318e:	b3 83       	std	Z+3, r27	; 0x03
			num1=0;
    3190:	fe 01       	movw	r30, r28
    3192:	e9 5e       	subi	r30, 0xE9	; 233
    3194:	fe 4f       	sbci	r31, 0xFE	; 254
    3196:	10 82       	st	Z, r1
			num2=0;
    3198:	fe 01       	movw	r30, r28
    319a:	ea 5e       	subi	r30, 0xEA	; 234
    319c:	fe 4f       	sbci	r31, 0xFE	; 254
    319e:	10 82       	st	Z, r1
    31a0:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <main+0x66>
		}

		// any other key will be a number
		else if (pressed_key == 1 || pressed_key ==2 || pressed_key ==3 || pressed_key ==5 || pressed_key ==6 || pressed_key ==7 ||pressed_key ==9 ||pressed_key ==10 || pressed_key ==11 || pressed_key ==14)
    31a4:	fe 01       	movw	r30, r28
    31a6:	e5 5f       	subi	r30, 0xF5	; 245
    31a8:	fe 4f       	sbci	r31, 0xFE	; 254
    31aa:	80 81       	ld	r24, Z
    31ac:	81 30       	cpi	r24, 0x01	; 1
    31ae:	c1 f1       	breq	.+112    	; 0x3220 <main+0x131e>
    31b0:	fe 01       	movw	r30, r28
    31b2:	e5 5f       	subi	r30, 0xF5	; 245
    31b4:	fe 4f       	sbci	r31, 0xFE	; 254
    31b6:	80 81       	ld	r24, Z
    31b8:	82 30       	cpi	r24, 0x02	; 2
    31ba:	91 f1       	breq	.+100    	; 0x3220 <main+0x131e>
    31bc:	fe 01       	movw	r30, r28
    31be:	e5 5f       	subi	r30, 0xF5	; 245
    31c0:	fe 4f       	sbci	r31, 0xFE	; 254
    31c2:	80 81       	ld	r24, Z
    31c4:	83 30       	cpi	r24, 0x03	; 3
    31c6:	61 f1       	breq	.+88     	; 0x3220 <main+0x131e>
    31c8:	fe 01       	movw	r30, r28
    31ca:	e5 5f       	subi	r30, 0xF5	; 245
    31cc:	fe 4f       	sbci	r31, 0xFE	; 254
    31ce:	80 81       	ld	r24, Z
    31d0:	85 30       	cpi	r24, 0x05	; 5
    31d2:	31 f1       	breq	.+76     	; 0x3220 <main+0x131e>
    31d4:	fe 01       	movw	r30, r28
    31d6:	e5 5f       	subi	r30, 0xF5	; 245
    31d8:	fe 4f       	sbci	r31, 0xFE	; 254
    31da:	80 81       	ld	r24, Z
    31dc:	86 30       	cpi	r24, 0x06	; 6
    31de:	01 f1       	breq	.+64     	; 0x3220 <main+0x131e>
    31e0:	fe 01       	movw	r30, r28
    31e2:	e5 5f       	subi	r30, 0xF5	; 245
    31e4:	fe 4f       	sbci	r31, 0xFE	; 254
    31e6:	80 81       	ld	r24, Z
    31e8:	87 30       	cpi	r24, 0x07	; 7
    31ea:	d1 f0       	breq	.+52     	; 0x3220 <main+0x131e>
    31ec:	fe 01       	movw	r30, r28
    31ee:	e5 5f       	subi	r30, 0xF5	; 245
    31f0:	fe 4f       	sbci	r31, 0xFE	; 254
    31f2:	80 81       	ld	r24, Z
    31f4:	89 30       	cpi	r24, 0x09	; 9
    31f6:	a1 f0       	breq	.+40     	; 0x3220 <main+0x131e>
    31f8:	fe 01       	movw	r30, r28
    31fa:	e5 5f       	subi	r30, 0xF5	; 245
    31fc:	fe 4f       	sbci	r31, 0xFE	; 254
    31fe:	80 81       	ld	r24, Z
    3200:	8a 30       	cpi	r24, 0x0A	; 10
    3202:	71 f0       	breq	.+28     	; 0x3220 <main+0x131e>
    3204:	fe 01       	movw	r30, r28
    3206:	e5 5f       	subi	r30, 0xF5	; 245
    3208:	fe 4f       	sbci	r31, 0xFE	; 254
    320a:	80 81       	ld	r24, Z
    320c:	8b 30       	cpi	r24, 0x0B	; 11
    320e:	41 f0       	breq	.+16     	; 0x3220 <main+0x131e>
    3210:	fe 01       	movw	r30, r28
    3212:	e5 5f       	subi	r30, 0xF5	; 245
    3214:	fe 4f       	sbci	r31, 0xFE	; 254
    3216:	80 81       	ld	r24, Z
    3218:	8e 30       	cpi	r24, 0x0E	; 14
    321a:	11 f0       	breq	.+4      	; 0x3220 <main+0x131e>
    321c:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <main+0x66>
		{
			switch(pressed_key)
    3220:	fe 01       	movw	r30, r28
    3222:	e5 5f       	subi	r30, 0xF5	; 245
    3224:	fe 4f       	sbci	r31, 0xFE	; 254
    3226:	80 81       	ld	r24, Z
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	cd 5d       	subi	r28, 0xDD	; 221
    322e:	de 4f       	sbci	r29, 0xFE	; 254
    3230:	39 83       	std	Y+1, r19	; 0x01
    3232:	28 83       	st	Y, r18
    3234:	c3 52       	subi	r28, 0x23	; 35
    3236:	d1 40       	sbci	r29, 0x01	; 1
    3238:	cd 5d       	subi	r28, 0xDD	; 221
    323a:	de 4f       	sbci	r29, 0xFE	; 254
    323c:	48 81       	ld	r20, Y
    323e:	59 81       	ldd	r21, Y+1	; 0x01
    3240:	c3 52       	subi	r28, 0x23	; 35
    3242:	d1 40       	sbci	r29, 0x01	; 1
    3244:	46 30       	cpi	r20, 0x06	; 6
    3246:	51 05       	cpc	r21, r1
    3248:	09 f4       	brne	.+2      	; 0x324c <main+0x134a>
    324a:	9d c3       	rjmp	.+1850   	; 0x3986 <main+0x1a84>
    324c:	cd 5d       	subi	r28, 0xDD	; 221
    324e:	de 4f       	sbci	r29, 0xFE	; 254
    3250:	88 81       	ld	r24, Y
    3252:	99 81       	ldd	r25, Y+1	; 0x01
    3254:	c3 52       	subi	r28, 0x23	; 35
    3256:	d1 40       	sbci	r29, 0x01	; 1
    3258:	87 30       	cpi	r24, 0x07	; 7
    325a:	91 05       	cpc	r25, r1
    325c:	9c f5       	brge	.+102    	; 0x32c4 <main+0x13c2>
    325e:	cd 5d       	subi	r28, 0xDD	; 221
    3260:	de 4f       	sbci	r29, 0xFE	; 254
    3262:	e8 81       	ld	r30, Y
    3264:	f9 81       	ldd	r31, Y+1	; 0x01
    3266:	c3 52       	subi	r28, 0x23	; 35
    3268:	d1 40       	sbci	r29, 0x01	; 1
    326a:	e2 30       	cpi	r30, 0x02	; 2
    326c:	f1 05       	cpc	r31, r1
    326e:	09 f4       	brne	.+2      	; 0x3272 <main+0x1370>
    3270:	2f c1       	rjmp	.+606    	; 0x34d0 <main+0x15ce>
    3272:	cd 5d       	subi	r28, 0xDD	; 221
    3274:	de 4f       	sbci	r29, 0xFE	; 254
    3276:	28 81       	ld	r18, Y
    3278:	39 81       	ldd	r19, Y+1	; 0x01
    327a:	c3 52       	subi	r28, 0x23	; 35
    327c:	d1 40       	sbci	r29, 0x01	; 1
    327e:	23 30       	cpi	r18, 0x03	; 3
    3280:	31 05       	cpc	r19, r1
    3282:	5c f4       	brge	.+22     	; 0x329a <main+0x1398>
    3284:	cd 5d       	subi	r28, 0xDD	; 221
    3286:	de 4f       	sbci	r29, 0xFE	; 254
    3288:	48 81       	ld	r20, Y
    328a:	59 81       	ldd	r21, Y+1	; 0x01
    328c:	c3 52       	subi	r28, 0x23	; 35
    328e:	d1 40       	sbci	r29, 0x01	; 1
    3290:	41 30       	cpi	r20, 0x01	; 1
    3292:	51 05       	cpc	r21, r1
    3294:	09 f4       	brne	.+2      	; 0x3298 <main+0x1396>
    3296:	53 c0       	rjmp	.+166    	; 0x333e <main+0x143c>
    3298:	f3 c6       	rjmp	.+3558   	; 0x4080 <main+0x217e>
    329a:	cd 5d       	subi	r28, 0xDD	; 221
    329c:	de 4f       	sbci	r29, 0xFE	; 254
    329e:	88 81       	ld	r24, Y
    32a0:	99 81       	ldd	r25, Y+1	; 0x01
    32a2:	c3 52       	subi	r28, 0x23	; 35
    32a4:	d1 40       	sbci	r29, 0x01	; 1
    32a6:	83 30       	cpi	r24, 0x03	; 3
    32a8:	91 05       	cpc	r25, r1
    32aa:	09 f4       	brne	.+2      	; 0x32ae <main+0x13ac>
    32ac:	da c1       	rjmp	.+948    	; 0x3662 <main+0x1760>
    32ae:	cd 5d       	subi	r28, 0xDD	; 221
    32b0:	de 4f       	sbci	r29, 0xFE	; 254
    32b2:	e8 81       	ld	r30, Y
    32b4:	f9 81       	ldd	r31, Y+1	; 0x01
    32b6:	c3 52       	subi	r28, 0x23	; 35
    32b8:	d1 40       	sbci	r29, 0x01	; 1
    32ba:	e5 30       	cpi	r30, 0x05	; 5
    32bc:	f1 05       	cpc	r31, r1
    32be:	09 f4       	brne	.+2      	; 0x32c2 <main+0x13c0>
    32c0:	99 c2       	rjmp	.+1330   	; 0x37f4 <main+0x18f2>
    32c2:	de c6       	rjmp	.+3516   	; 0x4080 <main+0x217e>
    32c4:	cd 5d       	subi	r28, 0xDD	; 221
    32c6:	de 4f       	sbci	r29, 0xFE	; 254
    32c8:	28 81       	ld	r18, Y
    32ca:	39 81       	ldd	r19, Y+1	; 0x01
    32cc:	c3 52       	subi	r28, 0x23	; 35
    32ce:	d1 40       	sbci	r29, 0x01	; 1
    32d0:	2a 30       	cpi	r18, 0x0A	; 10
    32d2:	31 05       	cpc	r19, r1
    32d4:	09 f4       	brne	.+2      	; 0x32d8 <main+0x13d6>
    32d6:	41 c5       	rjmp	.+2690   	; 0x3d5a <main+0x1e58>
    32d8:	cd 5d       	subi	r28, 0xDD	; 221
    32da:	de 4f       	sbci	r29, 0xFE	; 254
    32dc:	48 81       	ld	r20, Y
    32de:	59 81       	ldd	r21, Y+1	; 0x01
    32e0:	c3 52       	subi	r28, 0x23	; 35
    32e2:	d1 40       	sbci	r29, 0x01	; 1
    32e4:	4b 30       	cpi	r20, 0x0B	; 11
    32e6:	51 05       	cpc	r21, r1
    32e8:	ac f4       	brge	.+42     	; 0x3314 <main+0x1412>
    32ea:	cd 5d       	subi	r28, 0xDD	; 221
    32ec:	de 4f       	sbci	r29, 0xFE	; 254
    32ee:	88 81       	ld	r24, Y
    32f0:	99 81       	ldd	r25, Y+1	; 0x01
    32f2:	c3 52       	subi	r28, 0x23	; 35
    32f4:	d1 40       	sbci	r29, 0x01	; 1
    32f6:	87 30       	cpi	r24, 0x07	; 7
    32f8:	91 05       	cpc	r25, r1
    32fa:	09 f4       	brne	.+2      	; 0x32fe <main+0x13fc>
    32fc:	0d c4       	rjmp	.+2074   	; 0x3b18 <main+0x1c16>
    32fe:	cd 5d       	subi	r28, 0xDD	; 221
    3300:	de 4f       	sbci	r29, 0xFE	; 254
    3302:	e8 81       	ld	r30, Y
    3304:	f9 81       	ldd	r31, Y+1	; 0x01
    3306:	c3 52       	subi	r28, 0x23	; 35
    3308:	d1 40       	sbci	r29, 0x01	; 1
    330a:	e9 30       	cpi	r30, 0x09	; 9
    330c:	f1 05       	cpc	r31, r1
    330e:	09 f4       	brne	.+2      	; 0x3312 <main+0x1410>
    3310:	9d c4       	rjmp	.+2362   	; 0x3c4c <main+0x1d4a>
    3312:	b6 c6       	rjmp	.+3436   	; 0x4080 <main+0x217e>
    3314:	cd 5d       	subi	r28, 0xDD	; 221
    3316:	de 4f       	sbci	r29, 0xFE	; 254
    3318:	28 81       	ld	r18, Y
    331a:	39 81       	ldd	r19, Y+1	; 0x01
    331c:	c3 52       	subi	r28, 0x23	; 35
    331e:	d1 40       	sbci	r29, 0x01	; 1
    3320:	2b 30       	cpi	r18, 0x0B	; 11
    3322:	31 05       	cpc	r19, r1
    3324:	09 f4       	brne	.+2      	; 0x3328 <main+0x1426>
    3326:	a0 c5       	rjmp	.+2880   	; 0x3e68 <main+0x1f66>
    3328:	cd 5d       	subi	r28, 0xDD	; 221
    332a:	de 4f       	sbci	r29, 0xFE	; 254
    332c:	48 81       	ld	r20, Y
    332e:	59 81       	ldd	r21, Y+1	; 0x01
    3330:	c3 52       	subi	r28, 0x23	; 35
    3332:	d1 40       	sbci	r29, 0x01	; 1
    3334:	4e 30       	cpi	r20, 0x0E	; 14
    3336:	51 05       	cpc	r21, r1
    3338:	09 f4       	brne	.+2      	; 0x333c <main+0x143a>
    333a:	1d c6       	rjmp	.+3130   	; 0x3f76 <main+0x2074>
    333c:	a1 c6       	rjmp	.+3394   	; 0x4080 <main+0x217e>
			{
			case 1 : arr[i]=7; CLCD_voidSendNum(7);_delay_ms(1);break;
    333e:	fe 01       	movw	r30, r28
    3340:	eb 5e       	subi	r30, 0xEB	; 235
    3342:	fe 4f       	sbci	r31, 0xFE	; 254
    3344:	80 81       	ld	r24, Z
    3346:	28 2f       	mov	r18, r24
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	ce 01       	movw	r24, r28
    334c:	87 5e       	subi	r24, 0xE7	; 231
    334e:	9e 4f       	sbci	r25, 0xFE	; 254
    3350:	fc 01       	movw	r30, r24
    3352:	e2 0f       	add	r30, r18
    3354:	f3 1f       	adc	r31, r19
    3356:	87 e0       	ldi	r24, 0x07	; 7
    3358:	80 83       	st	Z, r24
    335a:	67 e0       	ldi	r22, 0x07	; 7
    335c:	70 e0       	ldi	r23, 0x00	; 0
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    3366:	fe 01       	movw	r30, r28
    3368:	e7 57       	subi	r30, 0x77	; 119
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	a0 e8       	ldi	r26, 0x80	; 128
    3372:	bf e3       	ldi	r27, 0x3F	; 63
    3374:	80 83       	st	Z, r24
    3376:	91 83       	std	Z+1, r25	; 0x01
    3378:	a2 83       	std	Z+2, r26	; 0x02
    337a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337c:	8e 01       	movw	r16, r28
    337e:	0b 57       	subi	r16, 0x7B	; 123
    3380:	1f 4f       	sbci	r17, 0xFF	; 255
    3382:	fe 01       	movw	r30, r28
    3384:	e7 57       	subi	r30, 0x77	; 119
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	60 81       	ld	r22, Z
    338a:	71 81       	ldd	r23, Z+1	; 0x01
    338c:	82 81       	ldd	r24, Z+2	; 0x02
    338e:	93 81       	ldd	r25, Z+3	; 0x03
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	4a ef       	ldi	r20, 0xFA	; 250
    3396:	54 e4       	ldi	r21, 0x44	; 68
    3398:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	f8 01       	movw	r30, r16
    33a2:	80 83       	st	Z, r24
    33a4:	91 83       	std	Z+1, r25	; 0x01
    33a6:	a2 83       	std	Z+2, r26	; 0x02
    33a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33aa:	fe 01       	movw	r30, r28
    33ac:	eb 57       	subi	r30, 0x7B	; 123
    33ae:	ff 4f       	sbci	r31, 0xFF	; 255
    33b0:	60 81       	ld	r22, Z
    33b2:	71 81       	ldd	r23, Z+1	; 0x01
    33b4:	82 81       	ldd	r24, Z+2	; 0x02
    33b6:	93 81       	ldd	r25, Z+3	; 0x03
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e8       	ldi	r20, 0x80	; 128
    33be:	5f e3       	ldi	r21, 0x3F	; 63
    33c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    33c4:	88 23       	and	r24, r24
    33c6:	44 f4       	brge	.+16     	; 0x33d8 <main+0x14d6>
		__ticks = 1;
    33c8:	fe 01       	movw	r30, r28
    33ca:	ed 57       	subi	r30, 0x7D	; 125
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	91 83       	std	Z+1, r25	; 0x01
    33d4:	80 83       	st	Z, r24
    33d6:	64 c0       	rjmp	.+200    	; 0x34a0 <main+0x159e>
	else if (__tmp > 65535)
    33d8:	fe 01       	movw	r30, r28
    33da:	eb 57       	subi	r30, 0x7B	; 123
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	60 81       	ld	r22, Z
    33e0:	71 81       	ldd	r23, Z+1	; 0x01
    33e2:	82 81       	ldd	r24, Z+2	; 0x02
    33e4:	93 81       	ldd	r25, Z+3	; 0x03
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	3f ef       	ldi	r19, 0xFF	; 255
    33ea:	4f e7       	ldi	r20, 0x7F	; 127
    33ec:	57 e4       	ldi	r21, 0x47	; 71
    33ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    33f2:	18 16       	cp	r1, r24
    33f4:	0c f0       	brlt	.+2      	; 0x33f8 <main+0x14f6>
    33f6:	43 c0       	rjmp	.+134    	; 0x347e <main+0x157c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f8:	fe 01       	movw	r30, r28
    33fa:	e7 57       	subi	r30, 0x77	; 119
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	60 81       	ld	r22, Z
    3400:	71 81       	ldd	r23, Z+1	; 0x01
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	93 81       	ldd	r25, Z+3	; 0x03
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	40 e2       	ldi	r20, 0x20	; 32
    340c:	51 e4       	ldi	r21, 0x41	; 65
    340e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	8e 01       	movw	r16, r28
    3418:	0d 57       	subi	r16, 0x7D	; 125
    341a:	1f 4f       	sbci	r17, 0xFF	; 255
    341c:	bc 01       	movw	r22, r24
    341e:	cd 01       	movw	r24, r26
    3420:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	f8 01       	movw	r30, r16
    342a:	91 83       	std	Z+1, r25	; 0x01
    342c:	80 83       	st	Z, r24
    342e:	1f c0       	rjmp	.+62     	; 0x346e <main+0x156c>
    3430:	fe 01       	movw	r30, r28
    3432:	ef 57       	subi	r30, 0x7F	; 127
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	88 ec       	ldi	r24, 0xC8	; 200
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	91 83       	std	Z+1, r25	; 0x01
    343c:	80 83       	st	Z, r24
    343e:	fe 01       	movw	r30, r28
    3440:	ef 57       	subi	r30, 0x7F	; 127
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	80 81       	ld	r24, Z
    3446:	91 81       	ldd	r25, Z+1	; 0x01
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	f1 f7       	brne	.-4      	; 0x3448 <main+0x1546>
    344c:	fe 01       	movw	r30, r28
    344e:	ef 57       	subi	r30, 0x7F	; 127
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	91 83       	std	Z+1, r25	; 0x01
    3454:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3456:	de 01       	movw	r26, r28
    3458:	ad 57       	subi	r26, 0x7D	; 125
    345a:	bf 4f       	sbci	r27, 0xFF	; 255
    345c:	fe 01       	movw	r30, r28
    345e:	ed 57       	subi	r30, 0x7D	; 125
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	80 81       	ld	r24, Z
    3464:	91 81       	ldd	r25, Z+1	; 0x01
    3466:	01 97       	sbiw	r24, 0x01	; 1
    3468:	11 96       	adiw	r26, 0x01	; 1
    346a:	9c 93       	st	X, r25
    346c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    346e:	fe 01       	movw	r30, r28
    3470:	ed 57       	subi	r30, 0x7D	; 125
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	80 81       	ld	r24, Z
    3476:	91 81       	ldd	r25, Z+1	; 0x01
    3478:	00 97       	sbiw	r24, 0x00	; 0
    347a:	d1 f6       	brne	.-76     	; 0x3430 <main+0x152e>
    347c:	01 c6       	rjmp	.+3074   	; 0x4080 <main+0x217e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347e:	8e 01       	movw	r16, r28
    3480:	0d 57       	subi	r16, 0x7D	; 125
    3482:	1f 4f       	sbci	r17, 0xFF	; 255
    3484:	fe 01       	movw	r30, r28
    3486:	eb 57       	subi	r30, 0x7B	; 123
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	60 81       	ld	r22, Z
    348c:	71 81       	ldd	r23, Z+1	; 0x01
    348e:	82 81       	ldd	r24, Z+2	; 0x02
    3490:	93 81       	ldd	r25, Z+3	; 0x03
    3492:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	f8 01       	movw	r30, r16
    349c:	91 83       	std	Z+1, r25	; 0x01
    349e:	80 83       	st	Z, r24
    34a0:	de 01       	movw	r26, r28
    34a2:	a1 58       	subi	r26, 0x81	; 129
    34a4:	bf 4f       	sbci	r27, 0xFF	; 255
    34a6:	fe 01       	movw	r30, r28
    34a8:	ed 57       	subi	r30, 0x7D	; 125
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	80 81       	ld	r24, Z
    34ae:	91 81       	ldd	r25, Z+1	; 0x01
    34b0:	11 96       	adiw	r26, 0x01	; 1
    34b2:	9c 93       	st	X, r25
    34b4:	8e 93       	st	-X, r24
    34b6:	fe 01       	movw	r30, r28
    34b8:	e1 58       	subi	r30, 0x81	; 129
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	80 81       	ld	r24, Z
    34be:	91 81       	ldd	r25, Z+1	; 0x01
    34c0:	01 97       	sbiw	r24, 0x01	; 1
    34c2:	f1 f7       	brne	.-4      	; 0x34c0 <main+0x15be>
    34c4:	fe 01       	movw	r30, r28
    34c6:	e1 58       	subi	r30, 0x81	; 129
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	91 83       	std	Z+1, r25	; 0x01
    34cc:	80 83       	st	Z, r24
    34ce:	d8 c5       	rjmp	.+2992   	; 0x4080 <main+0x217e>
			case 2 : arr[i]=8;CLCD_voidSendNum(8);_delay_ms(1);break;
    34d0:	fe 01       	movw	r30, r28
    34d2:	eb 5e       	subi	r30, 0xEB	; 235
    34d4:	fe 4f       	sbci	r31, 0xFE	; 254
    34d6:	80 81       	ld	r24, Z
    34d8:	28 2f       	mov	r18, r24
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	ce 01       	movw	r24, r28
    34de:	87 5e       	subi	r24, 0xE7	; 231
    34e0:	9e 4f       	sbci	r25, 0xFE	; 254
    34e2:	fc 01       	movw	r30, r24
    34e4:	e2 0f       	add	r30, r18
    34e6:	f3 1f       	adc	r31, r19
    34e8:	88 e0       	ldi	r24, 0x08	; 8
    34ea:	80 83       	st	Z, r24
    34ec:	68 e0       	ldi	r22, 0x08	; 8
    34ee:	70 e0       	ldi	r23, 0x00	; 0
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    34f8:	fe 01       	movw	r30, r28
    34fa:	e5 58       	subi	r30, 0x85	; 133
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	a0 e8       	ldi	r26, 0x80	; 128
    3504:	bf e3       	ldi	r27, 0x3F	; 63
    3506:	80 83       	st	Z, r24
    3508:	91 83       	std	Z+1, r25	; 0x01
    350a:	a2 83       	std	Z+2, r26	; 0x02
    350c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350e:	8e 01       	movw	r16, r28
    3510:	09 58       	subi	r16, 0x89	; 137
    3512:	1f 4f       	sbci	r17, 0xFF	; 255
    3514:	fe 01       	movw	r30, r28
    3516:	e5 58       	subi	r30, 0x85	; 133
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	60 81       	ld	r22, Z
    351c:	71 81       	ldd	r23, Z+1	; 0x01
    351e:	82 81       	ldd	r24, Z+2	; 0x02
    3520:	93 81       	ldd	r25, Z+3	; 0x03
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	4a ef       	ldi	r20, 0xFA	; 250
    3528:	54 e4       	ldi	r21, 0x44	; 68
    352a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    352e:	dc 01       	movw	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	f8 01       	movw	r30, r16
    3534:	80 83       	st	Z, r24
    3536:	91 83       	std	Z+1, r25	; 0x01
    3538:	a2 83       	std	Z+2, r26	; 0x02
    353a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    353c:	fe 01       	movw	r30, r28
    353e:	e9 58       	subi	r30, 0x89	; 137
    3540:	ff 4f       	sbci	r31, 0xFF	; 255
    3542:	60 81       	ld	r22, Z
    3544:	71 81       	ldd	r23, Z+1	; 0x01
    3546:	82 81       	ldd	r24, Z+2	; 0x02
    3548:	93 81       	ldd	r25, Z+3	; 0x03
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	40 e8       	ldi	r20, 0x80	; 128
    3550:	5f e3       	ldi	r21, 0x3F	; 63
    3552:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3556:	88 23       	and	r24, r24
    3558:	44 f4       	brge	.+16     	; 0x356a <main+0x1668>
		__ticks = 1;
    355a:	fe 01       	movw	r30, r28
    355c:	eb 58       	subi	r30, 0x8B	; 139
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	91 83       	std	Z+1, r25	; 0x01
    3566:	80 83       	st	Z, r24
    3568:	64 c0       	rjmp	.+200    	; 0x3632 <main+0x1730>
	else if (__tmp > 65535)
    356a:	fe 01       	movw	r30, r28
    356c:	e9 58       	subi	r30, 0x89	; 137
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	60 81       	ld	r22, Z
    3572:	71 81       	ldd	r23, Z+1	; 0x01
    3574:	82 81       	ldd	r24, Z+2	; 0x02
    3576:	93 81       	ldd	r25, Z+3	; 0x03
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	3f ef       	ldi	r19, 0xFF	; 255
    357c:	4f e7       	ldi	r20, 0x7F	; 127
    357e:	57 e4       	ldi	r21, 0x47	; 71
    3580:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3584:	18 16       	cp	r1, r24
    3586:	0c f0       	brlt	.+2      	; 0x358a <main+0x1688>
    3588:	43 c0       	rjmp	.+134    	; 0x3610 <main+0x170e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    358a:	fe 01       	movw	r30, r28
    358c:	e5 58       	subi	r30, 0x85	; 133
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	60 81       	ld	r22, Z
    3592:	71 81       	ldd	r23, Z+1	; 0x01
    3594:	82 81       	ldd	r24, Z+2	; 0x02
    3596:	93 81       	ldd	r25, Z+3	; 0x03
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	40 e2       	ldi	r20, 0x20	; 32
    359e:	51 e4       	ldi	r21, 0x41	; 65
    35a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	8e 01       	movw	r16, r28
    35aa:	0b 58       	subi	r16, 0x8B	; 139
    35ac:	1f 4f       	sbci	r17, 0xFF	; 255
    35ae:	bc 01       	movw	r22, r24
    35b0:	cd 01       	movw	r24, r26
    35b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	f8 01       	movw	r30, r16
    35bc:	91 83       	std	Z+1, r25	; 0x01
    35be:	80 83       	st	Z, r24
    35c0:	1f c0       	rjmp	.+62     	; 0x3600 <main+0x16fe>
    35c2:	fe 01       	movw	r30, r28
    35c4:	ed 58       	subi	r30, 0x8D	; 141
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	88 ec       	ldi	r24, 0xC8	; 200
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	91 83       	std	Z+1, r25	; 0x01
    35ce:	80 83       	st	Z, r24
    35d0:	fe 01       	movw	r30, r28
    35d2:	ed 58       	subi	r30, 0x8D	; 141
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	80 81       	ld	r24, Z
    35d8:	91 81       	ldd	r25, Z+1	; 0x01
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	f1 f7       	brne	.-4      	; 0x35da <main+0x16d8>
    35de:	fe 01       	movw	r30, r28
    35e0:	ed 58       	subi	r30, 0x8D	; 141
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	91 83       	std	Z+1, r25	; 0x01
    35e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e8:	de 01       	movw	r26, r28
    35ea:	ab 58       	subi	r26, 0x8B	; 139
    35ec:	bf 4f       	sbci	r27, 0xFF	; 255
    35ee:	fe 01       	movw	r30, r28
    35f0:	eb 58       	subi	r30, 0x8B	; 139
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	80 81       	ld	r24, Z
    35f6:	91 81       	ldd	r25, Z+1	; 0x01
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	11 96       	adiw	r26, 0x01	; 1
    35fc:	9c 93       	st	X, r25
    35fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3600:	fe 01       	movw	r30, r28
    3602:	eb 58       	subi	r30, 0x8B	; 139
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	80 81       	ld	r24, Z
    3608:	91 81       	ldd	r25, Z+1	; 0x01
    360a:	00 97       	sbiw	r24, 0x00	; 0
    360c:	d1 f6       	brne	.-76     	; 0x35c2 <main+0x16c0>
    360e:	38 c5       	rjmp	.+2672   	; 0x4080 <main+0x217e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3610:	8e 01       	movw	r16, r28
    3612:	0b 58       	subi	r16, 0x8B	; 139
    3614:	1f 4f       	sbci	r17, 0xFF	; 255
    3616:	fe 01       	movw	r30, r28
    3618:	e9 58       	subi	r30, 0x89	; 137
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	60 81       	ld	r22, Z
    361e:	71 81       	ldd	r23, Z+1	; 0x01
    3620:	82 81       	ldd	r24, Z+2	; 0x02
    3622:	93 81       	ldd	r25, Z+3	; 0x03
    3624:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	f8 01       	movw	r30, r16
    362e:	91 83       	std	Z+1, r25	; 0x01
    3630:	80 83       	st	Z, r24
    3632:	de 01       	movw	r26, r28
    3634:	af 58       	subi	r26, 0x8F	; 143
    3636:	bf 4f       	sbci	r27, 0xFF	; 255
    3638:	fe 01       	movw	r30, r28
    363a:	eb 58       	subi	r30, 0x8B	; 139
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	80 81       	ld	r24, Z
    3640:	91 81       	ldd	r25, Z+1	; 0x01
    3642:	11 96       	adiw	r26, 0x01	; 1
    3644:	9c 93       	st	X, r25
    3646:	8e 93       	st	-X, r24
    3648:	fe 01       	movw	r30, r28
    364a:	ef 58       	subi	r30, 0x8F	; 143
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	80 81       	ld	r24, Z
    3650:	91 81       	ldd	r25, Z+1	; 0x01
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	f1 f7       	brne	.-4      	; 0x3652 <main+0x1750>
    3656:	fe 01       	movw	r30, r28
    3658:	ef 58       	subi	r30, 0x8F	; 143
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	91 83       	std	Z+1, r25	; 0x01
    365e:	80 83       	st	Z, r24
    3660:	0f c5       	rjmp	.+2590   	; 0x4080 <main+0x217e>
			case 3 : arr[i]=9;CLCD_voidSendNum(9);_delay_ms(1);break;
    3662:	fe 01       	movw	r30, r28
    3664:	eb 5e       	subi	r30, 0xEB	; 235
    3666:	fe 4f       	sbci	r31, 0xFE	; 254
    3668:	80 81       	ld	r24, Z
    366a:	28 2f       	mov	r18, r24
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	ce 01       	movw	r24, r28
    3670:	87 5e       	subi	r24, 0xE7	; 231
    3672:	9e 4f       	sbci	r25, 0xFE	; 254
    3674:	fc 01       	movw	r30, r24
    3676:	e2 0f       	add	r30, r18
    3678:	f3 1f       	adc	r31, r19
    367a:	89 e0       	ldi	r24, 0x09	; 9
    367c:	80 83       	st	Z, r24
    367e:	69 e0       	ldi	r22, 0x09	; 9
    3680:	70 e0       	ldi	r23, 0x00	; 0
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    368a:	fe 01       	movw	r30, r28
    368c:	e3 59       	subi	r30, 0x93	; 147
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	a0 e8       	ldi	r26, 0x80	; 128
    3696:	bf e3       	ldi	r27, 0x3F	; 63
    3698:	80 83       	st	Z, r24
    369a:	91 83       	std	Z+1, r25	; 0x01
    369c:	a2 83       	std	Z+2, r26	; 0x02
    369e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36a0:	8e 01       	movw	r16, r28
    36a2:	07 59       	subi	r16, 0x97	; 151
    36a4:	1f 4f       	sbci	r17, 0xFF	; 255
    36a6:	fe 01       	movw	r30, r28
    36a8:	e3 59       	subi	r30, 0x93	; 147
    36aa:	ff 4f       	sbci	r31, 0xFF	; 255
    36ac:	60 81       	ld	r22, Z
    36ae:	71 81       	ldd	r23, Z+1	; 0x01
    36b0:	82 81       	ldd	r24, Z+2	; 0x02
    36b2:	93 81       	ldd	r25, Z+3	; 0x03
    36b4:	20 e0       	ldi	r18, 0x00	; 0
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	4a ef       	ldi	r20, 0xFA	; 250
    36ba:	54 e4       	ldi	r21, 0x44	; 68
    36bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	f8 01       	movw	r30, r16
    36c6:	80 83       	st	Z, r24
    36c8:	91 83       	std	Z+1, r25	; 0x01
    36ca:	a2 83       	std	Z+2, r26	; 0x02
    36cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36ce:	fe 01       	movw	r30, r28
    36d0:	e7 59       	subi	r30, 0x97	; 151
    36d2:	ff 4f       	sbci	r31, 0xFF	; 255
    36d4:	60 81       	ld	r22, Z
    36d6:	71 81       	ldd	r23, Z+1	; 0x01
    36d8:	82 81       	ldd	r24, Z+2	; 0x02
    36da:	93 81       	ldd	r25, Z+3	; 0x03
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	40 e8       	ldi	r20, 0x80	; 128
    36e2:	5f e3       	ldi	r21, 0x3F	; 63
    36e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    36e8:	88 23       	and	r24, r24
    36ea:	44 f4       	brge	.+16     	; 0x36fc <main+0x17fa>
		__ticks = 1;
    36ec:	fe 01       	movw	r30, r28
    36ee:	e9 59       	subi	r30, 0x99	; 153
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	91 83       	std	Z+1, r25	; 0x01
    36f8:	80 83       	st	Z, r24
    36fa:	64 c0       	rjmp	.+200    	; 0x37c4 <main+0x18c2>
	else if (__tmp > 65535)
    36fc:	fe 01       	movw	r30, r28
    36fe:	e7 59       	subi	r30, 0x97	; 151
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	60 81       	ld	r22, Z
    3704:	71 81       	ldd	r23, Z+1	; 0x01
    3706:	82 81       	ldd	r24, Z+2	; 0x02
    3708:	93 81       	ldd	r25, Z+3	; 0x03
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	3f ef       	ldi	r19, 0xFF	; 255
    370e:	4f e7       	ldi	r20, 0x7F	; 127
    3710:	57 e4       	ldi	r21, 0x47	; 71
    3712:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3716:	18 16       	cp	r1, r24
    3718:	0c f0       	brlt	.+2      	; 0x371c <main+0x181a>
    371a:	43 c0       	rjmp	.+134    	; 0x37a2 <main+0x18a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    371c:	fe 01       	movw	r30, r28
    371e:	e3 59       	subi	r30, 0x93	; 147
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	60 81       	ld	r22, Z
    3724:	71 81       	ldd	r23, Z+1	; 0x01
    3726:	82 81       	ldd	r24, Z+2	; 0x02
    3728:	93 81       	ldd	r25, Z+3	; 0x03
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	40 e2       	ldi	r20, 0x20	; 32
    3730:	51 e4       	ldi	r21, 0x41	; 65
    3732:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3736:	dc 01       	movw	r26, r24
    3738:	cb 01       	movw	r24, r22
    373a:	8e 01       	movw	r16, r28
    373c:	09 59       	subi	r16, 0x99	; 153
    373e:	1f 4f       	sbci	r17, 0xFF	; 255
    3740:	bc 01       	movw	r22, r24
    3742:	cd 01       	movw	r24, r26
    3744:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	f8 01       	movw	r30, r16
    374e:	91 83       	std	Z+1, r25	; 0x01
    3750:	80 83       	st	Z, r24
    3752:	1f c0       	rjmp	.+62     	; 0x3792 <main+0x1890>
    3754:	fe 01       	movw	r30, r28
    3756:	eb 59       	subi	r30, 0x9B	; 155
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	88 ec       	ldi	r24, 0xC8	; 200
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	80 83       	st	Z, r24
    3762:	fe 01       	movw	r30, r28
    3764:	eb 59       	subi	r30, 0x9B	; 155
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	80 81       	ld	r24, Z
    376a:	91 81       	ldd	r25, Z+1	; 0x01
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	f1 f7       	brne	.-4      	; 0x376c <main+0x186a>
    3770:	fe 01       	movw	r30, r28
    3772:	eb 59       	subi	r30, 0x9B	; 155
    3774:	ff 4f       	sbci	r31, 0xFF	; 255
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    377a:	de 01       	movw	r26, r28
    377c:	a9 59       	subi	r26, 0x99	; 153
    377e:	bf 4f       	sbci	r27, 0xFF	; 255
    3780:	fe 01       	movw	r30, r28
    3782:	e9 59       	subi	r30, 0x99	; 153
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	80 81       	ld	r24, Z
    3788:	91 81       	ldd	r25, Z+1	; 0x01
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	11 96       	adiw	r26, 0x01	; 1
    378e:	9c 93       	st	X, r25
    3790:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3792:	fe 01       	movw	r30, r28
    3794:	e9 59       	subi	r30, 0x99	; 153
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	80 81       	ld	r24, Z
    379a:	91 81       	ldd	r25, Z+1	; 0x01
    379c:	00 97       	sbiw	r24, 0x00	; 0
    379e:	d1 f6       	brne	.-76     	; 0x3754 <main+0x1852>
    37a0:	6f c4       	rjmp	.+2270   	; 0x4080 <main+0x217e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a2:	8e 01       	movw	r16, r28
    37a4:	09 59       	subi	r16, 0x99	; 153
    37a6:	1f 4f       	sbci	r17, 0xFF	; 255
    37a8:	fe 01       	movw	r30, r28
    37aa:	e7 59       	subi	r30, 0x97	; 151
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	60 81       	ld	r22, Z
    37b0:	71 81       	ldd	r23, Z+1	; 0x01
    37b2:	82 81       	ldd	r24, Z+2	; 0x02
    37b4:	93 81       	ldd	r25, Z+3	; 0x03
    37b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	f8 01       	movw	r30, r16
    37c0:	91 83       	std	Z+1, r25	; 0x01
    37c2:	80 83       	st	Z, r24
    37c4:	de 01       	movw	r26, r28
    37c6:	ad 59       	subi	r26, 0x9D	; 157
    37c8:	bf 4f       	sbci	r27, 0xFF	; 255
    37ca:	fe 01       	movw	r30, r28
    37cc:	e9 59       	subi	r30, 0x99	; 153
    37ce:	ff 4f       	sbci	r31, 0xFF	; 255
    37d0:	80 81       	ld	r24, Z
    37d2:	91 81       	ldd	r25, Z+1	; 0x01
    37d4:	11 96       	adiw	r26, 0x01	; 1
    37d6:	9c 93       	st	X, r25
    37d8:	8e 93       	st	-X, r24
    37da:	fe 01       	movw	r30, r28
    37dc:	ed 59       	subi	r30, 0x9D	; 157
    37de:	ff 4f       	sbci	r31, 0xFF	; 255
    37e0:	80 81       	ld	r24, Z
    37e2:	91 81       	ldd	r25, Z+1	; 0x01
    37e4:	01 97       	sbiw	r24, 0x01	; 1
    37e6:	f1 f7       	brne	.-4      	; 0x37e4 <main+0x18e2>
    37e8:	fe 01       	movw	r30, r28
    37ea:	ed 59       	subi	r30, 0x9D	; 157
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	91 83       	std	Z+1, r25	; 0x01
    37f0:	80 83       	st	Z, r24
    37f2:	46 c4       	rjmp	.+2188   	; 0x4080 <main+0x217e>
			case 5 : arr[i]=4;CLCD_voidSendNum(4);_delay_ms(1);break;
    37f4:	fe 01       	movw	r30, r28
    37f6:	eb 5e       	subi	r30, 0xEB	; 235
    37f8:	fe 4f       	sbci	r31, 0xFE	; 254
    37fa:	80 81       	ld	r24, Z
    37fc:	28 2f       	mov	r18, r24
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	ce 01       	movw	r24, r28
    3802:	87 5e       	subi	r24, 0xE7	; 231
    3804:	9e 4f       	sbci	r25, 0xFE	; 254
    3806:	fc 01       	movw	r30, r24
    3808:	e2 0f       	add	r30, r18
    380a:	f3 1f       	adc	r31, r19
    380c:	84 e0       	ldi	r24, 0x04	; 4
    380e:	80 83       	st	Z, r24
    3810:	64 e0       	ldi	r22, 0x04	; 4
    3812:	70 e0       	ldi	r23, 0x00	; 0
    3814:	80 e0       	ldi	r24, 0x00	; 0
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    381c:	fe 01       	movw	r30, r28
    381e:	e1 5a       	subi	r30, 0xA1	; 161
    3820:	ff 4f       	sbci	r31, 0xFF	; 255
    3822:	80 e0       	ldi	r24, 0x00	; 0
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	a0 e8       	ldi	r26, 0x80	; 128
    3828:	bf e3       	ldi	r27, 0x3F	; 63
    382a:	80 83       	st	Z, r24
    382c:	91 83       	std	Z+1, r25	; 0x01
    382e:	a2 83       	std	Z+2, r26	; 0x02
    3830:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3832:	8e 01       	movw	r16, r28
    3834:	05 5a       	subi	r16, 0xA5	; 165
    3836:	1f 4f       	sbci	r17, 0xFF	; 255
    3838:	fe 01       	movw	r30, r28
    383a:	e1 5a       	subi	r30, 0xA1	; 161
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	60 81       	ld	r22, Z
    3840:	71 81       	ldd	r23, Z+1	; 0x01
    3842:	82 81       	ldd	r24, Z+2	; 0x02
    3844:	93 81       	ldd	r25, Z+3	; 0x03
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	4a ef       	ldi	r20, 0xFA	; 250
    384c:	54 e4       	ldi	r21, 0x44	; 68
    384e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	f8 01       	movw	r30, r16
    3858:	80 83       	st	Z, r24
    385a:	91 83       	std	Z+1, r25	; 0x01
    385c:	a2 83       	std	Z+2, r26	; 0x02
    385e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3860:	fe 01       	movw	r30, r28
    3862:	e5 5a       	subi	r30, 0xA5	; 165
    3864:	ff 4f       	sbci	r31, 0xFF	; 255
    3866:	60 81       	ld	r22, Z
    3868:	71 81       	ldd	r23, Z+1	; 0x01
    386a:	82 81       	ldd	r24, Z+2	; 0x02
    386c:	93 81       	ldd	r25, Z+3	; 0x03
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	40 e8       	ldi	r20, 0x80	; 128
    3874:	5f e3       	ldi	r21, 0x3F	; 63
    3876:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    387a:	88 23       	and	r24, r24
    387c:	44 f4       	brge	.+16     	; 0x388e <main+0x198c>
		__ticks = 1;
    387e:	fe 01       	movw	r30, r28
    3880:	e7 5a       	subi	r30, 0xA7	; 167
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	81 e0       	ldi	r24, 0x01	; 1
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	91 83       	std	Z+1, r25	; 0x01
    388a:	80 83       	st	Z, r24
    388c:	64 c0       	rjmp	.+200    	; 0x3956 <main+0x1a54>
	else if (__tmp > 65535)
    388e:	fe 01       	movw	r30, r28
    3890:	e5 5a       	subi	r30, 0xA5	; 165
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	60 81       	ld	r22, Z
    3896:	71 81       	ldd	r23, Z+1	; 0x01
    3898:	82 81       	ldd	r24, Z+2	; 0x02
    389a:	93 81       	ldd	r25, Z+3	; 0x03
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	3f ef       	ldi	r19, 0xFF	; 255
    38a0:	4f e7       	ldi	r20, 0x7F	; 127
    38a2:	57 e4       	ldi	r21, 0x47	; 71
    38a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    38a8:	18 16       	cp	r1, r24
    38aa:	0c f0       	brlt	.+2      	; 0x38ae <main+0x19ac>
    38ac:	43 c0       	rjmp	.+134    	; 0x3934 <main+0x1a32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ae:	fe 01       	movw	r30, r28
    38b0:	e1 5a       	subi	r30, 0xA1	; 161
    38b2:	ff 4f       	sbci	r31, 0xFF	; 255
    38b4:	60 81       	ld	r22, Z
    38b6:	71 81       	ldd	r23, Z+1	; 0x01
    38b8:	82 81       	ldd	r24, Z+2	; 0x02
    38ba:	93 81       	ldd	r25, Z+3	; 0x03
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	40 e2       	ldi	r20, 0x20	; 32
    38c2:	51 e4       	ldi	r21, 0x41	; 65
    38c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	8e 01       	movw	r16, r28
    38ce:	07 5a       	subi	r16, 0xA7	; 167
    38d0:	1f 4f       	sbci	r17, 0xFF	; 255
    38d2:	bc 01       	movw	r22, r24
    38d4:	cd 01       	movw	r24, r26
    38d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	f8 01       	movw	r30, r16
    38e0:	91 83       	std	Z+1, r25	; 0x01
    38e2:	80 83       	st	Z, r24
    38e4:	1f c0       	rjmp	.+62     	; 0x3924 <main+0x1a22>
    38e6:	fe 01       	movw	r30, r28
    38e8:	e9 5a       	subi	r30, 0xA9	; 169
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	88 ec       	ldi	r24, 0xC8	; 200
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	91 83       	std	Z+1, r25	; 0x01
    38f2:	80 83       	st	Z, r24
    38f4:	fe 01       	movw	r30, r28
    38f6:	e9 5a       	subi	r30, 0xA9	; 169
    38f8:	ff 4f       	sbci	r31, 0xFF	; 255
    38fa:	80 81       	ld	r24, Z
    38fc:	91 81       	ldd	r25, Z+1	; 0x01
    38fe:	01 97       	sbiw	r24, 0x01	; 1
    3900:	f1 f7       	brne	.-4      	; 0x38fe <main+0x19fc>
    3902:	fe 01       	movw	r30, r28
    3904:	e9 5a       	subi	r30, 0xA9	; 169
    3906:	ff 4f       	sbci	r31, 0xFF	; 255
    3908:	91 83       	std	Z+1, r25	; 0x01
    390a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    390c:	de 01       	movw	r26, r28
    390e:	a7 5a       	subi	r26, 0xA7	; 167
    3910:	bf 4f       	sbci	r27, 0xFF	; 255
    3912:	fe 01       	movw	r30, r28
    3914:	e7 5a       	subi	r30, 0xA7	; 167
    3916:	ff 4f       	sbci	r31, 0xFF	; 255
    3918:	80 81       	ld	r24, Z
    391a:	91 81       	ldd	r25, Z+1	; 0x01
    391c:	01 97       	sbiw	r24, 0x01	; 1
    391e:	11 96       	adiw	r26, 0x01	; 1
    3920:	9c 93       	st	X, r25
    3922:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3924:	fe 01       	movw	r30, r28
    3926:	e7 5a       	subi	r30, 0xA7	; 167
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	80 81       	ld	r24, Z
    392c:	91 81       	ldd	r25, Z+1	; 0x01
    392e:	00 97       	sbiw	r24, 0x00	; 0
    3930:	d1 f6       	brne	.-76     	; 0x38e6 <main+0x19e4>
    3932:	a6 c3       	rjmp	.+1868   	; 0x4080 <main+0x217e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3934:	8e 01       	movw	r16, r28
    3936:	07 5a       	subi	r16, 0xA7	; 167
    3938:	1f 4f       	sbci	r17, 0xFF	; 255
    393a:	fe 01       	movw	r30, r28
    393c:	e5 5a       	subi	r30, 0xA5	; 165
    393e:	ff 4f       	sbci	r31, 0xFF	; 255
    3940:	60 81       	ld	r22, Z
    3942:	71 81       	ldd	r23, Z+1	; 0x01
    3944:	82 81       	ldd	r24, Z+2	; 0x02
    3946:	93 81       	ldd	r25, Z+3	; 0x03
    3948:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	f8 01       	movw	r30, r16
    3952:	91 83       	std	Z+1, r25	; 0x01
    3954:	80 83       	st	Z, r24
    3956:	de 01       	movw	r26, r28
    3958:	ab 5a       	subi	r26, 0xAB	; 171
    395a:	bf 4f       	sbci	r27, 0xFF	; 255
    395c:	fe 01       	movw	r30, r28
    395e:	e7 5a       	subi	r30, 0xA7	; 167
    3960:	ff 4f       	sbci	r31, 0xFF	; 255
    3962:	80 81       	ld	r24, Z
    3964:	91 81       	ldd	r25, Z+1	; 0x01
    3966:	11 96       	adiw	r26, 0x01	; 1
    3968:	9c 93       	st	X, r25
    396a:	8e 93       	st	-X, r24
    396c:	fe 01       	movw	r30, r28
    396e:	eb 5a       	subi	r30, 0xAB	; 171
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	80 81       	ld	r24, Z
    3974:	91 81       	ldd	r25, Z+1	; 0x01
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	f1 f7       	brne	.-4      	; 0x3976 <main+0x1a74>
    397a:	fe 01       	movw	r30, r28
    397c:	eb 5a       	subi	r30, 0xAB	; 171
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	91 83       	std	Z+1, r25	; 0x01
    3982:	80 83       	st	Z, r24
    3984:	7d c3       	rjmp	.+1786   	; 0x4080 <main+0x217e>
			case 6 : arr[i]=5;CLCD_voidSendNum(5);_delay_ms(1);break;
    3986:	fe 01       	movw	r30, r28
    3988:	eb 5e       	subi	r30, 0xEB	; 235
    398a:	fe 4f       	sbci	r31, 0xFE	; 254
    398c:	80 81       	ld	r24, Z
    398e:	28 2f       	mov	r18, r24
    3990:	30 e0       	ldi	r19, 0x00	; 0
    3992:	ce 01       	movw	r24, r28
    3994:	87 5e       	subi	r24, 0xE7	; 231
    3996:	9e 4f       	sbci	r25, 0xFE	; 254
    3998:	fc 01       	movw	r30, r24
    399a:	e2 0f       	add	r30, r18
    399c:	f3 1f       	adc	r31, r19
    399e:	85 e0       	ldi	r24, 0x05	; 5
    39a0:	80 83       	st	Z, r24
    39a2:	65 e0       	ldi	r22, 0x05	; 5
    39a4:	70 e0       	ldi	r23, 0x00	; 0
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    39ae:	fe 01       	movw	r30, r28
    39b0:	ef 5a       	subi	r30, 0xAF	; 175
    39b2:	ff 4f       	sbci	r31, 0xFF	; 255
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	a0 e8       	ldi	r26, 0x80	; 128
    39ba:	bf e3       	ldi	r27, 0x3F	; 63
    39bc:	80 83       	st	Z, r24
    39be:	91 83       	std	Z+1, r25	; 0x01
    39c0:	a2 83       	std	Z+2, r26	; 0x02
    39c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c4:	8e 01       	movw	r16, r28
    39c6:	03 5b       	subi	r16, 0xB3	; 179
    39c8:	1f 4f       	sbci	r17, 0xFF	; 255
    39ca:	fe 01       	movw	r30, r28
    39cc:	ef 5a       	subi	r30, 0xAF	; 175
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	60 81       	ld	r22, Z
    39d2:	71 81       	ldd	r23, Z+1	; 0x01
    39d4:	82 81       	ldd	r24, Z+2	; 0x02
    39d6:	93 81       	ldd	r25, Z+3	; 0x03
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	4a ef       	ldi	r20, 0xFA	; 250
    39de:	54 e4       	ldi	r21, 0x44	; 68
    39e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	f8 01       	movw	r30, r16
    39ea:	80 83       	st	Z, r24
    39ec:	91 83       	std	Z+1, r25	; 0x01
    39ee:	a2 83       	std	Z+2, r26	; 0x02
    39f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39f2:	fe 01       	movw	r30, r28
    39f4:	e3 5b       	subi	r30, 0xB3	; 179
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	60 81       	ld	r22, Z
    39fa:	71 81       	ldd	r23, Z+1	; 0x01
    39fc:	82 81       	ldd	r24, Z+2	; 0x02
    39fe:	93 81       	ldd	r25, Z+3	; 0x03
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	40 e8       	ldi	r20, 0x80	; 128
    3a06:	5f e3       	ldi	r21, 0x3F	; 63
    3a08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3a0c:	88 23       	and	r24, r24
    3a0e:	44 f4       	brge	.+16     	; 0x3a20 <main+0x1b1e>
		__ticks = 1;
    3a10:	fe 01       	movw	r30, r28
    3a12:	e5 5b       	subi	r30, 0xB5	; 181
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	91 83       	std	Z+1, r25	; 0x01
    3a1c:	80 83       	st	Z, r24
    3a1e:	64 c0       	rjmp	.+200    	; 0x3ae8 <main+0x1be6>
	else if (__tmp > 65535)
    3a20:	fe 01       	movw	r30, r28
    3a22:	e3 5b       	subi	r30, 0xB3	; 179
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	60 81       	ld	r22, Z
    3a28:	71 81       	ldd	r23, Z+1	; 0x01
    3a2a:	82 81       	ldd	r24, Z+2	; 0x02
    3a2c:	93 81       	ldd	r25, Z+3	; 0x03
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	3f ef       	ldi	r19, 0xFF	; 255
    3a32:	4f e7       	ldi	r20, 0x7F	; 127
    3a34:	57 e4       	ldi	r21, 0x47	; 71
    3a36:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3a3a:	18 16       	cp	r1, r24
    3a3c:	0c f0       	brlt	.+2      	; 0x3a40 <main+0x1b3e>
    3a3e:	43 c0       	rjmp	.+134    	; 0x3ac6 <main+0x1bc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a40:	fe 01       	movw	r30, r28
    3a42:	ef 5a       	subi	r30, 0xAF	; 175
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	60 81       	ld	r22, Z
    3a48:	71 81       	ldd	r23, Z+1	; 0x01
    3a4a:	82 81       	ldd	r24, Z+2	; 0x02
    3a4c:	93 81       	ldd	r25, Z+3	; 0x03
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e2       	ldi	r20, 0x20	; 32
    3a54:	51 e4       	ldi	r21, 0x41	; 65
    3a56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	8e 01       	movw	r16, r28
    3a60:	05 5b       	subi	r16, 0xB5	; 181
    3a62:	1f 4f       	sbci	r17, 0xFF	; 255
    3a64:	bc 01       	movw	r22, r24
    3a66:	cd 01       	movw	r24, r26
    3a68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	f8 01       	movw	r30, r16
    3a72:	91 83       	std	Z+1, r25	; 0x01
    3a74:	80 83       	st	Z, r24
    3a76:	1f c0       	rjmp	.+62     	; 0x3ab6 <main+0x1bb4>
    3a78:	fe 01       	movw	r30, r28
    3a7a:	e7 5b       	subi	r30, 0xB7	; 183
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	88 ec       	ldi	r24, 0xC8	; 200
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	91 83       	std	Z+1, r25	; 0x01
    3a84:	80 83       	st	Z, r24
    3a86:	fe 01       	movw	r30, r28
    3a88:	e7 5b       	subi	r30, 0xB7	; 183
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	80 81       	ld	r24, Z
    3a8e:	91 81       	ldd	r25, Z+1	; 0x01
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	f1 f7       	brne	.-4      	; 0x3a90 <main+0x1b8e>
    3a94:	fe 01       	movw	r30, r28
    3a96:	e7 5b       	subi	r30, 0xB7	; 183
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	91 83       	std	Z+1, r25	; 0x01
    3a9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9e:	de 01       	movw	r26, r28
    3aa0:	a5 5b       	subi	r26, 0xB5	; 181
    3aa2:	bf 4f       	sbci	r27, 0xFF	; 255
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	e5 5b       	subi	r30, 0xB5	; 181
    3aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aaa:	80 81       	ld	r24, Z
    3aac:	91 81       	ldd	r25, Z+1	; 0x01
    3aae:	01 97       	sbiw	r24, 0x01	; 1
    3ab0:	11 96       	adiw	r26, 0x01	; 1
    3ab2:	9c 93       	st	X, r25
    3ab4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	e5 5b       	subi	r30, 0xB5	; 181
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	80 81       	ld	r24, Z
    3abe:	91 81       	ldd	r25, Z+1	; 0x01
    3ac0:	00 97       	sbiw	r24, 0x00	; 0
    3ac2:	d1 f6       	brne	.-76     	; 0x3a78 <main+0x1b76>
    3ac4:	dd c2       	rjmp	.+1466   	; 0x4080 <main+0x217e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac6:	8e 01       	movw	r16, r28
    3ac8:	05 5b       	subi	r16, 0xB5	; 181
    3aca:	1f 4f       	sbci	r17, 0xFF	; 255
    3acc:	fe 01       	movw	r30, r28
    3ace:	e3 5b       	subi	r30, 0xB3	; 179
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	60 81       	ld	r22, Z
    3ad4:	71 81       	ldd	r23, Z+1	; 0x01
    3ad6:	82 81       	ldd	r24, Z+2	; 0x02
    3ad8:	93 81       	ldd	r25, Z+3	; 0x03
    3ada:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	f8 01       	movw	r30, r16
    3ae4:	91 83       	std	Z+1, r25	; 0x01
    3ae6:	80 83       	st	Z, r24
    3ae8:	de 01       	movw	r26, r28
    3aea:	a9 5b       	subi	r26, 0xB9	; 185
    3aec:	bf 4f       	sbci	r27, 0xFF	; 255
    3aee:	fe 01       	movw	r30, r28
    3af0:	e5 5b       	subi	r30, 0xB5	; 181
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	80 81       	ld	r24, Z
    3af6:	91 81       	ldd	r25, Z+1	; 0x01
    3af8:	11 96       	adiw	r26, 0x01	; 1
    3afa:	9c 93       	st	X, r25
    3afc:	8e 93       	st	-X, r24
    3afe:	fe 01       	movw	r30, r28
    3b00:	e9 5b       	subi	r30, 0xB9	; 185
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	80 81       	ld	r24, Z
    3b06:	91 81       	ldd	r25, Z+1	; 0x01
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	f1 f7       	brne	.-4      	; 0x3b08 <main+0x1c06>
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	e9 5b       	subi	r30, 0xB9	; 185
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	91 83       	std	Z+1, r25	; 0x01
    3b14:	80 83       	st	Z, r24
    3b16:	b4 c2       	rjmp	.+1384   	; 0x4080 <main+0x217e>
			case 7 : arr[i]=6; CLCD_voidSendNum(6);_delay_ms(1);break;
    3b18:	fe 01       	movw	r30, r28
    3b1a:	eb 5e       	subi	r30, 0xEB	; 235
    3b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b1e:	80 81       	ld	r24, Z
    3b20:	28 2f       	mov	r18, r24
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	ce 01       	movw	r24, r28
    3b26:	87 5e       	subi	r24, 0xE7	; 231
    3b28:	9e 4f       	sbci	r25, 0xFE	; 254
    3b2a:	fc 01       	movw	r30, r24
    3b2c:	e2 0f       	add	r30, r18
    3b2e:	f3 1f       	adc	r31, r19
    3b30:	86 e0       	ldi	r24, 0x06	; 6
    3b32:	80 83       	st	Z, r24
    3b34:	66 e0       	ldi	r22, 0x06	; 6
    3b36:	70 e0       	ldi	r23, 0x00	; 0
    3b38:	80 e0       	ldi	r24, 0x00	; 0
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    3b40:	fe 01       	movw	r30, r28
    3b42:	ed 5b       	subi	r30, 0xBD	; 189
    3b44:	ff 4f       	sbci	r31, 0xFF	; 255
    3b46:	80 e0       	ldi	r24, 0x00	; 0
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	a0 e8       	ldi	r26, 0x80	; 128
    3b4c:	bf e3       	ldi	r27, 0x3F	; 63
    3b4e:	80 83       	st	Z, r24
    3b50:	91 83       	std	Z+1, r25	; 0x01
    3b52:	a2 83       	std	Z+2, r26	; 0x02
    3b54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b56:	8e 01       	movw	r16, r28
    3b58:	01 5c       	subi	r16, 0xC1	; 193
    3b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	ed 5b       	subi	r30, 0xBD	; 189
    3b60:	ff 4f       	sbci	r31, 0xFF	; 255
    3b62:	60 81       	ld	r22, Z
    3b64:	71 81       	ldd	r23, Z+1	; 0x01
    3b66:	82 81       	ldd	r24, Z+2	; 0x02
    3b68:	93 81       	ldd	r25, Z+3	; 0x03
    3b6a:	20 e0       	ldi	r18, 0x00	; 0
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	4a ef       	ldi	r20, 0xFA	; 250
    3b70:	54 e4       	ldi	r21, 0x44	; 68
    3b72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	f8 01       	movw	r30, r16
    3b7c:	80 83       	st	Z, r24
    3b7e:	91 83       	std	Z+1, r25	; 0x01
    3b80:	a2 83       	std	Z+2, r26	; 0x02
    3b82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b84:	fe 01       	movw	r30, r28
    3b86:	ff 96       	adiw	r30, 0x3f	; 63
    3b88:	60 81       	ld	r22, Z
    3b8a:	71 81       	ldd	r23, Z+1	; 0x01
    3b8c:	82 81       	ldd	r24, Z+2	; 0x02
    3b8e:	93 81       	ldd	r25, Z+3	; 0x03
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	40 e8       	ldi	r20, 0x80	; 128
    3b96:	5f e3       	ldi	r21, 0x3F	; 63
    3b98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3b9c:	88 23       	and	r24, r24
    3b9e:	2c f4       	brge	.+10     	; 0x3baa <main+0x1ca8>
		__ticks = 1;
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	9e af       	std	Y+62, r25	; 0x3e
    3ba6:	8d af       	std	Y+61, r24	; 0x3d
    3ba8:	46 c0       	rjmp	.+140    	; 0x3c36 <main+0x1d34>
	else if (__tmp > 65535)
    3baa:	fe 01       	movw	r30, r28
    3bac:	ff 96       	adiw	r30, 0x3f	; 63
    3bae:	60 81       	ld	r22, Z
    3bb0:	71 81       	ldd	r23, Z+1	; 0x01
    3bb2:	82 81       	ldd	r24, Z+2	; 0x02
    3bb4:	93 81       	ldd	r25, Z+3	; 0x03
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	3f ef       	ldi	r19, 0xFF	; 255
    3bba:	4f e7       	ldi	r20, 0x7F	; 127
    3bbc:	57 e4       	ldi	r21, 0x47	; 71
    3bbe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3bc2:	18 16       	cp	r1, r24
    3bc4:	64 f5       	brge	.+88     	; 0x3c1e <main+0x1d1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	ed 5b       	subi	r30, 0xBD	; 189
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	60 81       	ld	r22, Z
    3bce:	71 81       	ldd	r23, Z+1	; 0x01
    3bd0:	82 81       	ldd	r24, Z+2	; 0x02
    3bd2:	93 81       	ldd	r25, Z+3	; 0x03
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	40 e2       	ldi	r20, 0x20	; 32
    3bda:	51 e4       	ldi	r21, 0x41	; 65
    3bdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	bc 01       	movw	r22, r24
    3be6:	cd 01       	movw	r24, r26
    3be8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bec:	dc 01       	movw	r26, r24
    3bee:	cb 01       	movw	r24, r22
    3bf0:	9e af       	std	Y+62, r25	; 0x3e
    3bf2:	8d af       	std	Y+61, r24	; 0x3d
    3bf4:	0f c0       	rjmp	.+30     	; 0x3c14 <main+0x1d12>
    3bf6:	88 ec       	ldi	r24, 0xC8	; 200
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	9c af       	std	Y+60, r25	; 0x3c
    3bfc:	8b af       	std	Y+59, r24	; 0x3b
    3bfe:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c00:	9c ad       	ldd	r25, Y+60	; 0x3c
    3c02:	01 97       	sbiw	r24, 0x01	; 1
    3c04:	f1 f7       	brne	.-4      	; 0x3c02 <main+0x1d00>
    3c06:	9c af       	std	Y+60, r25	; 0x3c
    3c08:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c0e:	01 97       	sbiw	r24, 0x01	; 1
    3c10:	9e af       	std	Y+62, r25	; 0x3e
    3c12:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c14:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c16:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c18:	00 97       	sbiw	r24, 0x00	; 0
    3c1a:	69 f7       	brne	.-38     	; 0x3bf6 <main+0x1cf4>
    3c1c:	31 c2       	rjmp	.+1122   	; 0x4080 <main+0x217e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c1e:	fe 01       	movw	r30, r28
    3c20:	ff 96       	adiw	r30, 0x3f	; 63
    3c22:	60 81       	ld	r22, Z
    3c24:	71 81       	ldd	r23, Z+1	; 0x01
    3c26:	82 81       	ldd	r24, Z+2	; 0x02
    3c28:	93 81       	ldd	r25, Z+3	; 0x03
    3c2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	9e af       	std	Y+62, r25	; 0x3e
    3c34:	8d af       	std	Y+61, r24	; 0x3d
    3c36:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c38:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c3a:	9a af       	std	Y+58, r25	; 0x3a
    3c3c:	89 af       	std	Y+57, r24	; 0x39
    3c3e:	89 ad       	ldd	r24, Y+57	; 0x39
    3c40:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c42:	01 97       	sbiw	r24, 0x01	; 1
    3c44:	f1 f7       	brne	.-4      	; 0x3c42 <main+0x1d40>
    3c46:	9a af       	std	Y+58, r25	; 0x3a
    3c48:	89 af       	std	Y+57, r24	; 0x39
    3c4a:	1a c2       	rjmp	.+1076   	; 0x4080 <main+0x217e>
			case 9 : arr[i]=1;CLCD_voidSendNum(1);_delay_ms(1);break;
    3c4c:	fe 01       	movw	r30, r28
    3c4e:	eb 5e       	subi	r30, 0xEB	; 235
    3c50:	fe 4f       	sbci	r31, 0xFE	; 254
    3c52:	80 81       	ld	r24, Z
    3c54:	28 2f       	mov	r18, r24
    3c56:	30 e0       	ldi	r19, 0x00	; 0
    3c58:	ce 01       	movw	r24, r28
    3c5a:	87 5e       	subi	r24, 0xE7	; 231
    3c5c:	9e 4f       	sbci	r25, 0xFE	; 254
    3c5e:	fc 01       	movw	r30, r24
    3c60:	e2 0f       	add	r30, r18
    3c62:	f3 1f       	adc	r31, r19
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	80 83       	st	Z, r24
    3c68:	61 e0       	ldi	r22, 0x01	; 1
    3c6a:	70 e0       	ldi	r23, 0x00	; 0
    3c6c:	80 e0       	ldi	r24, 0x00	; 0
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	a0 e8       	ldi	r26, 0x80	; 128
    3c7a:	bf e3       	ldi	r27, 0x3F	; 63
    3c7c:	8d ab       	std	Y+53, r24	; 0x35
    3c7e:	9e ab       	std	Y+54, r25	; 0x36
    3c80:	af ab       	std	Y+55, r26	; 0x37
    3c82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c84:	6d a9       	ldd	r22, Y+53	; 0x35
    3c86:	7e a9       	ldd	r23, Y+54	; 0x36
    3c88:	8f a9       	ldd	r24, Y+55	; 0x37
    3c8a:	98 ad       	ldd	r25, Y+56	; 0x38
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	4a ef       	ldi	r20, 0xFA	; 250
    3c92:	54 e4       	ldi	r21, 0x44	; 68
    3c94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	89 ab       	std	Y+49, r24	; 0x31
    3c9e:	9a ab       	std	Y+50, r25	; 0x32
    3ca0:	ab ab       	std	Y+51, r26	; 0x33
    3ca2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3ca4:	69 a9       	ldd	r22, Y+49	; 0x31
    3ca6:	7a a9       	ldd	r23, Y+50	; 0x32
    3ca8:	8b a9       	ldd	r24, Y+51	; 0x33
    3caa:	9c a9       	ldd	r25, Y+52	; 0x34
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	40 e8       	ldi	r20, 0x80	; 128
    3cb2:	5f e3       	ldi	r21, 0x3F	; 63
    3cb4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3cb8:	88 23       	and	r24, r24
    3cba:	2c f4       	brge	.+10     	; 0x3cc6 <main+0x1dc4>
		__ticks = 1;
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	98 ab       	std	Y+48, r25	; 0x30
    3cc2:	8f a7       	std	Y+47, r24	; 0x2f
    3cc4:	3f c0       	rjmp	.+126    	; 0x3d44 <main+0x1e42>
	else if (__tmp > 65535)
    3cc6:	69 a9       	ldd	r22, Y+49	; 0x31
    3cc8:	7a a9       	ldd	r23, Y+50	; 0x32
    3cca:	8b a9       	ldd	r24, Y+51	; 0x33
    3ccc:	9c a9       	ldd	r25, Y+52	; 0x34
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	3f ef       	ldi	r19, 0xFF	; 255
    3cd2:	4f e7       	ldi	r20, 0x7F	; 127
    3cd4:	57 e4       	ldi	r21, 0x47	; 71
    3cd6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3cda:	18 16       	cp	r1, r24
    3cdc:	4c f5       	brge	.+82     	; 0x3d30 <main+0x1e2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cde:	6d a9       	ldd	r22, Y+53	; 0x35
    3ce0:	7e a9       	ldd	r23, Y+54	; 0x36
    3ce2:	8f a9       	ldd	r24, Y+55	; 0x37
    3ce4:	98 ad       	ldd	r25, Y+56	; 0x38
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	40 e2       	ldi	r20, 0x20	; 32
    3cec:	51 e4       	ldi	r21, 0x41	; 65
    3cee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	cb 01       	movw	r24, r22
    3cf6:	bc 01       	movw	r22, r24
    3cf8:	cd 01       	movw	r24, r26
    3cfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	98 ab       	std	Y+48, r25	; 0x30
    3d04:	8f a7       	std	Y+47, r24	; 0x2f
    3d06:	0f c0       	rjmp	.+30     	; 0x3d26 <main+0x1e24>
    3d08:	88 ec       	ldi	r24, 0xC8	; 200
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	9e a7       	std	Y+46, r25	; 0x2e
    3d0e:	8d a7       	std	Y+45, r24	; 0x2d
    3d10:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d12:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d14:	01 97       	sbiw	r24, 0x01	; 1
    3d16:	f1 f7       	brne	.-4      	; 0x3d14 <main+0x1e12>
    3d18:	9e a7       	std	Y+46, r25	; 0x2e
    3d1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d1e:	98 a9       	ldd	r25, Y+48	; 0x30
    3d20:	01 97       	sbiw	r24, 0x01	; 1
    3d22:	98 ab       	std	Y+48, r25	; 0x30
    3d24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d26:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d28:	98 a9       	ldd	r25, Y+48	; 0x30
    3d2a:	00 97       	sbiw	r24, 0x00	; 0
    3d2c:	69 f7       	brne	.-38     	; 0x3d08 <main+0x1e06>
    3d2e:	a8 c1       	rjmp	.+848    	; 0x4080 <main+0x217e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d30:	69 a9       	ldd	r22, Y+49	; 0x31
    3d32:	7a a9       	ldd	r23, Y+50	; 0x32
    3d34:	8b a9       	ldd	r24, Y+51	; 0x33
    3d36:	9c a9       	ldd	r25, Y+52	; 0x34
    3d38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	98 ab       	std	Y+48, r25	; 0x30
    3d42:	8f a7       	std	Y+47, r24	; 0x2f
    3d44:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d46:	98 a9       	ldd	r25, Y+48	; 0x30
    3d48:	9c a7       	std	Y+44, r25	; 0x2c
    3d4a:	8b a7       	std	Y+43, r24	; 0x2b
    3d4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	f1 f7       	brne	.-4      	; 0x3d50 <main+0x1e4e>
    3d54:	9c a7       	std	Y+44, r25	; 0x2c
    3d56:	8b a7       	std	Y+43, r24	; 0x2b
    3d58:	93 c1       	rjmp	.+806    	; 0x4080 <main+0x217e>
			case 10: arr[i]=2;CLCD_voidSendNum(2);_delay_ms(1);break;
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	eb 5e       	subi	r30, 0xEB	; 235
    3d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d60:	80 81       	ld	r24, Z
    3d62:	28 2f       	mov	r18, r24
    3d64:	30 e0       	ldi	r19, 0x00	; 0
    3d66:	ce 01       	movw	r24, r28
    3d68:	87 5e       	subi	r24, 0xE7	; 231
    3d6a:	9e 4f       	sbci	r25, 0xFE	; 254
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	e2 0f       	add	r30, r18
    3d70:	f3 1f       	adc	r31, r19
    3d72:	82 e0       	ldi	r24, 0x02	; 2
    3d74:	80 83       	st	Z, r24
    3d76:	62 e0       	ldi	r22, 0x02	; 2
    3d78:	70 e0       	ldi	r23, 0x00	; 0
    3d7a:	80 e0       	ldi	r24, 0x00	; 0
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	a0 e8       	ldi	r26, 0x80	; 128
    3d88:	bf e3       	ldi	r27, 0x3F	; 63
    3d8a:	8f a3       	std	Y+39, r24	; 0x27
    3d8c:	98 a7       	std	Y+40, r25	; 0x28
    3d8e:	a9 a7       	std	Y+41, r26	; 0x29
    3d90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d92:	6f a1       	ldd	r22, Y+39	; 0x27
    3d94:	78 a5       	ldd	r23, Y+40	; 0x28
    3d96:	89 a5       	ldd	r24, Y+41	; 0x29
    3d98:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	4a ef       	ldi	r20, 0xFA	; 250
    3da0:	54 e4       	ldi	r21, 0x44	; 68
    3da2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	8b a3       	std	Y+35, r24	; 0x23
    3dac:	9c a3       	std	Y+36, r25	; 0x24
    3dae:	ad a3       	std	Y+37, r26	; 0x25
    3db0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3db2:	6b a1       	ldd	r22, Y+35	; 0x23
    3db4:	7c a1       	ldd	r23, Y+36	; 0x24
    3db6:	8d a1       	ldd	r24, Y+37	; 0x25
    3db8:	9e a1       	ldd	r25, Y+38	; 0x26
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	40 e8       	ldi	r20, 0x80	; 128
    3dc0:	5f e3       	ldi	r21, 0x3F	; 63
    3dc2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3dc6:	88 23       	and	r24, r24
    3dc8:	2c f4       	brge	.+10     	; 0x3dd4 <main+0x1ed2>
		__ticks = 1;
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	9a a3       	std	Y+34, r25	; 0x22
    3dd0:	89 a3       	std	Y+33, r24	; 0x21
    3dd2:	3f c0       	rjmp	.+126    	; 0x3e52 <main+0x1f50>
	else if (__tmp > 65535)
    3dd4:	6b a1       	ldd	r22, Y+35	; 0x23
    3dd6:	7c a1       	ldd	r23, Y+36	; 0x24
    3dd8:	8d a1       	ldd	r24, Y+37	; 0x25
    3dda:	9e a1       	ldd	r25, Y+38	; 0x26
    3ddc:	20 e0       	ldi	r18, 0x00	; 0
    3dde:	3f ef       	ldi	r19, 0xFF	; 255
    3de0:	4f e7       	ldi	r20, 0x7F	; 127
    3de2:	57 e4       	ldi	r21, 0x47	; 71
    3de4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3de8:	18 16       	cp	r1, r24
    3dea:	4c f5       	brge	.+82     	; 0x3e3e <main+0x1f3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dec:	6f a1       	ldd	r22, Y+39	; 0x27
    3dee:	78 a5       	ldd	r23, Y+40	; 0x28
    3df0:	89 a5       	ldd	r24, Y+41	; 0x29
    3df2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	40 e2       	ldi	r20, 0x20	; 32
    3dfa:	51 e4       	ldi	r21, 0x41	; 65
    3dfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	bc 01       	movw	r22, r24
    3e06:	cd 01       	movw	r24, r26
    3e08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	cb 01       	movw	r24, r22
    3e10:	9a a3       	std	Y+34, r25	; 0x22
    3e12:	89 a3       	std	Y+33, r24	; 0x21
    3e14:	0f c0       	rjmp	.+30     	; 0x3e34 <main+0x1f32>
    3e16:	88 ec       	ldi	r24, 0xC8	; 200
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	98 a3       	std	Y+32, r25	; 0x20
    3e1c:	8f 8f       	std	Y+31, r24	; 0x1f
    3e1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e20:	98 a1       	ldd	r25, Y+32	; 0x20
    3e22:	01 97       	sbiw	r24, 0x01	; 1
    3e24:	f1 f7       	brne	.-4      	; 0x3e22 <main+0x1f20>
    3e26:	98 a3       	std	Y+32, r25	; 0x20
    3e28:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e2a:	89 a1       	ldd	r24, Y+33	; 0x21
    3e2c:	9a a1       	ldd	r25, Y+34	; 0x22
    3e2e:	01 97       	sbiw	r24, 0x01	; 1
    3e30:	9a a3       	std	Y+34, r25	; 0x22
    3e32:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e34:	89 a1       	ldd	r24, Y+33	; 0x21
    3e36:	9a a1       	ldd	r25, Y+34	; 0x22
    3e38:	00 97       	sbiw	r24, 0x00	; 0
    3e3a:	69 f7       	brne	.-38     	; 0x3e16 <main+0x1f14>
    3e3c:	21 c1       	rjmp	.+578    	; 0x4080 <main+0x217e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e3e:	6b a1       	ldd	r22, Y+35	; 0x23
    3e40:	7c a1       	ldd	r23, Y+36	; 0x24
    3e42:	8d a1       	ldd	r24, Y+37	; 0x25
    3e44:	9e a1       	ldd	r25, Y+38	; 0x26
    3e46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	9a a3       	std	Y+34, r25	; 0x22
    3e50:	89 a3       	std	Y+33, r24	; 0x21
    3e52:	89 a1       	ldd	r24, Y+33	; 0x21
    3e54:	9a a1       	ldd	r25, Y+34	; 0x22
    3e56:	9e 8f       	std	Y+30, r25	; 0x1e
    3e58:	8d 8f       	std	Y+29, r24	; 0x1d
    3e5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e5e:	01 97       	sbiw	r24, 0x01	; 1
    3e60:	f1 f7       	brne	.-4      	; 0x3e5e <main+0x1f5c>
    3e62:	9e 8f       	std	Y+30, r25	; 0x1e
    3e64:	8d 8f       	std	Y+29, r24	; 0x1d
    3e66:	0c c1       	rjmp	.+536    	; 0x4080 <main+0x217e>
			case 11: arr[i]=3;CLCD_voidSendNum(3);_delay_ms(1);break;
    3e68:	fe 01       	movw	r30, r28
    3e6a:	eb 5e       	subi	r30, 0xEB	; 235
    3e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e6e:	80 81       	ld	r24, Z
    3e70:	28 2f       	mov	r18, r24
    3e72:	30 e0       	ldi	r19, 0x00	; 0
    3e74:	ce 01       	movw	r24, r28
    3e76:	87 5e       	subi	r24, 0xE7	; 231
    3e78:	9e 4f       	sbci	r25, 0xFE	; 254
    3e7a:	fc 01       	movw	r30, r24
    3e7c:	e2 0f       	add	r30, r18
    3e7e:	f3 1f       	adc	r31, r19
    3e80:	83 e0       	ldi	r24, 0x03	; 3
    3e82:	80 83       	st	Z, r24
    3e84:	63 e0       	ldi	r22, 0x03	; 3
    3e86:	70 e0       	ldi	r23, 0x00	; 0
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    3e90:	80 e0       	ldi	r24, 0x00	; 0
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	a0 e8       	ldi	r26, 0x80	; 128
    3e96:	bf e3       	ldi	r27, 0x3F	; 63
    3e98:	89 8f       	std	Y+25, r24	; 0x19
    3e9a:	9a 8f       	std	Y+26, r25	; 0x1a
    3e9c:	ab 8f       	std	Y+27, r26	; 0x1b
    3e9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ea0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ea2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ea4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ea6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	4a ef       	ldi	r20, 0xFA	; 250
    3eae:	54 e4       	ldi	r21, 0x44	; 68
    3eb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	8d 8b       	std	Y+21, r24	; 0x15
    3eba:	9e 8b       	std	Y+22, r25	; 0x16
    3ebc:	af 8b       	std	Y+23, r26	; 0x17
    3ebe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ec0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ec2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ec4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ec6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	40 e8       	ldi	r20, 0x80	; 128
    3ece:	5f e3       	ldi	r21, 0x3F	; 63
    3ed0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3ed4:	88 23       	and	r24, r24
    3ed6:	2c f4       	brge	.+10     	; 0x3ee2 <main+0x1fe0>
		__ticks = 1;
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	9c 8b       	std	Y+20, r25	; 0x14
    3ede:	8b 8b       	std	Y+19, r24	; 0x13
    3ee0:	3f c0       	rjmp	.+126    	; 0x3f60 <main+0x205e>
	else if (__tmp > 65535)
    3ee2:	6d 89       	ldd	r22, Y+21	; 0x15
    3ee4:	7e 89       	ldd	r23, Y+22	; 0x16
    3ee6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ee8:	98 8d       	ldd	r25, Y+24	; 0x18
    3eea:	20 e0       	ldi	r18, 0x00	; 0
    3eec:	3f ef       	ldi	r19, 0xFF	; 255
    3eee:	4f e7       	ldi	r20, 0x7F	; 127
    3ef0:	57 e4       	ldi	r21, 0x47	; 71
    3ef2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3ef6:	18 16       	cp	r1, r24
    3ef8:	4c f5       	brge	.+82     	; 0x3f4c <main+0x204a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3efa:	69 8d       	ldd	r22, Y+25	; 0x19
    3efc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3efe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	40 e2       	ldi	r20, 0x20	; 32
    3f08:	51 e4       	ldi	r21, 0x41	; 65
    3f0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	bc 01       	movw	r22, r24
    3f14:	cd 01       	movw	r24, r26
    3f16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	cb 01       	movw	r24, r22
    3f1e:	9c 8b       	std	Y+20, r25	; 0x14
    3f20:	8b 8b       	std	Y+19, r24	; 0x13
    3f22:	0f c0       	rjmp	.+30     	; 0x3f42 <main+0x2040>
    3f24:	88 ec       	ldi	r24, 0xC8	; 200
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	9a 8b       	std	Y+18, r25	; 0x12
    3f2a:	89 8b       	std	Y+17, r24	; 0x11
    3f2c:	89 89       	ldd	r24, Y+17	; 0x11
    3f2e:	9a 89       	ldd	r25, Y+18	; 0x12
    3f30:	01 97       	sbiw	r24, 0x01	; 1
    3f32:	f1 f7       	brne	.-4      	; 0x3f30 <main+0x202e>
    3f34:	9a 8b       	std	Y+18, r25	; 0x12
    3f36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f38:	8b 89       	ldd	r24, Y+19	; 0x13
    3f3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3f3c:	01 97       	sbiw	r24, 0x01	; 1
    3f3e:	9c 8b       	std	Y+20, r25	; 0x14
    3f40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f42:	8b 89       	ldd	r24, Y+19	; 0x13
    3f44:	9c 89       	ldd	r25, Y+20	; 0x14
    3f46:	00 97       	sbiw	r24, 0x00	; 0
    3f48:	69 f7       	brne	.-38     	; 0x3f24 <main+0x2022>
    3f4a:	9a c0       	rjmp	.+308    	; 0x4080 <main+0x217e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f4c:	6d 89       	ldd	r22, Y+21	; 0x15
    3f4e:	7e 89       	ldd	r23, Y+22	; 0x16
    3f50:	8f 89       	ldd	r24, Y+23	; 0x17
    3f52:	98 8d       	ldd	r25, Y+24	; 0x18
    3f54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	9c 8b       	std	Y+20, r25	; 0x14
    3f5e:	8b 8b       	std	Y+19, r24	; 0x13
    3f60:	8b 89       	ldd	r24, Y+19	; 0x13
    3f62:	9c 89       	ldd	r25, Y+20	; 0x14
    3f64:	98 8b       	std	Y+16, r25	; 0x10
    3f66:	8f 87       	std	Y+15, r24	; 0x0f
    3f68:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f6a:	98 89       	ldd	r25, Y+16	; 0x10
    3f6c:	01 97       	sbiw	r24, 0x01	; 1
    3f6e:	f1 f7       	brne	.-4      	; 0x3f6c <main+0x206a>
    3f70:	98 8b       	std	Y+16, r25	; 0x10
    3f72:	8f 87       	std	Y+15, r24	; 0x0f
    3f74:	85 c0       	rjmp	.+266    	; 0x4080 <main+0x217e>
			case 14: arr[i]=0;CLCD_voidSendNum(0);_delay_ms(1);break;
    3f76:	fe 01       	movw	r30, r28
    3f78:	eb 5e       	subi	r30, 0xEB	; 235
    3f7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f7c:	80 81       	ld	r24, Z
    3f7e:	28 2f       	mov	r18, r24
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	ce 01       	movw	r24, r28
    3f84:	87 5e       	subi	r24, 0xE7	; 231
    3f86:	9e 4f       	sbci	r25, 0xFE	; 254
    3f88:	fc 01       	movw	r30, r24
    3f8a:	e2 0f       	add	r30, r18
    3f8c:	f3 1f       	adc	r31, r19
    3f8e:	10 82       	st	Z, r1
    3f90:	60 e0       	ldi	r22, 0x00	; 0
    3f92:	70 e0       	ldi	r23, 0x00	; 0
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	0e 94 b6 0a 	call	0x156c	; 0x156c <CLCD_voidSendNum>
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	a0 e8       	ldi	r26, 0x80	; 128
    3fa2:	bf e3       	ldi	r27, 0x3F	; 63
    3fa4:	8b 87       	std	Y+11, r24	; 0x0b
    3fa6:	9c 87       	std	Y+12, r25	; 0x0c
    3fa8:	ad 87       	std	Y+13, r26	; 0x0d
    3faa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fac:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fae:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	4a ef       	ldi	r20, 0xFA	; 250
    3fba:	54 e4       	ldi	r21, 0x44	; 68
    3fbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	cb 01       	movw	r24, r22
    3fc4:	8f 83       	std	Y+7, r24	; 0x07
    3fc6:	98 87       	std	Y+8, r25	; 0x08
    3fc8:	a9 87       	std	Y+9, r26	; 0x09
    3fca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    3fce:	78 85       	ldd	r23, Y+8	; 0x08
    3fd0:	89 85       	ldd	r24, Y+9	; 0x09
    3fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	30 e0       	ldi	r19, 0x00	; 0
    3fd8:	40 e8       	ldi	r20, 0x80	; 128
    3fda:	5f e3       	ldi	r21, 0x3F	; 63
    3fdc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3fe0:	88 23       	and	r24, r24
    3fe2:	2c f4       	brge	.+10     	; 0x3fee <main+0x20ec>
		__ticks = 1;
    3fe4:	81 e0       	ldi	r24, 0x01	; 1
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	9e 83       	std	Y+6, r25	; 0x06
    3fea:	8d 83       	std	Y+5, r24	; 0x05
    3fec:	3f c0       	rjmp	.+126    	; 0x406c <main+0x216a>
	else if (__tmp > 65535)
    3fee:	6f 81       	ldd	r22, Y+7	; 0x07
    3ff0:	78 85       	ldd	r23, Y+8	; 0x08
    3ff2:	89 85       	ldd	r24, Y+9	; 0x09
    3ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	3f ef       	ldi	r19, 0xFF	; 255
    3ffa:	4f e7       	ldi	r20, 0x7F	; 127
    3ffc:	57 e4       	ldi	r21, 0x47	; 71
    3ffe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4002:	18 16       	cp	r1, r24
    4004:	4c f5       	brge	.+82     	; 0x4058 <main+0x2156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4006:	6b 85       	ldd	r22, Y+11	; 0x0b
    4008:	7c 85       	ldd	r23, Y+12	; 0x0c
    400a:	8d 85       	ldd	r24, Y+13	; 0x0d
    400c:	9e 85       	ldd	r25, Y+14	; 0x0e
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	40 e2       	ldi	r20, 0x20	; 32
    4014:	51 e4       	ldi	r21, 0x41	; 65
    4016:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    401a:	dc 01       	movw	r26, r24
    401c:	cb 01       	movw	r24, r22
    401e:	bc 01       	movw	r22, r24
    4020:	cd 01       	movw	r24, r26
    4022:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4026:	dc 01       	movw	r26, r24
    4028:	cb 01       	movw	r24, r22
    402a:	9e 83       	std	Y+6, r25	; 0x06
    402c:	8d 83       	std	Y+5, r24	; 0x05
    402e:	0f c0       	rjmp	.+30     	; 0x404e <main+0x214c>
    4030:	88 ec       	ldi	r24, 0xC8	; 200
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	9c 83       	std	Y+4, r25	; 0x04
    4036:	8b 83       	std	Y+3, r24	; 0x03
    4038:	8b 81       	ldd	r24, Y+3	; 0x03
    403a:	9c 81       	ldd	r25, Y+4	; 0x04
    403c:	01 97       	sbiw	r24, 0x01	; 1
    403e:	f1 f7       	brne	.-4      	; 0x403c <main+0x213a>
    4040:	9c 83       	std	Y+4, r25	; 0x04
    4042:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4044:	8d 81       	ldd	r24, Y+5	; 0x05
    4046:	9e 81       	ldd	r25, Y+6	; 0x06
    4048:	01 97       	sbiw	r24, 0x01	; 1
    404a:	9e 83       	std	Y+6, r25	; 0x06
    404c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    404e:	8d 81       	ldd	r24, Y+5	; 0x05
    4050:	9e 81       	ldd	r25, Y+6	; 0x06
    4052:	00 97       	sbiw	r24, 0x00	; 0
    4054:	69 f7       	brne	.-38     	; 0x4030 <main+0x212e>
    4056:	14 c0       	rjmp	.+40     	; 0x4080 <main+0x217e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4058:	6f 81       	ldd	r22, Y+7	; 0x07
    405a:	78 85       	ldd	r23, Y+8	; 0x08
    405c:	89 85       	ldd	r24, Y+9	; 0x09
    405e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4060:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4064:	dc 01       	movw	r26, r24
    4066:	cb 01       	movw	r24, r22
    4068:	9e 83       	std	Y+6, r25	; 0x06
    406a:	8d 83       	std	Y+5, r24	; 0x05
    406c:	8d 81       	ldd	r24, Y+5	; 0x05
    406e:	9e 81       	ldd	r25, Y+6	; 0x06
    4070:	9a 83       	std	Y+2, r25	; 0x02
    4072:	89 83       	std	Y+1, r24	; 0x01
    4074:	89 81       	ldd	r24, Y+1	; 0x01
    4076:	9a 81       	ldd	r25, Y+2	; 0x02
    4078:	01 97       	sbiw	r24, 0x01	; 1
    407a:	f1 f7       	brne	.-4      	; 0x4078 <main+0x2176>
    407c:	9a 83       	std	Y+2, r25	; 0x02
    407e:	89 83       	std	Y+1, r24	; 0x01
			}

			//in case user entered a number more than one digit
			for(j=0;j<i;j++)
    4080:	fe 01       	movw	r30, r28
    4082:	ec 5e       	subi	r30, 0xEC	; 236
    4084:	fe 4f       	sbci	r31, 0xFE	; 254
    4086:	10 82       	st	Z, r1
    4088:	30 c0       	rjmp	.+96     	; 0x40ea <main+0x21e8>
			{
				arr[j] *= 10;
    408a:	fe 01       	movw	r30, r28
    408c:	ec 5e       	subi	r30, 0xEC	; 236
    408e:	fe 4f       	sbci	r31, 0xFE	; 254
    4090:	80 81       	ld	r24, Z
    4092:	48 2f       	mov	r20, r24
    4094:	50 e0       	ldi	r21, 0x00	; 0
    4096:	fe 01       	movw	r30, r28
    4098:	ec 5e       	subi	r30, 0xEC	; 236
    409a:	fe 4f       	sbci	r31, 0xFE	; 254
    409c:	80 81       	ld	r24, Z
    409e:	28 2f       	mov	r18, r24
    40a0:	30 e0       	ldi	r19, 0x00	; 0
    40a2:	ce 01       	movw	r24, r28
    40a4:	87 5e       	subi	r24, 0xE7	; 231
    40a6:	9e 4f       	sbci	r25, 0xFE	; 254
    40a8:	fc 01       	movw	r30, r24
    40aa:	e2 0f       	add	r30, r18
    40ac:	f3 1f       	adc	r31, r19
    40ae:	80 81       	ld	r24, Z
    40b0:	88 2f       	mov	r24, r24
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	9c 01       	movw	r18, r24
    40b6:	22 0f       	add	r18, r18
    40b8:	33 1f       	adc	r19, r19
    40ba:	c9 01       	movw	r24, r18
    40bc:	88 0f       	add	r24, r24
    40be:	99 1f       	adc	r25, r25
    40c0:	88 0f       	add	r24, r24
    40c2:	99 1f       	adc	r25, r25
    40c4:	82 0f       	add	r24, r18
    40c6:	93 1f       	adc	r25, r19
    40c8:	28 2f       	mov	r18, r24
    40ca:	ce 01       	movw	r24, r28
    40cc:	87 5e       	subi	r24, 0xE7	; 231
    40ce:	9e 4f       	sbci	r25, 0xFE	; 254
    40d0:	fc 01       	movw	r30, r24
    40d2:	e4 0f       	add	r30, r20
    40d4:	f5 1f       	adc	r31, r21
    40d6:	20 83       	st	Z, r18
			case 11: arr[i]=3;CLCD_voidSendNum(3);_delay_ms(1);break;
			case 14: arr[i]=0;CLCD_voidSendNum(0);_delay_ms(1);break;
			}

			//in case user entered a number more than one digit
			for(j=0;j<i;j++)
    40d8:	de 01       	movw	r26, r28
    40da:	ac 5e       	subi	r26, 0xEC	; 236
    40dc:	be 4f       	sbci	r27, 0xFE	; 254
    40de:	fe 01       	movw	r30, r28
    40e0:	ec 5e       	subi	r30, 0xEC	; 236
    40e2:	fe 4f       	sbci	r31, 0xFE	; 254
    40e4:	80 81       	ld	r24, Z
    40e6:	8f 5f       	subi	r24, 0xFF	; 255
    40e8:	8c 93       	st	X, r24
    40ea:	fe 01       	movw	r30, r28
    40ec:	ec 5e       	subi	r30, 0xEC	; 236
    40ee:	fe 4f       	sbci	r31, 0xFE	; 254
    40f0:	de 01       	movw	r26, r28
    40f2:	ab 5e       	subi	r26, 0xEB	; 235
    40f4:	be 4f       	sbci	r27, 0xFE	; 254
    40f6:	90 81       	ld	r25, Z
    40f8:	8c 91       	ld	r24, X
    40fa:	98 17       	cp	r25, r24
    40fc:	30 f2       	brcs	.-116    	; 0x408a <main+0x2188>
			{
				arr[j] *= 10;
			}
			i++;
    40fe:	de 01       	movw	r26, r28
    4100:	ab 5e       	subi	r26, 0xEB	; 235
    4102:	be 4f       	sbci	r27, 0xFE	; 254
    4104:	fe 01       	movw	r30, r28
    4106:	eb 5e       	subi	r30, 0xEB	; 235
    4108:	fe 4f       	sbci	r31, 0xFE	; 254
    410a:	80 81       	ld	r24, Z
    410c:	8f 5f       	subi	r24, 0xFF	; 255
    410e:	8c 93       	st	X, r24
    4110:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <main+0x66>

00004114 <__udivmodsi4>:
    4114:	a1 e2       	ldi	r26, 0x21	; 33
    4116:	1a 2e       	mov	r1, r26
    4118:	aa 1b       	sub	r26, r26
    411a:	bb 1b       	sub	r27, r27
    411c:	fd 01       	movw	r30, r26
    411e:	0d c0       	rjmp	.+26     	; 0x413a <__udivmodsi4_ep>

00004120 <__udivmodsi4_loop>:
    4120:	aa 1f       	adc	r26, r26
    4122:	bb 1f       	adc	r27, r27
    4124:	ee 1f       	adc	r30, r30
    4126:	ff 1f       	adc	r31, r31
    4128:	a2 17       	cp	r26, r18
    412a:	b3 07       	cpc	r27, r19
    412c:	e4 07       	cpc	r30, r20
    412e:	f5 07       	cpc	r31, r21
    4130:	20 f0       	brcs	.+8      	; 0x413a <__udivmodsi4_ep>
    4132:	a2 1b       	sub	r26, r18
    4134:	b3 0b       	sbc	r27, r19
    4136:	e4 0b       	sbc	r30, r20
    4138:	f5 0b       	sbc	r31, r21

0000413a <__udivmodsi4_ep>:
    413a:	66 1f       	adc	r22, r22
    413c:	77 1f       	adc	r23, r23
    413e:	88 1f       	adc	r24, r24
    4140:	99 1f       	adc	r25, r25
    4142:	1a 94       	dec	r1
    4144:	69 f7       	brne	.-38     	; 0x4120 <__udivmodsi4_loop>
    4146:	60 95       	com	r22
    4148:	70 95       	com	r23
    414a:	80 95       	com	r24
    414c:	90 95       	com	r25
    414e:	9b 01       	movw	r18, r22
    4150:	ac 01       	movw	r20, r24
    4152:	bd 01       	movw	r22, r26
    4154:	cf 01       	movw	r24, r30
    4156:	08 95       	ret

00004158 <__prologue_saves__>:
    4158:	2f 92       	push	r2
    415a:	3f 92       	push	r3
    415c:	4f 92       	push	r4
    415e:	5f 92       	push	r5
    4160:	6f 92       	push	r6
    4162:	7f 92       	push	r7
    4164:	8f 92       	push	r8
    4166:	9f 92       	push	r9
    4168:	af 92       	push	r10
    416a:	bf 92       	push	r11
    416c:	cf 92       	push	r12
    416e:	df 92       	push	r13
    4170:	ef 92       	push	r14
    4172:	ff 92       	push	r15
    4174:	0f 93       	push	r16
    4176:	1f 93       	push	r17
    4178:	cf 93       	push	r28
    417a:	df 93       	push	r29
    417c:	cd b7       	in	r28, 0x3d	; 61
    417e:	de b7       	in	r29, 0x3e	; 62
    4180:	ca 1b       	sub	r28, r26
    4182:	db 0b       	sbc	r29, r27
    4184:	0f b6       	in	r0, 0x3f	; 63
    4186:	f8 94       	cli
    4188:	de bf       	out	0x3e, r29	; 62
    418a:	0f be       	out	0x3f, r0	; 63
    418c:	cd bf       	out	0x3d, r28	; 61
    418e:	09 94       	ijmp

00004190 <__epilogue_restores__>:
    4190:	2a 88       	ldd	r2, Y+18	; 0x12
    4192:	39 88       	ldd	r3, Y+17	; 0x11
    4194:	48 88       	ldd	r4, Y+16	; 0x10
    4196:	5f 84       	ldd	r5, Y+15	; 0x0f
    4198:	6e 84       	ldd	r6, Y+14	; 0x0e
    419a:	7d 84       	ldd	r7, Y+13	; 0x0d
    419c:	8c 84       	ldd	r8, Y+12	; 0x0c
    419e:	9b 84       	ldd	r9, Y+11	; 0x0b
    41a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    41a2:	b9 84       	ldd	r11, Y+9	; 0x09
    41a4:	c8 84       	ldd	r12, Y+8	; 0x08
    41a6:	df 80       	ldd	r13, Y+7	; 0x07
    41a8:	ee 80       	ldd	r14, Y+6	; 0x06
    41aa:	fd 80       	ldd	r15, Y+5	; 0x05
    41ac:	0c 81       	ldd	r16, Y+4	; 0x04
    41ae:	1b 81       	ldd	r17, Y+3	; 0x03
    41b0:	aa 81       	ldd	r26, Y+2	; 0x02
    41b2:	b9 81       	ldd	r27, Y+1	; 0x01
    41b4:	ce 0f       	add	r28, r30
    41b6:	d1 1d       	adc	r29, r1
    41b8:	0f b6       	in	r0, 0x3f	; 63
    41ba:	f8 94       	cli
    41bc:	de bf       	out	0x3e, r29	; 62
    41be:	0f be       	out	0x3f, r0	; 63
    41c0:	cd bf       	out	0x3d, r28	; 61
    41c2:	ed 01       	movw	r28, r26
    41c4:	08 95       	ret

000041c6 <_exit>:
    41c6:	f8 94       	cli

000041c8 <__stop_program>:
    41c8:	ff cf       	rjmp	.-2      	; 0x41c8 <__stop_program>
